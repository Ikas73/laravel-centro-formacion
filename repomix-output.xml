This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
app/
  Http/
    Controllers/
      Admin/
        AlumnoController.php
        CursoController.php
        DashboardController.php
        EventoController.php
        PreinscritoSepeController.php
        ProfesorController.php
        ScheduleController.php
      Auth/
        AuthenticatedSessionController.php
        ConfirmablePasswordController.php
        EmailVerificationNotificationController.php
        EmailVerificationPromptController.php
        NewPasswordController.php
        PasswordController.php
        PasswordResetLinkController.php
        RegisteredUserController.php
        VerifyEmailController.php
      Controller.php
      EventoController.php
      ProfileController.php
    Requests/
      Auth/
        LoginRequest.php
      ProfileUpdateRequest.php
      StoreCursoRequest.php
      StoreScheduleRequest.php
      UpdateCursoRequest.php
      UpdateScheduleRequest.php
  Models/
    Alumno.php
    AlumnoCurso.php
    Curso.php
    Evento.php
    PreinscritoSepe.php
    Profesor.php
    Schedule.php
    TimeSlot.php
    User.php
  Providers/
    AppServiceProvider.php
  Rules/
    NoScheduleOverlap.php
    NotExistsInTables.php
    SufficientCourseDuration.php
  View/
    Components/
      AppLayout.php
      GuestLayout.php
bootstrap/
  cache/
    .gitignore
  app.php
  providers.php
config/
  app.php
  auth.php
  cache.php
  database.php
  filesystems.php
  logging.php
  mail.php
  queue.php
  services.php
  session.php
database/
  factories/
    AlumnoCursoFactory.php
    AlumnoFactory.php
    CursoFactory.php
    PreinscritoSepeFactory.php
    ProfesorFactory.php
    UserFactory.php
  migrations/
    0001_01_01_000000_create_users_table.php
    0001_01_01_000001_create_cache_table.php
    0001_01_01_000002_create_jobs_table.php
    2025_04_19_203310_create_profesores_table.php
    2025_04_19_203323_create_alumnos_table.php
    2025_04_19_203334_create_cursos_table.php
    2025_04_19_203344_create_alumno_curso_table.php
    2025_04_19_203353_create_preinscritos_sepe_table.php
    2025_05_17_213845_add_estado_to_alumnos_table.php
    2025_06_03_124951_add_estado_to_preinscritos_sepe_table.php
    2025_06_04_123326_add_num_seguridad_social_to_preinscritos_sepe_table.php
    2025_06_04_170305_add_sexo_to_preinscritos_sepe_table.php
    2025_06_15_193251_create_time_slots_table.php
    2025_06_15_193659_create_schedules_table.php
  seeders/
    AlumnoCursoSeeder.php
    AlumnoSeeder.php
    CursoSeeder.php
    DatabaseSeeder.php
    PreinscritoSepeSeeder.php
    ProfesorSeeder.php
    ScheduleSeeder.php
    TimeSlotSeeder.php
    UserSeeder.php
  .gitignore
public/
  .htaccess
  index.php
  robots.txt
resources/
  css/
    admin.css
    app.css
    dashboard-admin.css
    login.css
  js/
    app.js
    bootstrap.js
    particles-config.js
    schedules.js
  views/
    admin/
      alumnos/
        create.blade.php
        edit.blade.php
        index.blade.php
        show.blade.php
      cursos/
        create.blade.php
        edit.blade.php
        index.blade.php
        show.blade.php
      preinscritos/
        create.blade.php
        edit.blade.php
        index_error_placeholder.blade.php
        index.blade.php
        show.blade.php
      profesores/
        create.blade.php
        edit.blade.php
        index.blade.php
        show.blade.php
      schedules/
        create.blade.php
        edit.blade.php
        index.blade.php
      dashboard.blade.php
    auth/
      confirm-password.blade.php
      forgot-password.blade.php
      login.blade.php
      register.blade.php
      reset-password.blade.php
      verify-email.blade.php
    components/
      application-logo.blade.php
      auth-session-status.blade.php
      convert-modal.blade.php
      danger-button.blade.php
      delete-modal.blade.php
      desinscribir-modal.blade.php
      dropdown-link.blade.php
      dropdown.blade.php
      input-error.blade.php
      input-label.blade.php
      modal.blade.php
      nav-link.blade.php
      primary-button.blade.php
      responsive-nav-link.blade.php
      secondary-button.blade.php
      text-input.blade.php
    layouts/
      admin.blade.php
      app.blade.php
      guest.blade.php
      navigation.blade.php
    profile/
      partials/
        delete-user-form.blade.php
        update-password-form.blade.php
        update-profile-information-form.blade.php
      edit.blade.php
    vendor/
      pagination/
        bootstrap-4.blade.php
        bootstrap-5.blade.php
        default.blade.php
        semantic-ui.blade.php
        simple-bootstrap-4.blade.php
        simple-bootstrap-5.blade.php
        simple-default.blade.php
        simple-tailwind.blade.php
        tailwind.blade.php
    welcome.blade.php
routes/
  auth.php
  console.php
  web.php
storage/
  app/
    private/
      .gitignore
    public/
      .gitignore
    .gitignore
  framework/
    cache/
      data/
        .gitignore
      .gitignore
    sessions/
      .gitignore
    testing/
      .gitignore
    views/
      .gitignore
    .gitignore
tests/
  Feature/
    Auth/
      AuthenticationTest.php
      EmailVerificationTest.php
      PasswordConfirmationTest.php
      PasswordResetTest.php
      PasswordUpdateTest.php
      RegistrationTest.php
    ExampleTest.php
    ProfileTest.php
  Unit/
    ExampleTest.php
  TestCase.php
.editorconfig
.env.example
.gitattributes
.gitignore
artisan
composer.json
docker-compose.yml
Dockerfile
Laravel.md
package.json
phpunit.xml
postcss.config.js
README.md
start-dev-fixed.sh
tailwind.config.js
task.json
vite.config.js
workflow-del-proyecto.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/Http/Controllers/Admin/AlumnoController.php">
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Alumno;
use App\Models\Profesor;
use App\Models\Curso;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class AlumnoController extends Controller
{
    public function index(Request $request)
    {
        $searchTerm = $request->input('search');
        // --- NUEVO: Obtener valores de filtro de la request ---
        $filtroGrado = $request->input('grado');
        $filtroEstado = $request->input('estado_filtro'); // Usamos 'estado_filtro' para no colisionar con el campo 'estado' del modelo

        $query = Alumno::query();

        // Aplicar filtro de búsqueda
        if ($searchTerm) {
            $lowerSearchTerm = strtolower($searchTerm);
            $query->where(function ($q) use ($lowerSearchTerm) {
                $q->where(DB::raw('LOWER(nombre)'), 'LIKE', "%{$lowerSearchTerm}%")
                  ->orWhere(DB::raw('LOWER(apellido1)'), 'LIKE', "%{$lowerSearchTerm}%")
                  ->orWhere(DB::raw('LOWER(apellido2)'), 'LIKE', "%{$lowerSearchTerm}%")
                  ->orWhere(DB::raw('LOWER(dni)'), 'LIKE', "%{$lowerSearchTerm}%")
                  ->orWhere(DB::raw('LOWER(email)'), 'LIKE', "%{$lowerSearchTerm}%");
            });
        }

        // --- NUEVO: Aplicar filtro por Grado/Nivel Formativo ---
        if ($filtroGrado) {
            $query->where('nivel_formativo', $filtroGrado);
        }

        // --- NUEVO: Aplicar filtro por Estado ---
        // Asegúrate de que tu tabla 'alumnos' tiene una columna 'estado'
        // y que los valores coinciden con los de $opcionesEstado
        if ($filtroEstado) {
            $query->where('estado', $filtroEstado);
        }

        $alumnos = $query->orderBy('apellido1', 'asc')
                         ->orderBy('nombre', 'asc')
                         ->paginate(7)
                         // ¡IMPORTANTE! appends ahora debe incluir todos los filtros y la búsqueda
                         ->appends($request->query()); // Esto incluye search, grado, y estado_filtro si están presentes

        // KPIs
        // $totalAlumnosActivos = Alumno::count(); // Lo que tenías como placeholder
        $totalAlumnosActivos = Alumno::where('estado', 'Activo')->count(); // Ahora debería funcionar
        $nuevosAlumnosEsteMes = 0;
        $totalProfesores = Profesor::count();
        $ratioAlumnoProfesor = ($totalProfesores > 0 && $totalAlumnosActivos > 0) ? round($totalAlumnosActivos / $totalProfesores, 1) . ':1' : 'N/A';
        $tasaAsistencia = '94.5%';

        // --- NUEVO: Obtener opciones para los filtros ---
        // Obtener todos los niveles formativos distintos y no nulos de la tabla alumnos
        $opcionesGrado = Alumno::select('nivel_formativo')
                                ->whereNotNull('nivel_formativo')
                                ->where('nivel_formativo', '!=', '')
                                ->distinct()
                                ->orderBy('nivel_formativo')
                                ->pluck('nivel_formativo');

        // Definir opciones de estado (o podrías obtenerlas de la BD si tienes una tabla de estados)
        // Asegúrate de que estos valores coincidan con los que usas en tu AlumnoFactory y en el badge de la tabla
        $opcionesEstado = ['Activo', 'Inactivo', 'Pendiente', 'Baja'];


        return view('admin.alumnos.index', compact(
            'alumnos',
            'totalAlumnosActivos',
            'nuevosAlumnosEsteMes',
            'ratioAlumnoProfesor',
            'tasaAsistencia',
            'searchTerm',
            'opcionesGrado',     // <--- NUEVO: Pasar opciones de grado
            'opcionesEstado',    // <--- NUEVO: Pasar opciones de estado
            'filtroGrado',       // <--- NUEVO: Pasar filtro de grado seleccionado
            'filtroEstado'       // <--- NUEVO: Pasar filtro de estado seleccionado
        ));
    }

    /**
     * Muestra el formulario para editar el recurso especificado.
     */
    public function edit(Alumno $alumno) // Route Model Binding inyecta el Alumno
    {
        // Al igual que en create(), podríamos pasar opciones para <selects> si fuera necesario
        // $opcionesEstado = ['Activo', 'Inactivo', 'Pendiente', 'Baja'];
        // return view('admin.alumnos.edit', compact('alumno', 'opcionesEstado'));

        return view('admin.alumnos.edit', compact('alumno'));
    }    

    /**
     * Muestra el formulario para crear un nuevo recurso.
     */
    public function create()
    {
        // Por ahora, solo necesitamos mostrar la vista.
        // Más adelante, si el formulario necesita 'options' para <select> (ej: lista de estados),
        // se pasarían aquí.
        // Por ejemplo, si el estado se elige de una lista fija:
        // $opcionesEstado = ['Activo', 'Inactivo', 'Pendiente', 'Baja'];
        // return view('admin.alumnos.create', compact('opcionesEstado'));

        return view('admin.alumnos.create');
    }



    /**
     * Muestra el recurso especificado.
     * Gracias al Route Model Binding, Laravel automáticamente busca y
     * nos inyecta el objeto Alumno correspondiente al ID en la URL.
     */
    public function show(Alumno $alumno) // Laravel inyecta el objeto Alumno
    {
        // Aquí podrías cargar relaciones si las vas a mostrar en la vista de detalle
        // Ejemplo: $alumno->load('cursosInscritos'); // Si tienes una relación así
        // (Asumiendo que $alumno ya tiene la relación 'cursos' definida)
        $alumno->load('cursos'); // Para la relación ManyToMany

        return view('admin.alumnos.show', compact('alumno'));
    }


    /**
     * Almacena un nuevo recurso creado en el almacenamiento.
     */
    public function store(Request $request)
    {
        // ------ 1. Validación de Datos ------
        // Asegúrate de que los nombres aquí ('nombre', 'apellido1', etc.)
        // coinciden EXACTAMENTE con los atributos 'name' de tus campos de formulario
        // en create.blade.php.
        //dd($request->all()); // Para depurar y ver qué datos se están enviando

        $validatedData = $request->validate([
            'nombre' => 'required|string|max:100',
            'apellido1' => 'required|string|max:100',
            'apellido2' => 'nullable|string|max:100',
            'dni' => 'required|string|max:15|unique:alumnos,dni',
            'email' => 'required|email|max:100|unique:alumnos,email',
            'sexo' => 'required|string|in:Hombre,Mujer,Otro', // Validación para el select
            'fecha_nacimiento' => 'required|date|before_or_equal:today',
            'nacionalidad' => 'required|string|max:50',
            'num_seguridad_social' => 'required|string|max:20|unique:alumnos,num_seguridad_social', // Asegúrate del nombre del campo

            // Campos de la sección "Información de Contacto"
            'direccion' => 'required|string', // Nombre del textarea
            'telefono' => 'required|string|max:20',
            'cp' => 'required|string|max:10',
            'localidad' => 'required|string|max:100',
            'provincia' => 'required|string|max:100',

            // Campos de la sección "Información Académica y Laboral"
            'nivel_formativo' => 'required|string|max:100',
            'situacion_laboral' => 'required|string|max:100',
            'estado' => 'required|string|in:Activo,Inactivo,Pendiente,Baja',
        ]);

        // ------ 2. Creación del Alumno ------
        // Esto asume que todos los campos en $validatedData están en la propiedad $fillable
        // de tu modelo App\Models\Alumno.
        Alumno::create($validatedData);

        // ------ 3. Redirección con Mensaje de Éxito ------
        return redirect()->route('admin.alumnos.index')
                        ->with('success', '¡Alumno añadido correctamente!');
    }

    /**
     * Actualiza el recurso especificado en el almacenamiento.
     */
    public function update(Request $request, Alumno $alumno) // Inyectar Request y el Alumno a actualizar
    {
        // ------ 1. Validación de Datos ------
        // Similar a store(), pero ajusta las reglas 'unique' para ignorar el registro actual
        $validatedData = $request->validate([
            'nombre' => 'required|string|max:100',
            'apellido1' => 'required|string|max:100',
            'apellido2' => 'nullable|string|max:100',
            // Para 'unique', debemos ignorar el DNI/email del alumno actual
            'dni' => 'required|string|max:15|unique:alumnos,dni,' . $alumno->id,
            'email' => 'required|email|max:100|unique:alumnos,email,' . $alumno->id,
            'fecha_nacimiento' => 'required|date|before_or_equal:today',
            'nivel_formativo' => 'required|string|max:100',
            'estado' => 'required|string|in:Activo,Inactivo,Pendiente,Baja',
            // ... añade todas las demás reglas de validación ...
            
            'num_seguridad_social' => 'nullable|string|max:20|unique:alumnos,num_seguridad_social,' . $alumno->id,
            'sexo' => 'nullable|string|in:Hombre,Mujer,Otro',
            'direccion' => 'nullable|string',
            'cp' => 'nullable|string|max:10',
            'localidad' => 'nullable|string|max:100',
            'provincia' => 'nullable|string|max:100',
            'telefono' => 'nullable|string|max:20',
            'nacionalidad' => 'nullable|string|max:50',
            'situacion_laboral' => 'nullable|string|max:100',
            /* Por ejemplo:
            */
        ]);

        // ------ 2. Actualización del Alumno ------
        $alumno->update($validatedData);

        // ------ 3. Redirección con Mensaje de Éxito ------
        return redirect()->route('admin.alumnos.show', $alumno->id) // Redirige a la vista de detalles del alumno
                        ->with('success', '¡Alumno actualizado correctamente!');
    }

    // En Admin/AlumnoController.php

    /**
     * Elimina el recurso especificado del almacenamiento.
     */
    public function destroy(Alumno $alumno) // Route Model Binding inyecta el Alumno
    {
        try {
            $nombreCompleto = $alumno->nombre . ' ' . $alumno->apellido1; // Guardar nombre para el mensaje
            $alumno->delete(); // Elimina el alumno de la base de datos

            // Podrías añadir aquí lógica adicional si necesitas eliminar datos relacionados
            // que no se eliminan en cascada (ej: archivos, etc.), aunque las inscripciones
            // en alumno_curso deberían tener ON DELETE CASCADE si quieres que se borren también.

            return redirect()->route('admin.alumnos.index')
                            ->with('success', "Alumno '{$nombreCompleto}' eliminado correctamente.");

        } catch (\Illuminate\Database\QueryException $e) {
            // Manejar errores de base de datos (ej: si hay restricciones de clave foránea que impiden borrar)
            // Loguear el error también es una buena práctica: Log::error($e->getMessage());
            return redirect()->route('admin.alumnos.index')
                            ->with('error', 'No se pudo eliminar el alumno. Es posible que tenga datos asociados (ej: cursos inscritos) que impiden su eliminación o hubo un error en la base de datos.');
        } catch (\Exception $e) {
            // Manejar otros errores inesperados
            // Log::error($e->getMessage());
            return redirect()->route('admin.alumnos.index')
                            ->with('error', 'Ocurrió un error inesperado al intentar eliminar el alumno.');
        }
    }

    
    /**
     * Obtiene los cursos en los que un alumno NO está inscrito.
     * Devuelve una respuesta JSON para ser usada por AJAX.
     */
    public function getCursosDisponibles(Alumno $alumno)
    {
        // Obtener los IDs de los cursos en los que el alumno YA está inscrito
        $cursosInscritosIds = $alumno->cursos()->pluck('cursos.id');

        // Obtener los cursos que NO están en la lista de inscritos y que están "activos"
        $cursosDisponibles = Curso::whereNotIn('id', $cursosInscritosIds)
                                ->where(function ($query) { // Condición de curso activo
                                    $query->where('fecha_fin', '>=', now())
                                            ->orWhereNull('fecha_fin');
                                })
                                ->orderBy('nombre')
                                ->get(['id', 'nombre']); // Solo necesitamos el ID y el nombre

        return response()->json($cursosDisponibles);
    }


    /**
     * Inscribe (vincula) un alumno a un curso específico.
     */
    public function inscribirCurso(Request $request, Alumno $alumno)
    {
        $request->validate([
            'curso_id' => 'required|exists:cursos,id',
            'estado' => 'nullable|string|in:Inscrito,Pendiente', // Validar el estado si lo envías
        ]);

        $cursoId = $request->input('curso_id');
        $estadoInscripcion = $request->input('estado', 'Inscrito'); // Valor por defecto 'Inscrito'

        // Verificar si ya está inscrito (doble verificación)
        if ($alumno->cursos()->where('curso_id', $cursoId)->exists()) {
            return redirect()->route('admin.alumnos.show', $alumno->id)
                            ->with('error', 'El alumno ya está inscrito en este curso.');
        }

        // Inscribir al alumno usando attach() y pasando los datos de la tabla pivote
        $alumno->cursos()->attach($cursoId, [
            'estado' => $estadoInscripcion,
            'fecha_inscripcion' => now(),
            'created_at' => now(),
            'updated_at' => now(),
        ]);

        return redirect()->route('admin.alumnos.show', $alumno->id)
                        ->with('success', '¡Alumno inscrito en el curso correctamente!');
    }

    /**
     * Desvincula (desinscribe) un alumno de un curso específico.
     *
     * @param  \App\Models\Alumno  $alumno
     * @param  \App\Models\Curso  $curso
     * @return \Illuminate\Http\RedirectResponse
     */
    public function desinscribirCurso(Alumno $alumno, Curso $curso)
    {
        Log::info("Intentando desinscribir Alumno ID {$alumno->id} del Curso ID {$curso->id}.");

        try {
            // Llama a la relación 'cursos' del modelo Alumno y usa el método 'detach'
            // para eliminar la fila de la tabla pivote que conecta este alumno con este curso.
            $alumno->cursos()->detach($curso->id);

            // Redirige de vuelta a la página de detalles del alumno con un mensaje de éxito.
            return redirect()->route('admin.alumnos.show', $alumno->id)
                            ->with('success', "Alumno '{$alumno->nombre} {$alumno->apellido1}' desinscrito del curso '{$curso->nombre}' correctamente.");

        } catch (\Exception $e) {
            // Captura cualquier error inesperado durante el proceso.
            Log::error("Error al desinscribir alumno ID {$alumno->id} del curso ID {$curso->id}: " . $e->getMessage());
            return redirect()->route('admin.alumnos.show', $alumno->id)
                            ->with('error', 'Ocurrió un error inesperado al intentar desinscribir al alumno.');
        }
    }

    

}
</file>

<file path="app/Http/Controllers/Admin/CursoController.php">
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Curso; // Importa el modelo Curso
use App\Models\Profesor;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB; // Si planeas usar DB::raw
use Illuminate\Support\Facades\Log;
use App\Http\Requests\StoreCursoRequest; // <-- IMPORTAR
use App\Http\Requests\UpdateCursoRequest; // <-- IMPORTAR

class CursoController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index(Request $request)
{
    $searchTerm = $request->input('search');
    $filtroModalidad = $request->input('modalidad');
    $filtroProfesor = $request->input('profesor_id');

    $query = Curso::with('profesor')->withCount('alumnos'); // Cargar relación profesor y conteo de alumnos

    if ($searchTerm) {
        $lowerSearchTerm = strtolower($searchTerm);
        $query->where(function ($q) use ($lowerSearchTerm) {
            $q->where(DB::raw('LOWER(nombre)'), 'LIKE', "%{$lowerSearchTerm}%")
              ->orWhere(DB::raw('LOWER(codigo)'), 'LIKE', "%{$lowerSearchTerm}%");
        });
    }

    if ($filtroModalidad) {
        $query->where('modalidad', $filtroModalidad);
    }

    if ($filtroProfesor) {
        $query->where('profesor_id', $filtroProfesor);
    }

    $cursos = $query->orderBy('nombre', 'asc')->paginate(8)->appends($request->query());

    $opcionesModalidad = Curso::select('modalidad')->whereNotNull('modalidad')->distinct()->orderBy('modalidad')->pluck('modalidad');
    $opcionesProfesores = Profesor::orderBy('apellido1')->orderBy('nombre')->get(['id', 'nombre', 'apellido1']); // Para el select

    return view('admin.cursos.index', compact(
        'cursos',
        'searchTerm',
        'opcionesModalidad',
        'filtroModalidad',
        'opcionesProfesores',
        'filtroProfesor'
    ));
}

    // Aquí deberían estar los otros métodos generados por --resource
    // public function create() { /* ... */ }
    /**
 * Muestra el formulario para crear un nuevo Curso.
 */
public function create()
{
    // Obtener todos los profesores para el dropdown de asignación
    // Ordenarlos para que el select sea más fácil de usar
    $profesores = Profesor::orderBy('apellido1')->orderBy('nombre')->get(['id', 'nombre', 'apellido1']);

    // Podrías pasar otras opciones si las tienes (ej: modalidades fijas, niveles fijos)
    // $opcionesModalidad = ['Online', 'Presencial', 'Semipresencial (Blended)'];
    // $opcionesNivel = ['Básico', 'Intermedio', 'Avanzado'];

    return view('admin.cursos.create', compact(
        'profesores'
        // 'opcionesModalidad',
        // 'opcionesNivel'
    ));
}
    // public function store(Request $request) { /* ... */ }
    public function store(StoreCursoRequest $request)
        {
            // ¡YA NO NECESITAS $request->validate()!
        // Laravel lo hace automáticamente antes de ejecutar este código.
        
        // Simplemente crea el curso usando los datos ya validados.
        Curso::create($request->validated());

        return redirect()->route('admin.cursos.index')
                         ->with('success', 'Curso creado con éxito.');
        }

    // public function show(Curso $curso) { /* ... */ }
    /**
     * Muestra el recurso Curso especificado.
     */
    public function show(Curso $curso) // Route Model Binding
    {
        // Cargar las relaciones necesarias para mostrar en la vista de detalles
        $curso->load(['profesor', 'alumnos']);
        // 'profesor': para mostrar quién imparte el curso.
        // 'alumnos': para listar los alumnos inscritos (usando la relación belongsToMany).

        return view('admin.cursos.show', compact('curso'));
    }

    // public function edit(Curso $curso) { /* ... */ }

    /**
     * Muestra el formulario para editar el Curso especificado.
     */
    public function edit(Curso $curso) // Route Model Binding para $curso
    {
        // Obtener todos los profesores para el dropdown
        $profesores = Profesor::orderBy('apellido1')->orderBy('nombre')->get(['id', 'nombre', 'apellido1']);

        // Opcional: Si Modalidad y Nivel son selects con opciones fijas
        // $opcionesModalidad = ['Online', 'Presencial', 'Semipresencial (Blended)'];
        // $opcionesNivel = ['Básico', 'Intermedio', 'Avanzado'];

        return view('admin.cursos.edit', compact(
            'curso',
            'profesores'
            // 'opcionesModalidad',
            // 'opcionesNivel'
        ));
    }


    public function update(UpdateCursoRequest $request, Curso $curso) // <-- CAMBIAR AQUÍ
    {
        // ¡TAMPOCO NECESITAS $request->validate() AQUÍ!
        
        $curso->update($request->validated());

        return redirect()->route('admin.cursos.index')
                         ->with('success', 'Curso actualizado con éxito.');
    }

    
        // public function destroy(Curso $curso) { /* ... */ }

        /**
         * Elimina el recurso Curso especificado del almacenamiento.
         */
        public function destroy(Curso $curso) // Route Model Binding
        {
            try {
                // Verificar si el curso tiene alumnos inscritos
                // Usamos la relación 'alumnos' que definimos en el modelo Curso
                // o la relación 'inscripciones' si prefieres contar directamente en la tabla pivote.
                if ($curso->alumnos()->count() > 0) { // O $curso->inscripciones()->count() > 0
                    return redirect()->route('admin.cursos.index')
                                    ->with('error', "No se puede eliminar el curso '{$curso->nombre}' porque tiene alumnos inscritos. Desinscribe primero a los alumnos o considera archivar el curso.");
                }

                // Si el curso no tiene alumnos, se puede proceder a eliminar
                $nombreCurso = $curso->nombre;
                $curso->delete();

                return redirect()->route('admin.cursos.index')
                                ->with('success', "Curso '{$nombreCurso}' eliminado correctamente.");

            } catch (\Illuminate\Database\QueryException $e) {
                // Manejar otros errores de base de datos
                Log::error("Error al eliminar curso (QueryException) ID {$curso->id}: " . $e->getMessage());
                return redirect()->route('admin.cursos.index')
                                ->with('error', 'No se pudo eliminar el curso debido a un error en la base de datos o restricciones de integridad. Es posible que aún tenga datos asociados.');
            } catch (\Exception $e) {
                Log::error("Error inesperado al eliminar curso ID {$curso->id}: " . $e->getMessage());
                return redirect()->route('admin.cursos.index')
                                ->with('error', 'Ocurrió un error inesperado al intentar eliminar el curso.');
            }
        }

}
</file>

<file path="app/Http/Controllers/Admin/DashboardController.php">
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
// Importar los modelos necesarios
use App\Models\Alumno;
use App\Models\Profesor;
use App\Models\Curso;
use App\Models\PreinscritoSepe;
use App\Models\User;
use Illuminate\Support\Facades\Auth; // Para el usuario logueado
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;

class DashboardController extends Controller
{
    public function index()
    {
        // --- Obtener Datos para Tarjetas de Resumen (KPIs) ---
        $totalStudents = Alumno::count();
        $availableTeachers = Profesor::count();

        // CÁLCULOS DE CURSOS
        $totalCourses = Curso::count();
        $inactiveCourses = Curso::where('fecha_fin', '<', now())->count(); // Cursos cuya fecha_fin ya pasó

        // CÁLCULO DE PREINSCRITOS
        $pendingPreEnrollments = PreinscritoSepe::where('estado', 'Pendiente')->count(); // Asegúrate que tu seeder crea algunos con este estado


        // --- Obtener Datos para Gráficos ---

        // En DashboardController.php

        // --- NUEVO: 1. Enrollment Trends (Datos Dinámicos) ---

        // 1.1. Generar el rango de los últimos 6 meses de forma robusta
        $enrollmentTrends = collect();
        for ($i = 5; $i >= 0; $i--) { // Iterar desde hace 5 meses hasta el mes actual
            $date = Carbon::now()->subMonths($i);
            $enrollmentTrends->put($date->format('Y-m'), 0); // La clave es 'YYYY-MM', el valor inicial es 0
        }
        // Con este bucle, no se necesita sortKeys() porque se insertan en orden cronológico

        // 1.2. Realizar la consulta a la BD (se mantiene igual)
        $newStudentsData = Alumno::select(
                DB::raw("TO_CHAR(created_at, 'YYYY-MM') as month"),
                DB::raw('count(*) as total')
            )
            // La fecha de inicio del filtro debe coincidir con el primer mes que generamos
            ->where('created_at', '>=', Carbon::now()->subMonths(5)->startOfMonth())
            ->groupBy('month')
            ->orderBy('month', 'asc')
            ->pluck('total', 'month');

        // 1.3. Combinar los datos (se mantiene igual)
        // Esto llenará los valores para los meses que sí tuvieron actividad
        $enrollmentTrends = $enrollmentTrends->merge($newStudentsData);

        // 1.4. Preparar los datos finales para la vista (se mantiene igual)
        $enrollmentLabels = $enrollmentTrends->keys()->map(function ($monthString) {
            return Carbon::createFromFormat('Y-m', $monthString)->translatedFormat('F');
        })->values()->toArray();

        $enrollmentData = $enrollmentTrends->values()->toArray();

        // --- FIN NUEVO CÓDIGO ---

        // 2. Pre-enrollment Status (Doughnut)
        // Usa los mismos nombres de estado que en tu seeder y tabla
        $preEnrollmentStatusData = [
            'pending' => PreinscritoSepe::where('estado', 'Pendiente')->count(),
            'approved' => PreinscritoSepe::where('estado', 'Convertido')->count(), // 'Approved' en el gráfico es 'Convertido' en los datos
            'rejected' => PreinscritoSepe::where('estado', 'Rechazado')->count(),
        ];

        // 3. Students per Course (Barras)
        $topCourses = Curso::withCount('alumnos')
                           ->orderBy('alumnos_count', 'desc')
                           ->take(9) // Tomar los 9 cursos con más alumnos para que coincida con tu gráfico de ejemplo
                           ->get();
        $studentsPerCourseLabels = $topCourses->pluck('nombre');
        $studentsPerCourseData = $topCourses->pluck('alumnos_count');

        // --- Obtener Datos para la Tabla de Aplicaciones Recientes ---
        $recentPreEnrollments = PreinscritoSepe::latest('created_at')->take(5)->get();


        // Pasar todas las variables a la vista
        return view('admin.dashboard', compact(
            // KPIs
            'totalStudents',
            'availableTeachers',
            'pendingPreEnrollments',
            'totalCourses',
            'inactiveCourses',
            // Gráficos
            'enrollmentLabels',
            'enrollmentData',
            'preEnrollmentStatusData',
            'studentsPerCourseLabels',
            'studentsPerCourseData',
            // Tabla
            'recentPreEnrollments'
        ));
    }
}
</file>

<file path="app/Http/Controllers/Admin/EventoController.php">
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Models\Evento;
use Illuminate\Http\Request;

class EventoController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        // Placeholder temporal
        return "Lista de Eventos (pendiente)";
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     */
    public function show(Evento $evento)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(Evento $evento)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, Evento $evento)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Evento $evento)
    {
        //
    }
}
</file>

<file path="app/Http/Controllers/Admin/PreinscritoSepeController.php">
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\PreinscritoSepe;
use App\Models\Alumno;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Carbon\Carbon;
use Illuminate\Validation\Rule;
use App\Rules\NotExistsInTables; 

class PreinscritoSepeController extends Controller
{
    public function index(Request $request)
    {
        $searchTerm = $request->input('search');
        $filtroEstadoPre = $request->input('estado_pre');

        $query = PreinscritoSepe::query();

        if ($searchTerm) {
            $lowerSearchTerm = strtolower($searchTerm);
            $query->where(function ($q) use ($lowerSearchTerm) {
                $q->where(DB::raw('LOWER(nombre)'), 'LIKE', "%{$lowerSearchTerm}%")
                  ->orWhere(DB::raw('LOWER(apellido1)'), 'LIKE', "%{$lowerSearchTerm}%")
                  ->orWhere(DB::raw('LOWER(dni)'), 'LIKE', "%{$lowerSearchTerm}%")
                  ->orWhere(DB::raw('LOWER(email)'), 'LIKE', "%{$lowerSearchTerm}%");
            });
        }

        if ($filtroEstadoPre) {
            $query->where('estado', $filtroEstadoPre);
        }

        $preinscritos = $query->orderBy('fecha_importacion', 'desc')
                               ->orderBy('created_at', 'desc')
                               ->paginate(7)
                               ->appends($request->query());

        $totalPreinscritos = PreinscritoSepe::count();
        $preinscritosPendientes = PreinscritoSepe::where('estado', 'Pendiente')->count();
        $importadosHoy = PreinscritoSepe::whereRaw('DATE(COALESCE(fecha_importacion, created_at)) = ?', [Carbon::today()->toDateString()])->count();
        $preinscritosConvertidos = PreinscritoSepe::where('estado', 'Convertido')->count();

        $opcionesEstadoPre = PreinscritoSepe::select('estado')
                                ->whereNotNull('estado')
                                ->where('estado', '!=', '')
                                ->distinct()
                                ->orderBy('estado')
                                ->pluck('estado');

        return view('admin.preinscritos.index', compact(
            'preinscritos',
            'searchTerm',
            'opcionesEstadoPre',
            'filtroEstadoPre',
            'totalPreinscritos',
            'preinscritosPendientes',
            'importadosHoy',
            'preinscritosConvertidos'
        ));
    }

     /**
     * Muestra el formulario para crear un nuevo Preinscrito.
     */
    public function create()
    {
        Log::info("Accediendo a PreinscritoSepeController@create");
        // Opciones para los <select> del formulario
        $opcionesSexo = ['Hombre', 'Mujer', 'Otro'];
        $opcionesNivelFormativo = ['Sin estudios', 'ESO', 'Bachillerato', 'Grado Medio', 'Grado Superior', 'Grado Universitario', 'Máster', 'Doctorado'];
        $opcionesSituacionLaboral = ['Empleado a tiempo completo', 'Empleado a tiempo parcial', 'Desempleado', 'Estudiante', 'Jubilado', 'Autónomo'];
        $opcionesEstadoPreinscrito = ['Pendiente', 'Contactado', 'Interesado', 'Convertido', 'Rechazado'];

        return view('admin.preinscritos.create', compact(
            'opcionesSexo',
            'opcionesNivelFormativo',
            'opcionesSituacionLaboral',
            'opcionesEstadoPreinscrito'
        ));
    }

    public function store(Request $request)
    {
        Log::info("Datos recibidos para crear Preinscrito:", $request->all());
    
        $opcionesValidasSexo = ['Hombre', 'Mujer', 'Otro'];
        $opcionesValidasNivelFormativo = ['Sin estudios', 'ESO', 'Bachillerato', 'Grado Medio', 'Grado Superior', 'Grado Universitario', 'Máster', 'Doctorado'];
        $opcionesValidasSituacionLaboral = ['Empleado a tiempo completo', 'Empleado a tiempo parcial', 'Desempleado', 'Estudiante', 'Jubilado', 'Autónomo'];
        $opcionesValidasEstadoPreinscrito = ['Pendiente', 'Contactado', 'Interesado', 'Convertido', 'Rechazado'];
    
        $validatedData = $request->validate([
            'nombre' => 'required|string|max:100',
            'apellido1' => 'required|string|max:100',
            'apellido2' => 'nullable|string|max:100',
            'dni' => [
                'required', 'string', 'max:15',
                'regex:/^([0-9]{8}[A-Z]|[XYZ][0-9]{7}[A-Z])$/i',
                'unique:preinscritos_sepe,dni', // Regla 'unique' simple para 'store'
            ],
            'email' => 'nullable|email|max:100|unique:preinscritos_sepe,email',
            'sexo' => ['nullable', 'string', Rule::in($opcionesValidasSexo)],
            'fecha_nacimiento' => 'nullable|date|before_or_equal:today',
            'nacionalidad' => 'nullable|string|max:50',
            'num_seguridad_social' => 'nullable|string|max:20|unique:preinscritos_sepe,num_seguridad_social',
            'direccion' => 'nullable|string',
            'telefono' => 'nullable|string|max:20',
            'cp' => 'nullable|string|max:10',
            'localidad' => 'nullable|string|max:100',
            'provincia' => 'nullable|string|max:100',
            'nivel_formativo' => ['nullable', 'string', Rule::in($opcionesValidasNivelFormativo)],
            'situacion_laboral' => ['nullable', 'string', Rule::in($opcionesValidasSituacionLaboral)],
            'estado' => ['required', 'string', Rule::in($opcionesValidasEstadoPreinscrito)],
            'fecha_importacion' => 'nullable|date_format:Y-m-d\TH:i',
        ]);
    
        if (empty($validatedData['fecha_importacion'])) {
            $validatedData['fecha_importacion'] = now();
        } else {
            $validatedData['fecha_importacion'] = Carbon::parse($validatedData['fecha_importacion'])->format('Y-m-d H:i:s');
        }
    
        try {
            PreinscritoSepe::create($validatedData);
            return redirect()->route('admin.preinscritos.index')->with('success', 'Preinscrito añadido correctamente.');
        } catch (\Exception $e) {
            Log::error("Error al crear PreinscritoSepe: " . $e->getMessage(), ['exception' => $e]);
            return redirect()->back()->withInput()->with('error', 'Hubo un error al guardar el preinscrito.');
        }
    }
    

    /**
     * Muestra el recurso PreinscritoSepe especificado.
     */
    public function show(PreinscritoSepe $preinscrito) // Route Model Binding
    {
        Log::info("Mostrando detalles para Preinscrito ID: " . $preinscrito->id);
        // No hay relaciones complejas que cargar para un preinscrito por ahora,
        // a menos que lo hayas asociado a un curso de interés, etc.

        return view('admin.preinscritos.show', compact('preinscrito'));
    }

    /**
     * Muestra el formulario para editar el Preinscrito especificado.
     */
    public function edit(PreinscritoSepe $preinscrito) // Route Model Binding
    {
        Log::info("Accediendo a PreinscritoSepeController@edit para preinscrito ID " . $preinscrito->id);

        // Pasa las opciones necesarias para los <select> en tu edit.blade.php
        $opcionesValidasSexo = ['Hombre', 'Mujer', 'Otro'];
        $opcionesValidasNivelFormativo = ['Sin estudios', 'ESO', 'Bachillerato', 'Grado Medio', 'Grado Superior', 'Grado Universitario', 'Máster', 'Doctorado'];
        $opcionesValidasSituacionLaboral = ['Empleado a tiempo completo', 'Empleado a tiempo parcial', 'Desempleado', 'Estudiante', 'Jubilado', 'Autónomo'];
        $opcionesValidasEstadoPreinscrito = ['Pendiente', 'Contactado', 'Interesado', 'Convertido', 'Rechazado'];

        return view('admin.preinscritos.edit', compact(
            'preinscrito',
            'opcionesValidasSexo',
            'opcionesValidasNivelFormativo',
            'opcionesValidasSituacionLaboral',
            'opcionesValidasEstadoPreinscrito'
        ));
    }

    /**
     * Actualiza el Preinscrito especificado en el almacenamiento.
     */
    public function update(Request $request, PreinscritoSepe $preinscrito)
    {
        Log::info("Recibiendo datos para PreinscritoSepe@update para ID " . $preinscrito->id, $request->all());

        $opcionesValidasSexo = ['Hombre', 'Mujer', 'Otro'];
        $opcionesValidasNivelFormativo = ['Sin estudios', 'ESO', 'Bachillerato', 'Grado Medio', 'Grado Superior', 'Grado Universitario', 'Máster', 'Doctorado'];
        $opcionesValidasSituacionLaboral = ['Empleado a tiempo completo', 'Empleado a tiempo parcial', 'Desempleado', 'Estudiante', 'Jubilado', 'Autónomo'];
        $opcionesValidasEstadoPreinscrito = ['Pendiente', 'Contactado', 'Interesado', 'Convertido', 'Rechazado'];

        $validatedData = $request->validate([
            'nombre' => 'required|string|max:100',
            'apellido1' => 'required|string|max:100',
            'apellido2' => 'nullable|string|max:100',
            'dni' => [
                'required', 'string', 'max:15', 'regex:/^([0-9]{8}[A-Z]|[XYZ][0-9]{7}[A-Z])$/i',
                Rule::unique('preinscritos_sepe', 'dni')->ignore($preinscrito->id), // Correcto para update
            ],
            'email' => [
                'nullable', 'email', 'max:100',
                Rule::unique('preinscritos_sepe', 'email')->ignore($preinscrito->id), // Correcto para update
            ],
            'sexo' => ['nullable', 'string', Rule::in($opcionesValidasSexo)],
            'fecha_nacimiento' => 'nullable|date|before_or_equal:today',
            'nacionalidad' => 'nullable|string|max:50',
            'num_seguridad_social' => [
                'nullable', 'string', 'max:20',
                Rule::unique('preinscritos_sepe', 'num_seguridad_social')->ignore($preinscrito->id), // Correcto para update
            ],
            'direccion' => 'nullable|string',
            'telefono' => 'nullable|string|max:20',
            'cp' => 'nullable|string|max:10',
            'localidad' => 'nullable|string|max:100',
            'provincia' => 'nullable|string|max:100',
            'nivel_formativo' => ['nullable', 'string', Rule::in($opcionesValidasNivelFormativo)],
            'situacion_laboral' => ['nullable', 'string', Rule::in($opcionesValidasSituacionLaboral)],
            'estado' => ['required', 'string', Rule::in($opcionesValidasEstadoPreinscrito)],
            'fecha_importacion' => 'nullable|date_format:Y-m-d\TH:i',
        ]);

        if ($request->filled('fecha_importacion')) {
            $validatedData['fecha_importacion'] = Carbon::parse($request->input('fecha_importacion'))->format('Y-m-d H:i:s');
        } else {
            if ($request->has('fecha_importacion') && !$request->filled('fecha_importacion')) {
                unset($validatedData['fecha_importacion']);
            }
        }

        try {
            $preinscrito->update($validatedData);
            return redirect()->route('admin.preinscritos.show', $preinscrito->id)
                            ->with('success', 'Preinscrito actualizado correctamente.');
        } catch (\Exception $e) {
            Log::error("Error al actualizar PreinscritoSepe ID " . $preinscrito->id . ": " . $e->getMessage(), ['exception' => $e]);
            return redirect()->back()->withInput()->with('error', 'Hubo un error al actualizar el preinscrito.');
        }
    }

    /**
     * Elimina el Preinscrito especificado del almacenamiento.
     */
    public function destroy(PreinscritoSepe $preinscrito) // Route Model Binding
    {
        Log::info("Intentando eliminar Preinscrito ID: {$preinscrito->id}");
        try {
            $nombreCompleto = $preinscrito->nombre . ' ' . $preinscrito->apellido1;
            $preinscrito->delete();
            Log::info("Preinscrito ID {$preinscrito->id} ('{$nombreCompleto}') eliminado.");
            return redirect()->route('admin.preinscritos.index')->with('success', "Preinscrito '{$nombreCompleto}' eliminado correctamente.");
        } catch (\Exception $e) {
            Log::error("Error al eliminar Preinscrito ID {$preinscrito->id}: " . $e->getMessage());
            return redirect()->route('admin.preinscritos.index')->with('error', 'No se pudo eliminar el preinscrito.');
        }
    }

   
    /**
     * Convierte un PreinscritoSepe a Alumno.
     */
    public function convertirAAlumno(PreinscritoSepe $preinscrito)
    {
        Log::info("Intentando convertir Preinscrito ID {$preinscrito->id} a Alumno.");

        /* -----------------------------------------------------------------
         | 1) Cortocircuito si YA está convertido
         *-----------------------------------------------------------------*/
        if ($preinscrito->estado === 'Convertido') {
            return back()->with('error', 'Este preinscrito ya fue convertido.');
        }

        /* -----------------------------------------------------------------
         | 2) Comprobar si existe otro alumno con mismo DNI o e-mail
         *-----------------------------------------------------------------*/
        $alumnoExistente = Alumno::where('dni', $preinscrito->dni)
            ->orWhere(function ($q) use ($preinscrito) {
                if ($preinscrito->email) {
                    $q->where('email', $preinscrito->email);
                }
            })
            ->first();

        if ($alumnoExistente) {
            Log::warning("Conversión abortada: duplicado DNI/Email (Alumno ID {$alumnoExistente->id}).");
            return back()->with('error',
                'Ya existe un alumno con el mismo DNI o correo electrónico.');
        }

        /* -----------------------------------------------------------------
         | 3) Preparar datos para el nuevo alumno
         *-----------------------------------------------------------------*/
        $datosNuevoAlumno = [
            'nombre'              => $preinscrito->nombre,
            'apellido1'           => $preinscrito->apellido1,
            'apellido2'           => $preinscrito->apellido2,
            'dni'                 => $preinscrito->dni,
            'email'               => $preinscrito->email,
            'telefono'            => $preinscrito->telefono,
            'fecha_nacimiento'    => $preinscrito->fecha_nacimiento,
            'sexo'                => $preinscrito->sexo,
            'direccion'           => $preinscrito->direccion,
            'cp'                  => $preinscrito->cp,
            'localidad'           => $preinscrito->localidad,
            'provincia'           => $preinscrito->provincia,
            'nacionalidad'        => $preinscrito->nacionalidad,
            'situacion_laboral'   => $preinscrito->situacion_laboral,
            'nivel_formativo'     => $preinscrito->nivel_formativo,
            'num_seguridad_social'=> $preinscrito->num_seguridad_social,
            'estado'              => 'Activo',   // estado inicial en la tabla alumnos
        ];

        /* -----------------------------------------------------------------
         | 4) Ejecución atómica
         *-----------------------------------------------------------------*/
        DB::beginTransaction();

        try {
            // 4a. Crear alumno
            $alumno = Alumno::create($datosNuevoAlumno);

            // 4b. Marcar preinscrito
            $preinscrito->update([
                'estado'     => 'Convertido',
                'alumno_id'  => $alumno->id,
            ]);

            DB::commit();

            Log::info("Preinscrito ID {$preinscrito->id} -> Alumno ID {$alumno->id} OK.");
            return redirect()
                ->route('admin.alumnos.show', $alumno->id)
                ->with('success',
                    "Preinscrito '{$preinscrito->nombre} {$preinscrito->apellido1}' convertido correctamente.");

        } catch (\Throwable $e) {
            DB::rollBack();
            Log::error("Error al convertir Preinscrito ID {$preinscrito->id}: {$e->getMessage()}",
                       ['exception' => $e]);
            return back()->with('error',
                'Ocurrió un error inesperado al convertir el preinscrito.');
        }
    }


    
}
</file>

<file path="app/Http/Controllers/Admin/ProfesorController.php">
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Profesor;
use App\Models\Curso; // Necesario para el KPI de cursos por profesor
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB; // Para búsqueda insensible
use Illuminate\Support\Facades\Log;

class ProfesorController extends Controller
{
    public function index(Request $request)
    {
        $searchTerm = $request->input('search');
        $filtroEspecialidad = $request->input('especialidad'); // Para el nuevo filtro

        $query = Profesor::query();

        // Aplicar filtro de búsqueda por nombre, DNI, email, etc.
        if ($searchTerm) {
            $lowerSearchTerm = strtolower($searchTerm);
            $query->where(function ($q) use ($lowerSearchTerm) {
                $q->where(DB::raw('LOWER(nombre)'), 'LIKE', "%{$lowerSearchTerm}%")
                  ->orWhere(DB::raw('LOWER(apellido1)'), 'LIKE', "%{$lowerSearchTerm}%")
                  ->orWhere(DB::raw('LOWER(apellido2)'), 'LIKE', "%{$lowerSearchTerm}%")
                  ->orWhere(DB::raw('LOWER(dni)'), 'LIKE', "%{$lowerSearchTerm}%")
                  ->orWhere(DB::raw('LOWER(email)'), 'LIKE', "%{$lowerSearchTerm}%");
                // Podrías añadir búsqueda por especialidad aquí también si quieres que el campo de texto busque en especialidades
                // ->orWhere(DB::raw('LOWER(especialidad)'), 'LIKE', "%{$lowerSearchTerm}%");
            });
        }

        // NUEVO: Aplicar filtro por Especialidad
        if ($filtroEspecialidad) {
            $query->where('especialidad', $filtroEspecialidad);
        }

        $profesores = $query->withCount('cursos') // NUEVO: Contar cursos para mostrar en la tabla
                            ->orderBy('apellido1', 'asc')
                            ->orderBy('nombre', 'asc')
                            ->paginate(7) // Ajusta a 7 para que quepa como en la imagen
                            ->appends($request->query()); // Mantener todos los parámetros de la URL en la paginación
        $totalProfesores = Profesor::count();
        

        // NUEVO: Obtener opciones para el filtro de especialidad
        $opcionesEspecialidad = Profesor::select('especialidad')
                                    ->whereNotNull('especialidad')
                                    ->where('especialidad', '!=', '')
                                    ->distinct()
                                    ->orderBy('especialidad')
                                    ->pluck('especialidad');
        $activosEsteMes = $totalProfesores;
        $totalEspecialidades = $opcionesEspecialidad->count();
        

        // KPIs (Ejemplos basados en la imagen)
        
        // Media Cursos/Profesor: Necesitaríamos el total de cursos asignados
        // Esto es un cálculo más complejo, por ahora un placeholder o un cálculo simple.
        // $totalCursosAsignados = Curso::whereNotNull('profesor_id')->count();
        // $mediaCursosPorProfesor = ($totalProfesores > 0) ? round($totalCursosAsignados / $totalProfesores, 1) : 0;
        // Por simplicidad, usaremos un placeholder hasta tener una mejor lógica para "cursos asignados a ESTOS profesores"
        // Cálculo más preciso para media de cursos
        $profesoresConCursos = Profesor::withCount('cursos')->get();
        $totalCursosAsignados = $profesoresConCursos->sum('cursos_count');
        $mediaCursosPorProfesor = ($totalProfesores > 0) ? round($totalCursosAsignados / $totalProfesores, 1) : 0;

        
        

        return view('admin.profesores.index', compact(
            'profesores',
            'searchTerm',
            'opcionesEspecialidad',   // Pasar opciones de filtro
            'filtroEspecialidad',     // Pasar filtro seleccionado
            'totalProfesores',        // KPI
            'mediaCursosPorProfesor', // KPI
            'totalEspecialidades',    // KPI
            'activosEsteMes'          // KPI
        ));
    }

    // ... Asegúrate que los otros métodos CRUD (create, store, show, edit, update, destroy)
    //     están presentes, aunque sea con un return "" o return view("...") vacío por ahora,
    //     para que las rutas resource no den error si se intenta acceder a ellas.
    //     Ya los implementaste antes, así que deberían estar bien.
    public function create()
{
    // Podrías pasar listas de opciones para <selects> si las tienes (ej: tipos de titulación, especialidades fijas)
     $opcionesTitulacion = ['Licenciatura', 'Grado', 'Máster', 'Doctorado', 'Ingeniería Técnica', 'Otra'];
     $opcionesEspecialidad = ['Desarrollo Web', 'Bases de Datos', 'Redes', 'Marketing Digital', 'Finanzas', 'Otra'];
     
     return view('admin.profesores.create', compact('opcionesTitulacion', 'opcionesEspecialidad'));

    //return view('admin.profesores.create');
}

/**
 * Almacena un nuevo recurso Profesor creado en el almacenamiento.
 */
public function store(Request $request)
{
    
    $validatedData = $request->validate([
        'nombre' => 'required|string|max:100',
        'apellido1' => 'required|string|max:100',
        'apellido2' => 'nullable|string|max:100',
        'dni' => [
            'required',
            'string',
            'max:15',
            'regex:/^([0-9]{8}[A-Z]|[XYZ][0-9]{7}[A-Z])$/i',
            'unique:profesores,dni',
        ],
        'email' => 'required|email|max:100|unique:profesores,email',
        'fecha_nacimiento' => 'nullable|date|before_or_equal:today',
        'sexo' => 'nullable|string|in:Hombre,Mujer,Otro',
        'direccion' => 'nullable|string',
        'telefono' => 'nullable|string|max:20',
        'num_seguridad_social' => 'nullable|string|max:20|unique:profesores,num_seguridad_social',

        
        'titulacion_academica' => 'nullable|string|in:' . implode(',', Profesor::TITULACIONES_VALIDAS),
        'especialidad' => 'nullable|string|in:' . implode(',', Profesor::ESPECIALIDADES_VALIDAS),
    ]);

    Profesor::create($validatedData);

    return redirect()->route('admin.profesores.index')
                     ->with('success', '¡Profesor añadido correctamente!');
}

// Debes hacer un cambio similar en el método update(), recordando añadir la
// excepción del ID actual si el campo es 'unique', aunque para 'titulacion_academica'
// o 'especialidad' no suelen ser únicos.
public function update(Request $request, Profesor $profesore)
{
    
    $validatedData = $request->validate([
        'nombre' => 'required|string|max:100',
        'apellido1' => 'required|string|max:100',
        'apellido2' => 'nullable|string|max:100',
        'dni' => [
            'required',
            'string',
            'max:15',
            'regex:/^([0-9]{8}[A-Z]|[XYZ][0-9]{7}[A-Z])$/i',
            'unique:profesores,dni,' . $profesore->id, // Ignora el DNI del profesor actual
        ],
        'email' => 'required|email|max:100|unique:profesores,email,' . $profesore->id,
        'fecha_nacimiento' => 'nullable|date|before_or_equal:today',
        'sexo' => 'nullable|string|in:Hombre,Mujer,Otro',
        'direccion' => 'nullable|string',
        'telefono' => 'nullable|string|max:20',
        'num_seguridad_social' => 'nullable|string|max:20|unique:profesores,num_seguridad_social,' . $profesore->id,

        
        'titulacion_academica' => 'nullable|string|in:' . implode(',', Profesor::TITULACIONES_VALIDAS),
        'especialidad' => 'nullable|string|in:' . implode(',', Profesor::ESPECIALIDADES_VALIDAS),
        
    ]);

    $profesore->update($validatedData);

    return redirect()->route('admin.profesores.show', $profesore->id)
                     ->with('success', '¡Profesor actualizado correctamente!');
}

public function destroy(Profesor $profesore) // Asegúrate que la variable es $profesore
{
    try {
        if ($profesore->cursos()->count() > 0) {
            return redirect()->route('admin.profesores.index')
                             ->with('error', "No se puede eliminar el profesor '{$profesore->nombre} {$profesore->apellido1}' porque tiene cursos asignados. Reasigna o elimina esos cursos primero.");
        }

        $nombreCompleto = $profesore->nombre . ' ' . $profesore->apellido1;
        $profesore->delete(); // Intento de eliminación

        return redirect()->route('admin.profesores.index')
                         ->with('success', "Profesor '{$nombreCompleto}' eliminado correctamente.");

    } catch (\Illuminate\Database\QueryException $e) {
        // Loguear el error real para más detalles
        \Illuminate\Support\Facades\Log::error("Error al eliminar profesor (QueryException) ID {$profesore->id}: " . $e->getMessage());
        return redirect()->route('admin.profesores.index')
                         ->with('error', 'No se pudo eliminar el profesor. Error de base de datos o restricción de integridad.');
    } catch (\Exception $e) {
        \Illuminate\Support\Facades\Log::error("Error inesperado al eliminar profesor ID {$profesore->id}: " . $e->getMessage());
        return redirect()->route('admin.profesores.index')
                         ->with('error', 'Ocurrió un error inesperado al intentar eliminar el profesor.');
    }
}


/**
 * Muestra el recurso Profesor especificado.
 */
public function show(Profesor $profesore) // Route Model Binding
{
    // Cargar la relación 'cursos' para tener acceso a los cursos que imparte
    // el profesor en la vista de detalles.
    $profesore->load('cursos');

    return view('admin.profesores.show', compact('profesore'));
}

// En app/Http/Controllers/Admin/ProfesorController.php

public function edit(Profesor $profesore) // Route Model Binding
{
    // Si necesitaras pasar opciones para <select> (ej: lista de especialidades o titulaciones
    // definidas centralmente), las obtendrías aquí y las pasarías con compact().
     $opcionesTitulacion = Profesor::TITULACIONES_VALIDAS; // Si las tienes como constante en el modelo
     $opcionesEspecialidad = Profesor::ESPECIALIDADES_VALIDAS;

    // return view('admin.profesores.edit', compact('profesore', 'opcionesTitulacion', 'opcionesEspecialidad'));
    return view('admin.profesores.edit', compact('profesore'));
}
}
</file>

<file path="app/Http/Controllers/Admin/ScheduleController.php">
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Http\Requests\StoreScheduleRequest;
use App\Http\Requests\UpdateScheduleRequest;
use App\Models\Schedule;
use App\Models\Curso;
use App\Models\Profesor;
use App\Models\TimeSlot;
use Carbon\Carbon;

class ScheduleController extends Controller
{
    /**
     * Muestra la vista principal del calendario.
     */
    public function index()
    {
        return view('admin.schedules.index');
    }

    /**
     * Obtiene y formatea los eventos para FullCalendar,
     * alineado con la migración real.
     */
    public function fetchEvents()
    {
        $schedules = Schedule::with(['curso.profesor'])->get();

        $events = $schedules->map(function ($schedule) {
            if (!$schedule->curso || !$schedule->curso->fecha_inicio || !$schedule->curso->fecha_fin) {
                return null;
            }

            // rrule.js espera un entero para 'byday' (0=Lunes, 6=Domingo).
            // Mapeamos nuestro valor de la BD (0=Domingo, 1=Lunes) al formato de rrule.js.
            $dbToRruleDay = [0 => 6, 1 => 0, 2 => 1, 3 => 2, 4 => 3, 5 => 4, 6 => 5];
            $byday = $dbToRruleDay[$schedule->dia_semana] ?? 0; // Por defecto Lunes si hay error.

            $dtstart = $schedule->curso->fecha_inicio->format('Y-m-d') . 'T' . $schedule->hora_inicio;
            $until = $schedule->curso->fecha_fin->format('Y-m-d');

            return [
                'id'      => $schedule->id,
                'title'   => $schedule->curso->nombre,
                'rrule'   => [
                    'dtstart' => $dtstart,
                    'until'   => $until,
                    'freq'    => 'WEEKLY',
                    'byweekday'   => [$byday],
                ],
                'duration' => Carbon::parse($schedule->hora_inicio)->diff(Carbon::parse($schedule->hora_fin))->format('%H:%I:%S'),
                'backgroundColor' => $this->stringToColor($schedule->curso->nombre),
                'borderColor'     => $this->stringToColor($schedule->curso->nombre, -20),
                'extendedProps' => [
                    'profesor' => $schedule->curso->profesor ? $schedule->curso->profesor->nombre . ' ' . $schedule->curso->profesor->apellido1 : 'No asignado',
                    'aula'     => $schedule->aula,
                ]
            ];
        })->filter();

        return response()->json($events);
    }

    /**
     * Helper para generar un color consistente a partir de un string.
     */
    private function stringToColor($str, $lightnessAdjustment = 0)
    {
        $hash = 0;
        for ($i = 0; $i < strlen($str); $i++) {
            $hash = ord($str[$i]) + (($hash << 5) - $hash);
        }
        $hue = $hash % 360;
        $lightness = 50 + $lightnessAdjustment;
        return "hsl({$hue}, 80%, {$lightness}%)";
    }
}
</file>

<file path="app/Http/Controllers/Auth/AuthenticatedSessionController.php">
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Http\Requests\Auth\LoginRequest;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\View\View;

class AuthenticatedSessionController extends Controller
{
    /**
     * Display the login view.
     */
    public function create(): View
    {
        return view('auth.login');
    }

    /**
     * Handle an incoming authentication request.
     */
    public function store(LoginRequest $request): RedirectResponse
    {
        $request->authenticate();

        $request->session()->regenerate();

        return redirect()->intended(route('admin.dashboard', absolute: false));
    }

    /**
     * Destroy an authenticated session.
     */
    public function destroy(Request $request): RedirectResponse
    {
        Auth::guard('web')->logout();

        $request->session()->invalidate();

        $request->session()->regenerateToken();

        return redirect('/');
    }
}
</file>

<file path="app/Http/Controllers/Auth/ConfirmablePasswordController.php">
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\ValidationException;
use Illuminate\View\View;

class ConfirmablePasswordController extends Controller
{
    /**
     * Show the confirm password view.
     */
    public function show(): View
    {
        return view('auth.confirm-password');
    }

    /**
     * Confirm the user's password.
     */
    public function store(Request $request): RedirectResponse
    {
        if (! Auth::guard('web')->validate([
            'email' => $request->user()->email,
            'password' => $request->password,
        ])) {
            throw ValidationException::withMessages([
                'password' => __('auth.password'),
            ]);
        }

        $request->session()->put('auth.password_confirmed_at', time());

        return redirect()->intended(route('dashboard', absolute: false));
    }
}
</file>

<file path="app/Http/Controllers/Auth/EmailVerificationNotificationController.php">
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;

class EmailVerificationNotificationController extends Controller
{
    /**
     * Send a new email verification notification.
     */
    public function store(Request $request): RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(route('dashboard', absolute: false));
        }

        $request->user()->sendEmailVerificationNotification();

        return back()->with('status', 'verification-link-sent');
    }
}
</file>

<file path="app/Http/Controllers/Auth/EmailVerificationPromptController.php">
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\View\View;

class EmailVerificationPromptController extends Controller
{
    /**
     * Display the email verification prompt.
     */
    public function __invoke(Request $request): RedirectResponse|View
    {
        return $request->user()->hasVerifiedEmail()
                    ? redirect()->intended(route('dashboard', absolute: false))
                    : view('auth.verify-email');
    }
}
</file>

<file path="app/Http/Controllers/Auth/NewPasswordController.php">
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Auth\Events\PasswordReset;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Password;
use Illuminate\Support\Str;
use Illuminate\Validation\Rules;
use Illuminate\View\View;

class NewPasswordController extends Controller
{
    /**
     * Display the password reset view.
     */
    public function create(Request $request): View
    {
        return view('auth.reset-password', ['request' => $request]);
    }

    /**
     * Handle an incoming new password request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'token' => ['required'],
            'email' => ['required', 'email'],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        // Here we will attempt to reset the user's password. If it is successful we
        // will update the password on an actual user model and persist it to the
        // database. Otherwise we will parse the error and return the response.
        $status = Password::reset(
            $request->only('email', 'password', 'password_confirmation', 'token'),
            function (User $user) use ($request) {
                $user->forceFill([
                    'password' => Hash::make($request->password),
                    'remember_token' => Str::random(60),
                ])->save();

                event(new PasswordReset($user));
            }
        );

        // If the password was successfully reset, we will redirect the user back to
        // the application's home authenticated view. If there is an error we can
        // redirect them back to where they came from with their error message.
        return $status == Password::PASSWORD_RESET
                    ? redirect()->route('login')->with('status', __($status))
                    : back()->withInput($request->only('email'))
                        ->withErrors(['email' => __($status)]);
    }
}
</file>

<file path="app/Http/Controllers/Auth/PasswordController.php">
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules\Password;

class PasswordController extends Controller
{
    /**
     * Update the user's password.
     */
    public function update(Request $request): RedirectResponse
    {
        $validated = $request->validateWithBag('updatePassword', [
            'current_password' => ['required', 'current_password'],
            'password' => ['required', Password::defaults(), 'confirmed'],
        ]);

        $request->user()->update([
            'password' => Hash::make($validated['password']),
        ]);

        return back()->with('status', 'password-updated');
    }
}
</file>

<file path="app/Http/Controllers/Auth/PasswordResetLinkController.php">
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Password;
use Illuminate\View\View;

class PasswordResetLinkController extends Controller
{
    /**
     * Display the password reset link request view.
     */
    public function create(): View
    {
        return view('auth.forgot-password');
    }

    /**
     * Handle an incoming password reset link request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'email' => ['required', 'email'],
        ]);

        // We will send the password reset link to this user. Once we have attempted
        // to send the link, we will examine the response then see the message we
        // need to show to the user. Finally, we'll send out a proper response.
        $status = Password::sendResetLink(
            $request->only('email')
        );

        return $status == Password::RESET_LINK_SENT
                    ? back()->with('status', __($status))
                    : back()->withInput($request->only('email'))
                        ->withErrors(['email' => __($status)]);
    }
}
</file>

<file path="app/Http/Controllers/Auth/RegisteredUserController.php">
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Auth\Events\Registered;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules;
use Illuminate\View\View;

class RegisteredUserController extends Controller
{
    /**
     * Display the registration view.
     */
    public function create(): View
    {
        return view('auth.register');
    }

    /**
     * Handle an incoming registration request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'lowercase', 'email', 'max:255', 'unique:'.User::class],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
        ]);

        event(new Registered($user));

        Auth::login($user);

        return redirect(route('dashboard', absolute: false));
    }
}
</file>

<file path="app/Http/Controllers/Auth/VerifyEmailController.php">
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Auth\Events\Verified;
use Illuminate\Foundation\Auth\EmailVerificationRequest;
use Illuminate\Http\RedirectResponse;

class VerifyEmailController extends Controller
{
    /**
     * Mark the authenticated user's email address as verified.
     */
    public function __invoke(EmailVerificationRequest $request): RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(route('dashboard', absolute: false).'?verified=1');
        }

        if ($request->user()->markEmailAsVerified()) {
            event(new Verified($request->user()));
        }

        return redirect()->intended(route('dashboard', absolute: false).'?verified=1');
    }
}
</file>

<file path="app/Http/Controllers/Controller.php">
<?php

namespace App\Http\Controllers;

abstract class Controller
{
    //
}
</file>

<file path="app/Http/Controllers/EventoController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class EventoController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        return 'Página de eventos funcionando correctamente';
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     */
    public function show(string $id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        //
    }
}
</file>

<file path="app/Http/Controllers/ProfileController.php">
<?php

namespace App\Http\Controllers;

use App\Http\Requests\ProfileUpdateRequest;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Redirect;
use Illuminate\View\View;

class ProfileController extends Controller
{
    /**
     * Display the user's profile form.
     */
    public function edit(Request $request): View
    {
        return view('profile.edit', [
            'user' => $request->user(),
        ]);
    }

    /**
     * Update the user's profile information.
     */
    public function update(ProfileUpdateRequest $request): RedirectResponse
    {
        $request->user()->fill($request->validated());

        if ($request->user()->isDirty('email')) {
            $request->user()->email_verified_at = null;
        }

        $request->user()->save();

        return Redirect::route('profile.edit')->with('status', 'profile-updated');
    }

    /**
     * Delete the user's account.
     */
    public function destroy(Request $request): RedirectResponse
    {
        $request->validateWithBag('userDeletion', [
            'password' => ['required', 'current_password'],
        ]);

        $user = $request->user();

        Auth::logout();

        $user->delete();

        $request->session()->invalidate();
        $request->session()->regenerateToken();

        return Redirect::to('/');
    }
}
</file>

<file path="app/Http/Requests/Auth/LoginRequest.php">
<?php

namespace App\Http\Requests\Auth;

use Illuminate\Auth\Events\Lockout;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;

class LoginRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'email' => ['required', 'string', 'email'],
            'password' => ['required', 'string'],
        ];
    }

    /**
     * Attempt to authenticate the request's credentials.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function authenticate(): void
    {
        $this->ensureIsNotRateLimited();

        if (! Auth::attempt($this->only('email', 'password'), $this->boolean('remember'))) {
            RateLimiter::hit($this->throttleKey());

            throw ValidationException::withMessages([
                'email' => trans('auth.failed'),
            ]);
        }

        RateLimiter::clear($this->throttleKey());
    }

    /**
     * Ensure the login request is not rate limited.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function ensureIsNotRateLimited(): void
    {
        if (! RateLimiter::tooManyAttempts($this->throttleKey(), 5)) {
            return;
        }

        event(new Lockout($this));

        $seconds = RateLimiter::availableIn($this->throttleKey());

        throw ValidationException::withMessages([
            'email' => trans('auth.throttle', [
                'seconds' => $seconds,
                'minutes' => ceil($seconds / 60),
            ]),
        ]);
    }

    /**
     * Get the rate limiting throttle key for the request.
     */
    public function throttleKey(): string
    {
        return Str::transliterate(Str::lower($this->string('email')).'|'.$this->ip());
    }
}
</file>

<file path="app/Http/Requests/ProfileUpdateRequest.php">
<?php

namespace App\Http\Requests;

use App\Models\User;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class ProfileUpdateRequest extends FormRequest
{
    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'name' => ['required', 'string', 'max:255'],
            'email' => [
                'required',
                'string',
                'lowercase',
                'email',
                'max:255',
                Rule::unique(User::class)->ignore($this->user()->id),
            ],
        ];
    }
}
</file>

<file path="app/Http/Requests/StoreCursoRequest.php">
<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class StoreCursoRequest extends FormRequest
{
    public function authorize(): bool
    {
        return true; // Permitimos que cualquier usuario autenticado pueda intentar crear
    }

    public function rules(): array
    {
        return [
            'nombre'         => ['required', 'string', 'max:255'],
            'profesor_id'    => ['nullable', 'exists:profesores,id'],
            'fecha_inicio'   => ['required', 'date'],
            'fecha_fin'      => ['required', 'date', 'after_or_equal:fecha_inicio'],
            'horas_totales'  => ['required', 'integer', 'min:1'],    
            // --- AÑADE Y/O COMPLETA ESTOS CAMPOS ---
        'codigo' => [
            'nullable',
            'string',
            'max:20',
            Rule::unique('cursos', 'codigo') // Asegura que el código sea único en la tabla 'cursos'
        ],
        'descripcion' => 'nullable|string|max:5000', // Un límite más alto para descripciones
        'nivel' => 'nullable|string|max:255',
        'requisitos' => 'nullable|string|max:5000',        
        'horario' => 'nullable|string|max:255',
        'centros' => 'nullable|string|max:255',

        ];
    }
}
</file>

<file path="app/Http/Requests/StoreScheduleRequest.php">
<?php

namespace App\Http\Requests;

use App\Rules\NoScheduleOverlap;
use App\Rules\SufficientCourseDuration;
use Illuminate\Foundation\Http\FormRequest;

class StoreScheduleRequest extends FormRequest
{
    public function authorize(): bool
    {
        return true;
    }

    public function rules(): array
    {
        return [
            /// Aplicamos la nueva regla al curso_id
            'curso_id'     => ['required', 'exists:cursos,id', new SufficientCourseDuration()],
            'profesor_id'  => ['required', 'exists:profesores,id'],
            'weekday'      => ['required', 'integer', 'between:0,6'],
            'start_time'   => ['required', 'date_format:H:i', new NoScheduleOverlap()],
            'end_time'     => ['required', 'date_format:H:i', 'after:start_time'],
            'room'         => ['required', 'string', 'max:50'],
        ];
    }
}
</file>

<file path="app/Http/Requests/UpdateCursoRequest.php">
<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class UpdateCursoRequest extends FormRequest
{
    public function authorize(): bool
    {
        return true; // Permitimos que cualquier usuario autenticado pueda intentar editar
    }

    public function rules(): array
{
    // Obtener el ID del curso desde la ruta (ej: /cursos/15/edit)
    $cursoId = $this->route('curso')->id;

    return [
        // Campos que ya funcionaban
        'nombre' => 'required|string|max:255',
        'modalidad' => 'required|string|in:Online,Presencial,"Semipresencial (Blended)"',
        'profesor_id' => 'required|exists:profesores,id',
        'plazas_maximas' => 'required|integer|min:1',
        
        // --- AÑADE Y/O COMPLETA ESTOS CAMPOS ---
        'codigo' => [
            'nullable',
            'string',
            'max:20',
            // Ignora la regla 'unique' para el curso que se está editando
            Rule::unique('cursos', 'codigo')->ignore($cursoId) 
        ],
        'descripcion' => 'nullable|string|max:5000',
        'nivel' => 'nullable|string|max:255',
        'requisitos' => 'nullable|string|max:5000',
        'fecha_inicio' => 'nullable|date',
        'fecha_fin' => 'nullable|date|after_or_equal:fecha_inicio',
        'horas_totales' => 'nullable|integer|min:1',
        'horario' => 'nullable|string|max:255',
        'centros' => 'nullable|string|max:255',
    ];
}
}
</file>

<file path="app/Http/Requests/UpdateScheduleRequest.php">
<?php

namespace App\Http\Requests;

use App\Rules\NoScheduleOverlap;
use App\Rules\SufficientCourseDuration;
use Illuminate\Foundation\Http\FormRequest;

class UpdateScheduleRequest extends FormRequest
{
    public function authorize(): bool
    {
        return true;
    }

    public function rules(): array
    {
        // Las reglas son idénticas a las de creación.
        // La lógica para manejar duplicados o conflictos se gestiona en el controlador.
        return [
            // Pasamos el ID del horario actual al constructor de la regla
            'curso_id'     => ['required', 'exists:cursos,id', new SufficientCourseDuration($this->schedule->id)],
            'profesor_id'  => ['required', 'exists:profesores,id'],
            'weekday'      => ['required', 'integer', 'between:0,6'],
            'start_time'   => ['required', 'date_format:H:i', new NoScheduleOverlap($this->schedule->id)],
            'end_time'     => ['required', 'date_format:H:i', 'after:start_time'],
            'room'         => ['required', 'string', 'max:50'],
        ];
    }
}
</file>

<file path="app/Models/Alumno.php">
<?php

namespace App\Models;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;

class Alumno extends Model
{
    use HasFactory;

    /**
     * Los atributos que son asignables masivamente.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'nombre',
        'apellido1',
        'apellido2',
        'dni',
        'num_seguridad_social',
        'fecha_nacimiento',
        'sexo',
        'direccion',
        'cp',
        'localidad',
        'provincia',
        'telefono',
        'email',
        'nacionalidad',
        'situacion_laboral',
        'nivel_formativo',
        'estado', 
    ];
    protected $table = 'alumnos'; // Ya lo tienes, si es necesario

    /**
    * Obtiene todos los registros de inscripción (tabla alumno_curso) para este alumno.
    */
    public function inscripciones(): HasMany
    {
        // Busca registros en 'alumno_curso' donde 'alumno_id' coincida con el ID de este alumno.
        return $this->hasMany(AlumnoCurso::class);
    }

    /**
    * Obtiene los cursos en los que está inscrito directamente este alumno.
    */
    public function cursos(): BelongsToMany
    {
        // Define una relación muchos-a-muchos con el modelo Curso.
        // El segundo argumento es el nombre de la tabla pivote.
        // Laravel inferirá las claves foráneas 'alumno_id' y 'curso_id' en la tabla pivote.
        // Si quisieras acceder a columnas extra de la tabla pivote (como 'nota', 'estado'),
        // usarías ->withPivot('nota', 'estado').
        return $this->belongsToMany(Curso::class, 'alumno_curso')
                    ->withPivot('fecha_inscripcion', 'nota', 'estado') // Opcional: para acceder a datos de la pivote
                    ->withTimestamps(); // Opcional: si la tabla pivote tiene created_at/updated_at y quieres que Eloquent los maneje
    }
}
</file>

<file path="app/Models/AlumnoCurso.php">
<?php

namespace App\Models;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class AlumnoCurso extends Model
{
    use HasFactory; 
    protected $table = 'alumno_curso';

    /**
     * Los atributos que son asignables masivamente.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'alumno_id',        // Clave foránea
        'curso_id',         // Clave foránea
        'fecha_inscripcion',
        'nota',
        'estado',
    ];

    /**
    * Obtiene el alumno asociado a esta inscripción.
    */
    public function alumno(): BelongsTo
    {
        // Busca la clave foránea 'alumno_id' en esta tabla ('alumno_curso').
        return $this->belongsTo(Alumno::class);
    }

    /**
    * Obtiene el curso asociado a esta inscripción.
    */
    public function curso(): BelongsTo
    {
        // Busca la clave foránea 'curso_id' en esta tabla ('alumno_curso').
        return $this->belongsTo(Curso::class);
}
}
</file>

<file path="app/Models/Curso.php">
<?php

namespace App\Models;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;

class Curso extends Model
{
    use HasFactory; 

    // Aquí pueden ir tus propiedades $fillable, $hidden, relaciones, etc.
    protected $table = 'cursos'; // Nombre de la tabla en la base de datos

    /**
     * Los atributos que son asignables masivamente.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'nombre',
        'codigo',
        'descripcion',
        'modalidad',
        'nivel',
        'requisitos',
        'fecha_inicio',
        'fecha_fin',
        'horas_totales',
        'horario',
        'centros',
        'profesor_id', // Incluir la clave foránea si se asigna masivamente
        'plazas_maximas',
        
    ];

     /**
     * Los atributos que deben ser convertidos a tipos nativos.
     * Esto es útil para que las fechas se traten como objetos Carbon.
     * @var array<string, string>
     */
    protected $casts = [
        'fecha_inicio' => 'date',
        'fecha_fin' => 'date',
        'plazas_maximas' => 'integer',
        'horas_totales' => 'integer',
        
    ];

    /**
    * Obtiene el profesor que imparte este curso.
    */
    public function profesor(): BelongsTo
    {
        // Laravel busca automáticamente una columna 'profesor_id' en esta tabla ('cursos')
        // para enlazarla con la tabla 'profesores'.
        return $this->belongsTo(Profesor::class);
    }

    /**
    * Obtiene todos los registros de inscripción (tabla alumno_curso) para este curso.
    */
    public function inscripciones(): HasMany
    {
        // Busca registros en 'alumno_curso' donde 'curso_id' coincida con el ID de este curso.
        return $this->hasMany(AlumnoCurso::class);
    }

    /**
    * Obtiene los alumnos inscritos directamente en este curso.
    */
    public function alumnos(): BelongsToMany
    {
        // Define la relación inversa muchos-a-muchos.
        return $this->belongsToMany(Alumno::class, 'alumno_curso')
                    ->withPivot('fecha_inscripcion', 'nota', 'estado') // Mismas opciones que antes
                    ->withTimestamps(); // Mismas opciones que antes
    }

    /**
    * Obtiene las franjas horarias asociadas a este curso.
    * @return \Illuminate\Database\Eloquent\Relations\HasMany
    * @throws \Illuminate\Database\Eloquent\Relations\RelationNotFoundException
    * Esta relación es 1-a-1, ya que cada curso tiene una única franja horaria.
    */
    public function schedules()
    {
        return $this->hasMany(Schedule::class, 'curso_id');
    }

}
</file>

<file path="app/Models/Evento.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Evento extends Model
{
    //
}
</file>

<file path="app/Models/PreinscritoSepe.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class PreinscritoSepe extends Model
{
    use HasFactory;
    
    protected $table = 'preinscritos_sepe';

    protected $fillable = [
        'nombre',
        'apellido1',
        'apellido2',
        'dni',
        'email',
        'sexo',                 // Añadido
        'fecha_nacimiento',
        'nacionalidad',
        'num_seguridad_social', // Añadido
        'direccion',
        'telefono',
        'cp',
        'localidad',
        'provincia',
        'nivel_formativo',
        'situacion_laboral',
        'estado',               // Añadido
        'fecha_importacion',    // Añadido
    ];

    protected $casts = [
        'fecha_nacimiento' => 'date',
        'fecha_importacion' => 'datetime',
    ];

    // Aquí podrías añadir relaciones si los preinscritos se asocian a algo más (ej: un curso deseado)
}
</file>

<file path="app/Models/Profesor.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;

class Profesor extends Model
{
    use HasFactory;

    public const TITULACIONES_VALIDAS = ['Licenciatura', 'Grado', 'Máster', 'Doctorado', 'Ingeniería Técnica', 'Otra'];
    public const ESPECIALIDADES_VALIDAS = ['Desarrollo Web', 'Bases de Datos', 'Redes', 'Marketing Digital', 'Finanzas', 'Otra'];

    /**
     * La tabla asociada con el modelo.
     *
     * @var string
     */
    protected $table = 'profesores'; // <-- ¡AÑADIR ESTA LÍNEA!

    // Aquí pueden ir tus propiedades $fillable, $hidden, relaciones, etc.
    // protected $fillable = [...];
    
    /**
     * Los atributos que son asignables masivamente.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'nombre',
        'apellido1',
        'apellido2',
        'dni',
        'num_seguridad_social',
        'fecha_nacimiento',
        'sexo',
        'direccion',
        'telefono',
        'email',
        'titulacion_academica',
        'especialidad',
        // No incluir 'id', 'created_at', 'updated_at'
    ];



    /**
    * Obtiene los cursos impartidos por este profesor.
    */
    public function cursos(): HasMany
    {
        // Laravel busca automáticamente la clave foránea 'profesor_id' en la tabla 'cursos'
        // porque el método está en el modelo 'Profesor'.
        return $this->hasMany(Curso::class);
    }

    /**
     * Obtiene los horarios asignados a este profesor.
     *  @return \Illuminate\Database\Eloquent\Relations\HasMany
     *  @throws \Illuminate\Database\Eloquent\Relations\RelationNotFoundException
     * 
     */
    public function schedules()
    {
        return $this->hasMany(Schedule::class, 'profesor_id');
    }

}
</file>

<file path="app/Models/Schedule.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class Schedule extends Model
{
    use HasFactory;

    protected $table = 'schedules';
    protected $fillable = [
        'curso_id',
        'dia_semana',
        'hora_inicio',
        'hora_fin',
        'aula',
        'profesor_id',
    ];

    /* — Relaciones inversas — */
    public function curso()
    {
        return $this->belongsTo(Curso::class, 'curso_id');
    }

    public function profesor()
    {
        // CORRECCIÓN: Asegúrate de que aquí se referencia a App\Models\Profesor
        return $this->belongsTo(Profesor::class, 'profesor_id');
    }

    public function timeSlot()
    {
        return $this->belongsTo(TimeSlot::class);
    }
}
</file>

<file path="app/Models/TimeSlot.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class TimeSlot extends Model
{
    use HasFactory;

    protected $table = 'time_slots';      // ← explícito, por claridad
    protected $fillable = ['weekday', 'start_time', 'end_time', 'room'];

    /* Relación 1-a-1 (o 1-a-muchos si permites duplicar) */
    public function schedule()
    {
        return $this->hasOne(Schedule::class);
    }
}
</file>

<file path="app/Models/User.php">
<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }
}
</file>

<file path="app/Providers/AppServiceProvider.php">
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        //
    }
}
</file>

<file path="app/Rules/NoScheduleOverlap.php">
<?php

namespace App\Rules;

// IMPORTAMOS LAS INTERFACES NECESARIAS
use Illuminate\Contracts\Validation\Rule;
use Illuminate\Contracts\Validation\DataAwareRule; // <-- CORRECCIÓN 1: Importar DataAwareRule
use App\Models\Schedule;

class NoScheduleOverlap implements Rule, DataAwareRule // <-- CORRECCIÓN 2: Implementar DataAwareRule
{
    /**
     * Todos los datos del formulario.
     * @var array
     */
    protected $data = [];

    /**
     * El ID del horario que estamos editando, para ignorarlo en la comprobación.
     * @var int|null
     */
    protected $scheduleIdToIgnore;

    public function __construct($scheduleIdToIgnore = null)
    {
        $this->scheduleIdToIgnore = $scheduleIdToIgnore;
    }

    /**
     * Set the data under validation.
     * Este método AHORA SÍ será llamado por Laravel antes de 'passes()'.
     *
     * @param  array  $data
     * @return $this
     */
    public function setData(array $data)
    {
        $this->data = $data;
        return $this;
    }

    /**
     * Determine if the validation rule passes.
     */
    public function passes($attribute, $value)
    {
        // Extraemos los datos del array $this->data
        $weekday = $this->data['weekday'] ?? null;
        $startTime = $value; // El valor del campo actual (start_time)
        $endTime = $this->data['end_time'] ?? null;
        $profesorId = $this->data['profesor_id'] ?? null;
        $room = $this->data['room'] ?? null;

        // Si falta algún dato esencial, la regla no puede ejecutarse, pero otras reglas lo capturarán.
        if (is_null($weekday) || is_null($startTime) || is_null($endTime) || is_null($profesorId) || is_null($room)) {
            return true;
        }

        $query = Schedule::query()
            ->join('time_slots', 'schedules.time_slot_id', '=', 'time_slots.id')
            ->where('time_slots.weekday', $weekday)
            // La condición clave para detectar solapamiento de tiempo:
            // (start1 < end2) AND (end1 > start2)
            ->where('time_slots.start_time', '<', $endTime)
            ->where('time_slots.end_time', '>', $startTime)
            ->where(function ($q) use ($profesorId, $room) {
                $q->where('schedules.profesor_id', $profesorId)
                  ->orWhere('time_slots.room', $room);
            });

        if ($this->scheduleIdToIgnore) {
            $query->where('schedules.id', '!=', $this->scheduleIdToIgnore);
        }

        return !$query->exists();
    }

    /**
     * Get the validation error message.
     */
    public function message()
    {
        return 'Conflicto de horario: El profesor o el aula ya están ocupados en el intervalo de tiempo seleccionado.';
    }
}
</file>

<file path="app/Rules/NotExistsInTables.php">
<?php

namespace App\Rules;

use Illuminate\Contracts\Validation\InvokableRule; // Para la nueva sintaxis de __invoke
use Illuminate\Support\Facades\DB; // Para interactuar con la base de datos

class NotExistsInTables implements InvokableRule
{
    protected $checks;
    protected $messageFormat;

    /**
     * Create a new rule instance.
     *
     * @param  array  $checks  Array de verificaciones.
     *                         Cada elemento es un array: ['table' => 'nombre_tabla', 'column' => 'nombre_columna', 'label' => 'tipo de entidad']
     *                         Ejemplo: [['table' => 'alumnos', 'column' => 'dni', 'label' => 'alumno'], ['table' => 'profesores', 'column' => 'dni', 'label' => 'profesor']]
     * @param  string $messageFormat (Opcional) Formato del mensaje de error, ej: "El :attribute ya existe como :entity."
     * @return void
     */
    public function __construct(array $checks, string $messageFormat = 'El :attribute ingresado ya existe como :entity registrado.')
    {
        $this->checks = $checks;
        $this->messageFormat = $messageFormat;
    }

    /**
     * Run the validation rule.
     *
     * @param  string  $attribute El nombre del campo que se está validando (ej: 'dni', 'email')
     * @param  mixed  $value El valor del campo que se está validando
     * @param  \Closure(string): \Illuminate\Translation\PotentiallyTranslatedString  $fail La función de callback para marcar el fallo
     * @return void
     */
    public function __invoke($attribute, $value, $fail)
    {
        // Solo realizar la verificación si el valor no está vacío.
        // Esto hace que la regla sea compatible con 'nullable' si se desea.
        if (!empty($value)) {
            foreach ($this->checks as $check) {
                // Validar que la configuración del check es correcta
                if (!isset($check['table']) || !isset($check['column']) || !isset($check['label'])) {
                    // Podrías lanzar una excepción aquí o loguear un error de configuración de la regla
                    continue; // Saltar este check si está mal configurado
                }

                $exists = DB::table($check['table'])
                            ->where($check['column'], $value)
                            // Si las tablas usan SoftDeletes y quieres ignorar los borrados lógicamente:
                            // ->whereNull('deleted_at') // Descomenta si aplica
                            ->exists();

                if ($exists) {
                    // Personalizar el mensaje de error usando el label proporcionado
                    $fail(str_replace([':attribute', ':entity'], [$attribute, $check['label']], $this->messageFormat));
                    return; // Detener la validación en la primera coincidencia encontrada
                }
            }
        }
    }
}
</file>

<file path="app/Rules/SufficientCourseDuration.php">
<?php

namespace App\Rules;

use Illuminate\Contracts\Validation\Rule;
use Illuminate\Contracts\Validation\DataAwareRule;
use App\Models\Curso;
use App\Models\Schedule;
use Carbon\Carbon;

class SufficientCourseDuration implements Rule, DataAwareRule
{
    protected $data = [];
    protected $scheduleIdToIgnore = null;
    protected $courseTotalHours = 0;

    public function __construct($scheduleIdToIgnore = null)
    {
        $this->scheduleIdToIgnore = $scheduleIdToIgnore;
    }

    public function setData(array $data)
    {
        $this->data = $data;
        return $this;
    }

    public function passes($attribute, $value)
    {
        $cursoId = $this->data['curso_id'] ?? null;
        $startTime = $this->data['start_time'] ?? null;
        $endTime = $this->data['end_time'] ?? null;

        // Si faltan datos básicos, otras reglas se encargarán. No fallamos aquí.
        if (!$cursoId || !$startTime || !$endTime) {
            return true;
        }

        // 1. Obtener la duración total del curso
        $curso = Curso::find($cursoId);
        if (!$curso || !$curso->horas_totales) {
            // Si el curso no tiene horas definidas, no podemos validar.
            return true;
        }
        $this->courseTotalHours = $curso->horas_totales;

        // 2. Calcular la duración del nuevo bloque de horario en horas
        $newHours = Carbon::parse($startTime)->diffInMinutes(Carbon::parse($endTime)) / 60.0;

        // 3. Calcular la suma de horas de los horarios YA existentes para este curso
        $existingHours = Schedule::query()
            ->where('curso_id', $cursoId)
            ->when($this->scheduleIdToIgnore, function ($query) {
                // Si estamos editando, excluimos el horario actual de la suma
                $query->where('id', '!=', $this->scheduleIdToIgnore);
            })
            ->join('time_slots', 'schedules.time_slot_id', '=', 'time_slots.id')
            ->sum(DB::raw('EXTRACT(EPOCH FROM (time_slots.end_time - time_slots.start_time)) / 3600'));

        // 4. Comprobar si el total excede la duración del curso
        return ($existingHours + $newHours) <= $this->courseTotalHours;
    }

    public function message()
    {
        return 'La duración total de los horarios programados no puede exceder las ' . $this->courseTotalHours . ' horas totales del curso.';
    }
}
</file>

<file path="app/View/Components/AppLayout.php">
<?php

namespace App\View\Components;

use Illuminate\View\Component;
use Illuminate\View\View;

class AppLayout extends Component
{
    /**
     * Get the view / contents that represents the component.
     */
    public function render(): View
    {
        return view('layouts.app');
    }
}
</file>

<file path="app/View/Components/GuestLayout.php">
<?php

namespace App\View\Components;

use Illuminate\View\Component;
use Illuminate\View\View;

class GuestLayout extends Component
{
    /**
     * Get the view / contents that represents the component.
     */
    public function render(): View
    {
        return view('layouts.guest');
    }
}
</file>

<file path="bootstrap/cache/.gitignore">
*
!.gitignore
</file>

<file path="bootstrap/app.php">
<?php

use Illuminate\Foundation\Application;
use Illuminate\Foundation\Configuration\Exceptions;
use Illuminate\Foundation\Configuration\Middleware;

return Application::configure(basePath: dirname(__DIR__))
    ->withRouting(
        web: __DIR__.'/../routes/web.php',
        commands: __DIR__.'/../routes/console.php',
        health: '/up',
    )
    ->withMiddleware(function (Middleware $middleware) {
        //
    })
    ->withExceptions(function (Exceptions $exceptions) {
        //
    })->create();
</file>

<file path="bootstrap/providers.php">
<?php

return [
    App\Providers\AppServiceProvider::class,
];
</file>

<file path="config/app.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Application Name
    |--------------------------------------------------------------------------
    |
    | This value is the name of your application, which will be used when the
    | framework needs to place the application's name in a notification or
    | other UI elements where an application name needs to be displayed.
    |
    */

    'name' => env('APP_NAME', 'Laravel'),

    /*
    |--------------------------------------------------------------------------
    | Application Environment
    |--------------------------------------------------------------------------
    |
    | This value determines the "environment" your application is currently
    | running in. This may determine how you prefer to configure various
    | services the application utilizes. Set this in your ".env" file.
    |
    */

    'env' => env('APP_ENV', 'production'),

    /*
    |--------------------------------------------------------------------------
    | Application Debug Mode
    |--------------------------------------------------------------------------
    |
    | When your application is in debug mode, detailed error messages with
    | stack traces will be shown on every error that occurs within your
    | application. If disabled, a simple generic error page is shown.
    |
    */

    'debug' => (bool) env('APP_DEBUG', false),

    /*
    |--------------------------------------------------------------------------
    | Application URL
    |--------------------------------------------------------------------------
    |
    | This URL is used by the console to properly generate URLs when using
    | the Artisan command line tool. You should set this to the root of
    | the application so that it's available within Artisan commands.
    |
    */

    'url' => env('APP_URL', 'http://localhost'),

    /*
    |--------------------------------------------------------------------------
    | Application Timezone
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default timezone for your application, which
    | will be used by the PHP date and date-time functions. The timezone
    | is set to "UTC" by default as it is suitable for most use cases.
    |
    */

    'timezone' => 'UTC',

    /*
    |--------------------------------------------------------------------------
    | Application Locale Configuration
    |--------------------------------------------------------------------------
    |
    | The application locale determines the default locale that will be used
    | by Laravel's translation / localization methods. This option can be
    | set to any locale for which you plan to have translation strings.
    |
    */

    'locale' => env('APP_LOCALE', 'en'),

    'fallback_locale' => env('APP_FALLBACK_LOCALE', 'en'),

    'faker_locale' => env('APP_FAKER_LOCALE', 'en_US'),

    /*
    |--------------------------------------------------------------------------
    | Encryption Key
    |--------------------------------------------------------------------------
    |
    | This key is utilized by Laravel's encryption services and should be set
    | to a random, 32 character string to ensure that all encrypted values
    | are secure. You should do this prior to deploying the application.
    |
    */

    'cipher' => 'AES-256-CBC',

    'key' => env('APP_KEY'),

    'previous_keys' => [
        ...array_filter(
            explode(',', env('APP_PREVIOUS_KEYS', ''))
        ),
    ],

    /*
    |--------------------------------------------------------------------------
    | Maintenance Mode Driver
    |--------------------------------------------------------------------------
    |
    | These configuration options determine the driver used to determine and
    | manage Laravel's "maintenance mode" status. The "cache" driver will
    | allow maintenance mode to be controlled across multiple machines.
    |
    | Supported drivers: "file", "cache"
    |
    */

    'maintenance' => [
        'driver' => env('APP_MAINTENANCE_DRIVER', 'file'),
        'store' => env('APP_MAINTENANCE_STORE', 'database'),
    ],

];
</file>

<file path="config/auth.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Defaults
    |--------------------------------------------------------------------------
    |
    | This option defines the default authentication "guard" and password
    | reset "broker" for your application. You may change these values
    | as required, but they're a perfect start for most applications.
    |
    */

    'defaults' => [
        'guard' => env('AUTH_GUARD', 'web'),
        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Authentication Guards
    |--------------------------------------------------------------------------
    |
    | Next, you may define every authentication guard for your application.
    | Of course, a great default configuration has been defined for you
    | which utilizes session storage plus the Eloquent user provider.
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | Supported: "session"
    |
    */

    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | User Providers
    |--------------------------------------------------------------------------
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | If you have multiple user tables or models you may configure multiple
    | providers to represent the model / table. These providers may then
    | be assigned to any extra authentication guards you have defined.
    |
    | Supported: "database", "eloquent"
    |
    */

    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => env('AUTH_MODEL', App\Models\User::class),
        ],

        // 'users' => [
        //     'driver' => 'database',
        //     'table' => 'users',
        // ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Resetting Passwords
    |--------------------------------------------------------------------------
    |
    | These configuration options specify the behavior of Laravel's password
    | reset functionality, including the table utilized for token storage
    | and the user provider that is invoked to actually retrieve users.
    |
    | The expiry time is the number of minutes that each reset token will be
    | considered valid. This security feature keeps tokens short-lived so
    | they have less time to be guessed. You may change this as needed.
    |
    | The throttle setting is the number of seconds a user must wait before
    | generating more password reset tokens. This prevents the user from
    | quickly generating a very large amount of password reset tokens.
    |
    */

    'passwords' => [
        'users' => [
            'provider' => 'users',
            'table' => env('AUTH_PASSWORD_RESET_TOKEN_TABLE', 'password_reset_tokens'),
            'expire' => 60,
            'throttle' => 60,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Password Confirmation Timeout
    |--------------------------------------------------------------------------
    |
    | Here you may define the amount of seconds before a password confirmation
    | window expires and users are asked to re-enter their password via the
    | confirmation screen. By default, the timeout lasts for three hours.
    |
    */

    'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),

];
</file>

<file path="config/cache.php">
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Cache Store
    |--------------------------------------------------------------------------
    |
    | This option controls the default cache store that will be used by the
    | framework. This connection is utilized if another isn't explicitly
    | specified when running a cache operation inside the application.
    |
    */

    'default' => env('CACHE_STORE', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Cache Stores
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the cache "stores" for your application as
    | well as their drivers. You may even define multiple stores for the
    | same cache driver to group types of items stored in your caches.
    |
    | Supported drivers: "array", "database", "file", "memcached",
    |                    "redis", "dynamodb", "octane", "null"
    |
    */

    'stores' => [

        'array' => [
            'driver' => 'array',
            'serialize' => false,
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_CACHE_CONNECTION'),
            'table' => env('DB_CACHE_TABLE', 'cache'),
            'lock_connection' => env('DB_CACHE_LOCK_CONNECTION'),
            'lock_table' => env('DB_CACHE_LOCK_TABLE'),
        ],

        'file' => [
            'driver' => 'file',
            'path' => storage_path('framework/cache/data'),
            'lock_path' => storage_path('framework/cache/data'),
        ],

        'memcached' => [
            'driver' => 'memcached',
            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),
            'sasl' => [
                env('MEMCACHED_USERNAME'),
                env('MEMCACHED_PASSWORD'),
            ],
            'options' => [
                // Memcached::OPT_CONNECT_TIMEOUT => 2000,
            ],
            'servers' => [
                [
                    'host' => env('MEMCACHED_HOST', '127.0.0.1'),
                    'port' => env('MEMCACHED_PORT', 11211),
                    'weight' => 100,
                ],
            ],
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_CACHE_CONNECTION', 'cache'),
            'lock_connection' => env('REDIS_CACHE_LOCK_CONNECTION', 'default'),
        ],

        'dynamodb' => [
            'driver' => 'dynamodb',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),
            'endpoint' => env('DYNAMODB_ENDPOINT'),
        ],

        'octane' => [
            'driver' => 'octane',
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Cache Key Prefix
    |--------------------------------------------------------------------------
    |
    | When utilizing the APC, database, memcached, Redis, and DynamoDB cache
    | stores, there might be other applications using the same cache. For
    | that reason, you may prefix every cache key to avoid collisions.
    |
    */

    'prefix' => env('CACHE_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_cache_'),

];
</file>

<file path="config/database.php">
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    |
    | Here you may specify which of the database connections below you wish
    | to use as your default connection for database operations. This is
    | the connection which will be utilized unless another connection
    | is explicitly specified when you execute a query / statement.
    |
    */

    'default' => env('DB_CONNECTION', 'sqlite'),

    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    |
    | Below are all of the database connections defined for your application.
    | An example configuration is provided for each database system which
    | is supported by Laravel. You're free to add / remove connections.
    |
    */

    'connections' => [

        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DB_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
            'busy_timeout' => null,
            'journal_mode' => null,
            'synchronous' => null,
        ],

        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'mariadb' => [
            'driver' => 'mariadb',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],

        'sqlsrv' => [
            'driver' => 'sqlsrv',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', 'localhost'),
            'port' => env('DB_PORT', '1433'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            // 'encrypt' => env('DB_ENCRYPT', 'yes'),
            // 'trust_server_certificate' => env('DB_TRUST_SERVER_CERTIFICATE', 'false'),
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    |
    | This table keeps track of all the migrations that have already run for
    | your application. Using this information, we can determine which of
    | the migrations on disk haven't actually been run on the database.
    |
    */

    'migrations' => [
        'table' => 'migrations',
        'update_date_on_publish' => true,
    ],

    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |
    | Redis is an open source, fast, and advanced key-value store that also
    | provides a richer body of commands than a typical key-value system
    | such as Memcached. You may define your connection settings here.
    |
    */

    'redis' => [

        'client' => env('REDIS_CLIENT', 'phpredis'),

        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),
            'persistent' => env('REDIS_PERSISTENT', false),
        ],

        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
        ],

        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
        ],

    ],

];
</file>

<file path="config/filesystems.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Filesystem Disk
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default filesystem disk that should be used
    | by the framework. The "local" disk, as well as a variety of cloud
    | based disks are available to your application for file storage.
    |
    */

    'default' => env('FILESYSTEM_DISK', 'local'),

    /*
    |--------------------------------------------------------------------------
    | Filesystem Disks
    |--------------------------------------------------------------------------
    |
    | Below you may configure as many filesystem disks as necessary, and you
    | may even configure multiple disks for the same driver. Examples for
    | most supported storage drivers are configured here for reference.
    |
    | Supported drivers: "local", "ftp", "sftp", "s3"
    |
    */

    'disks' => [

        'local' => [
            'driver' => 'local',
            'root' => storage_path('app/private'),
            'serve' => true,
            'throw' => false,
            'report' => false,
        ],

        'public' => [
            'driver' => 'local',
            'root' => storage_path('app/public'),
            'url' => env('APP_URL').'/storage',
            'visibility' => 'public',
            'throw' => false,
            'report' => false,
        ],

        's3' => [
            'driver' => 's3',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION'),
            'bucket' => env('AWS_BUCKET'),
            'url' => env('AWS_URL'),
            'endpoint' => env('AWS_ENDPOINT'),
            'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false),
            'throw' => false,
            'report' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Symbolic Links
    |--------------------------------------------------------------------------
    |
    | Here you may configure the symbolic links that will be created when the
    | `storage:link` Artisan command is executed. The array keys should be
    | the locations of the links and the values should be their targets.
    |
    */

    'links' => [
        public_path('storage') => storage_path('app/public'),
    ],

];
</file>

<file path="config/logging.php">
<?php

use Monolog\Handler\NullHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\SyslogUdpHandler;
use Monolog\Processor\PsrLogMessageProcessor;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Log Channel
    |--------------------------------------------------------------------------
    |
    | This option defines the default log channel that is utilized to write
    | messages to your logs. The value provided here should match one of
    | the channels present in the list of "channels" configured below.
    |
    */

    'default' => env('LOG_CHANNEL', 'stack'),

    /*
    |--------------------------------------------------------------------------
    | Deprecations Log Channel
    |--------------------------------------------------------------------------
    |
    | This option controls the log channel that should be used to log warnings
    | regarding deprecated PHP and library features. This allows you to get
    | your application ready for upcoming major versions of dependencies.
    |
    */

    'deprecations' => [
        'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),
        'trace' => env('LOG_DEPRECATIONS_TRACE', false),
    ],

    /*
    |--------------------------------------------------------------------------
    | Log Channels
    |--------------------------------------------------------------------------
    |
    | Here you may configure the log channels for your application. Laravel
    | utilizes the Monolog PHP logging library, which includes a variety
    | of powerful log handlers and formatters that you're free to use.
    |
    | Available drivers: "single", "daily", "slack", "syslog",
    |                    "errorlog", "monolog", "custom", "stack"
    |
    */

    'channels' => [

        'stack' => [
            'driver' => 'stack',
            'channels' => explode(',', env('LOG_STACK', 'single')),
            'ignore_exceptions' => false,
        ],

        'single' => [
            'driver' => 'single',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'daily' => [
            'driver' => 'daily',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'days' => env('LOG_DAILY_DAYS', 14),
            'replace_placeholders' => true,
        ],

        'slack' => [
            'driver' => 'slack',
            'url' => env('LOG_SLACK_WEBHOOK_URL'),
            'username' => env('LOG_SLACK_USERNAME', 'Laravel Log'),
            'emoji' => env('LOG_SLACK_EMOJI', ':boom:'),
            'level' => env('LOG_LEVEL', 'critical'),
            'replace_placeholders' => true,
        ],

        'papertrail' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => env('LOG_PAPERTRAIL_HANDLER', SyslogUdpHandler::class),
            'handler_with' => [
                'host' => env('PAPERTRAIL_URL'),
                'port' => env('PAPERTRAIL_PORT'),
                'connectionString' => 'tls://'.env('PAPERTRAIL_URL').':'.env('PAPERTRAIL_PORT'),
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'stderr' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => StreamHandler::class,
            'handler_with' => [
                'stream' => 'php://stderr',
            ],
            'formatter' => env('LOG_STDERR_FORMATTER'),
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'syslog' => [
            'driver' => 'syslog',
            'level' => env('LOG_LEVEL', 'debug'),
            'facility' => env('LOG_SYSLOG_FACILITY', LOG_USER),
            'replace_placeholders' => true,
        ],

        'errorlog' => [
            'driver' => 'errorlog',
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'null' => [
            'driver' => 'monolog',
            'handler' => NullHandler::class,
        ],

        'emergency' => [
            'path' => storage_path('logs/laravel.log'),
        ],

    ],

];
</file>

<file path="config/mail.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Mailer
    |--------------------------------------------------------------------------
    |
    | This option controls the default mailer that is used to send all email
    | messages unless another mailer is explicitly specified when sending
    | the message. All additional mailers can be configured within the
    | "mailers" array. Examples of each type of mailer are provided.
    |
    */

    'default' => env('MAIL_MAILER', 'log'),

    /*
    |--------------------------------------------------------------------------
    | Mailer Configurations
    |--------------------------------------------------------------------------
    |
    | Here you may configure all of the mailers used by your application plus
    | their respective settings. Several examples have been configured for
    | you and you are free to add your own as your application requires.
    |
    | Laravel supports a variety of mail "transport" drivers that can be used
    | when delivering an email. You may specify which one you're using for
    | your mailers below. You may also add additional mailers if needed.
    |
    | Supported: "smtp", "sendmail", "mailgun", "ses", "ses-v2",
    |            "postmark", "resend", "log", "array",
    |            "failover", "roundrobin"
    |
    */

    'mailers' => [

        'smtp' => [
            'transport' => 'smtp',
            'scheme' => env('MAIL_SCHEME'),
            'url' => env('MAIL_URL'),
            'host' => env('MAIL_HOST', '127.0.0.1'),
            'port' => env('MAIL_PORT', 2525),
            'username' => env('MAIL_USERNAME'),
            'password' => env('MAIL_PASSWORD'),
            'timeout' => null,
            'local_domain' => env('MAIL_EHLO_DOMAIN', parse_url(env('APP_URL', 'http://localhost'), PHP_URL_HOST)),
        ],

        'ses' => [
            'transport' => 'ses',
        ],

        'postmark' => [
            'transport' => 'postmark',
            // 'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),
            // 'client' => [
            //     'timeout' => 5,
            // ],
        ],

        'resend' => [
            'transport' => 'resend',
        ],

        'sendmail' => [
            'transport' => 'sendmail',
            'path' => env('MAIL_SENDMAIL_PATH', '/usr/sbin/sendmail -bs -i'),
        ],

        'log' => [
            'transport' => 'log',
            'channel' => env('MAIL_LOG_CHANNEL'),
        ],

        'array' => [
            'transport' => 'array',
        ],

        'failover' => [
            'transport' => 'failover',
            'mailers' => [
                'smtp',
                'log',
            ],
            'retry_after' => 60,
        ],

        'roundrobin' => [
            'transport' => 'roundrobin',
            'mailers' => [
                'ses',
                'postmark',
            ],
            'retry_after' => 60,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Global "From" Address
    |--------------------------------------------------------------------------
    |
    | You may wish for all emails sent by your application to be sent from
    | the same address. Here you may specify a name and address that is
    | used globally for all emails that are sent by your application.
    |
    */

    'from' => [
        'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),
        'name' => env('MAIL_FROM_NAME', 'Example'),
    ],

];
</file>

<file path="config/queue.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Queue Connection Name
    |--------------------------------------------------------------------------
    |
    | Laravel's queue supports a variety of backends via a single, unified
    | API, giving you convenient access to each backend using identical
    | syntax for each. The default queue connection is defined below.
    |
    */

    'default' => env('QUEUE_CONNECTION', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Queue Connections
    |--------------------------------------------------------------------------
    |
    | Here you may configure the connection options for every queue backend
    | used by your application. An example configuration is provided for
    | each backend supported by Laravel. You're also free to add more.
    |
    | Drivers: "sync", "database", "beanstalkd", "sqs", "redis", "null"
    |
    */

    'connections' => [

        'sync' => [
            'driver' => 'sync',
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_QUEUE_CONNECTION'),
            'table' => env('DB_QUEUE_TABLE', 'jobs'),
            'queue' => env('DB_QUEUE', 'default'),
            'retry_after' => (int) env('DB_QUEUE_RETRY_AFTER', 90),
            'after_commit' => false,
        ],

        'beanstalkd' => [
            'driver' => 'beanstalkd',
            'host' => env('BEANSTALKD_QUEUE_HOST', 'localhost'),
            'queue' => env('BEANSTALKD_QUEUE', 'default'),
            'retry_after' => (int) env('BEANSTALKD_QUEUE_RETRY_AFTER', 90),
            'block_for' => 0,
            'after_commit' => false,
        ],

        'sqs' => [
            'driver' => 'sqs',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),
            'queue' => env('SQS_QUEUE', 'default'),
            'suffix' => env('SQS_SUFFIX'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'after_commit' => false,
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_QUEUE_CONNECTION', 'default'),
            'queue' => env('REDIS_QUEUE', 'default'),
            'retry_after' => (int) env('REDIS_QUEUE_RETRY_AFTER', 90),
            'block_for' => null,
            'after_commit' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Job Batching
    |--------------------------------------------------------------------------
    |
    | The following options configure the database and table that store job
    | batching information. These options can be updated to any database
    | connection and table which has been defined by your application.
    |
    */

    'batching' => [
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'job_batches',
    ],

    /*
    |--------------------------------------------------------------------------
    | Failed Queue Jobs
    |--------------------------------------------------------------------------
    |
    | These options configure the behavior of failed queue job logging so you
    | can control how and where failed jobs are stored. Laravel ships with
    | support for storing failed jobs in a simple file or in a database.
    |
    | Supported drivers: "database-uuids", "dynamodb", "file", "null"
    |
    */

    'failed' => [
        'driver' => env('QUEUE_FAILED_DRIVER', 'database-uuids'),
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'failed_jobs',
    ],

];
</file>

<file path="config/services.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Third Party Services
    |--------------------------------------------------------------------------
    |
    | This file is for storing the credentials for third party services such
    | as Mailgun, Postmark, AWS and more. This file provides the de facto
    | location for this type of information, allowing packages to have
    | a conventional file to locate the various service credentials.
    |
    */

    'postmark' => [
        'token' => env('POSTMARK_TOKEN'),
    ],

    'ses' => [
        'key' => env('AWS_ACCESS_KEY_ID'),
        'secret' => env('AWS_SECRET_ACCESS_KEY'),
        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
    ],

    'resend' => [
        'key' => env('RESEND_KEY'),
    ],

    'slack' => [
        'notifications' => [
            'bot_user_oauth_token' => env('SLACK_BOT_USER_OAUTH_TOKEN'),
            'channel' => env('SLACK_BOT_USER_DEFAULT_CHANNEL'),
        ],
    ],

];
</file>

<file path="config/session.php">
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | This option determines the default session driver that is utilized for
    | incoming requests. Laravel supports a variety of storage options to
    | persist session data. Database storage is a great default choice.
    |
    | Supported: "file", "cookie", "database", "apc",
    |            "memcached", "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
    | Here you may specify the number of minutes that you wish the session
    | to be allowed to remain idle before it expires. If you want them
    | to expire immediately when the browser is closed then you may
    | indicate that via the expire_on_close configuration option.
    |
    */

    'lifetime' => (int) env('SESSION_LIFETIME', 120),

    'expire_on_close' => env('SESSION_EXPIRE_ON_CLOSE', false),

    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | This option allows you to easily specify that all of your session data
    | should be encrypted before it's stored. All encryption is performed
    | automatically by Laravel and you may use the session like normal.
    |
    */

    'encrypt' => env('SESSION_ENCRYPT', false),

    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | When utilizing the "file" session driver, the session files are placed
    | on disk. The default storage location is defined here; however, you
    | are free to provide another location where they should be stored.
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | When using the "database" or "redis" session drivers, you may specify a
    | connection that should be used to manage these sessions. This should
    | correspond to a connection in your database configuration options.
    |
    */

    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | When using the "database" session driver, you may specify the table to
    | be used to store sessions. Of course, a sensible default is defined
    | for you; however, you're welcome to change this to another table.
    |
    */

    'table' => env('SESSION_TABLE', 'sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | When using one of the framework's cache driven session backends, you may
    | define the cache store which should be used to store the session data
    | between requests. This must match one of your defined cache stores.
    |
    | Affects: "apc", "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | Some session drivers must manually sweep their storage location to get
    | rid of old sessions from storage. Here are the chances that it will
    | happen on a given request. By default, the odds are 2 out of 100.
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | Here you may change the name of the session cookie that is created by
    | the framework. Typically, you should not need to change this value
    | since doing so does not grant a meaningful security improvement.
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | The session cookie path determines the path for which the cookie will
    | be regarded as available. Typically, this will be the root path of
    | your application, but you're free to change this when necessary.
    |
    */

    'path' => env('SESSION_PATH', '/'),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | This value determines the domain and subdomains the session cookie is
    | available to. By default, the cookie will be available to the root
    | domain and all subdomains. Typically, this shouldn't be changed.
    |
    */

    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | By setting this option to true, session cookies will only be sent back
    | to the server if the browser has a HTTPS connection. This will keep
    | the cookie from being sent to you when it can't be done securely.
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will prevent JavaScript from accessing the
    | value of the cookie and the cookie will only be accessible through
    | the HTTP protocol. It's unlikely you should disable this option.
    |
    */

    'http_only' => env('SESSION_HTTP_ONLY', true),

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | This option determines how your cookies behave when cross-site requests
    | take place, and can be used to mitigate CSRF attacks. By default, we
    | will set this value to "lax" to permit secure cross-site requests.
    |
    | See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value
    |
    | Supported: "lax", "strict", "none", null
    |
    */

    'same_site' => env('SESSION_SAME_SITE', 'lax'),

    /*
    |--------------------------------------------------------------------------
    | Partitioned Cookies
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will tie the cookie to the top-level site for
    | a cross-site context. Partitioned cookies are accepted by the browser
    | when flagged "secure" and the Same-Site attribute is set to "none".
    |
    */

    'partitioned' => env('SESSION_PARTITIONED_COOKIE', false),

];
</file>

<file path="database/factories/AlumnoCursoFactory.php">
<?php

namespace Database\Factories;

use App\Models\AlumnoCurso; // Verifica la ruta del modelo
use App\Models\Alumno; // Necesario
use App\Models\Curso; // Necesario
use Illuminate\Database\Eloquent\Factories\Factory;

class AlumnoCursoFactory extends Factory
{
    protected $model = AlumnoCurso::class;

    public function definition(): array
    {
        // ESTO ES PROBLEMÁTICO: Genera IDs al azar, sin verificar
        // si el par ya existe o si el curso está lleno.
        // ¡La lógica real DEBE estar en el Seeder!
        $alumnoId = Alumno::inRandomOrder()->first()?->id;
        $cursoId = Curso::inRandomOrder()->first()?->id;

        if (!$alumnoId || !$cursoId) {
             throw new \Exception("Asegúrate de que AlumnoSeeder y CursoSeeder se ejecutan primero.");
        }

        $estado = fake()->randomElement(['Inscrito', 'Completado', 'Baja', 'Pendiente']);
        $nota = ($estado === 'Completado') ? fake()->randomFloat(2, 4, 10) : null; // Nota solo si completado

        return [
            'alumno_id' => $alumnoId,
            'curso_id' => $cursoId,
            'fecha_inscripcion' => fake()->dateTimeBetween('-1 year', 'now')->format('Y-m-d'),
            'nota' => $nota,
            'estado' => $estado,
        ];
    }
}
</file>

<file path="database/factories/AlumnoFactory.php">
<?php

namespace Database\Factories;

use App\Models\Alumno; // Verifica la ruta del modelo
use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Str;

class AlumnoFactory extends Factory
{
    protected $model = Alumno::class;

    public function definition(): array
    {
        $sexo = fake()->randomElement(['Hombre', 'Mujer']);
        $nombre = ($sexo === 'Hombre') ? fake()->firstNameMale() : fake()->firstNameFemale();
        $situacion = ['Desempleado', 'Empleado a tiempo completo', 'Empleado a tiempo parcial', 'Estudiante', 'Autónomo'];
        $nivel = ['Sin estudios', 'ESO', 'Bachillerato', 'Grado Medio', 'Grado Superior', 'Grado Universitario', 'Máster', 'Doctorado'];
        // Genera una fecha/hora aleatoria dentro de los últimos 6 meses
        $fechaCreacion = fake()->dateTimeBetween('-6 months', 'now');

        return [
            'nombre' => $nombre,
            'apellido1' => fake()->lastName(),
            'apellido2' => fake()->optional(0.7)->lastName(),
            'dni' => fake()->unique()->numerify('########') . fake()->randomLetter(),
            //'num_seguridad_social' => fake()->optional(0.8)->unique()->numerify('##/########/##'), // Opcional             
            'num_seguridad_social' => fake()->boolean(80) // 80% de probabilidad de que sea true
                ? fake()->unique()->numerify('##/########/##') // Si es true, genera el número único
                : null, // Si es false (20%), asigna null
            'fecha_nacimiento' => fake()->dateTimeBetween('-50 years', '-16 years')->format('Y-m-d'),
            'sexo' => $sexo,
            'direccion' => fake()->streetAddress(),
            'cp' => fake()->postcode(),
            'localidad' => fake()->city(),
            'provincia' => fake()->state(), // O usa lista de provincias españolas
            // --- ¡CORREGIR ESTA LÍNEA TAMBIÉN! ---
            // Original (incorrecta): 'telefono' => fake()->optional(0.9)->unique()->numerify('6########'),
            'telefono' => fake()->boolean(90) // 90% de probabilidad de tener teléfono
                ? fake()->unique()->numerify('6########') // Si es true, genera
                : null, // Si es false (10%), asigna null            
            'email' => fake()->unique()->safeEmail(),
            'nacionalidad' => fake()->randomElement(['Española', 'Portuguesa', 'Marroquí', 'Colombiana', 'Otra']),
            'situacion_laboral' => fake()->randomElement($situacion),
            'nivel_formativo' => fake()->randomElement($nivel),
            'estado' => fake()->randomElement(['Activo', 'Inactivo', 'Baja', 'Pendiente']), // Ejemplo de estados
            'created_at' => $fechaCreacion,
            'updated_at' => $fechaCreacion, // Usualmente, para datos de prueba, la fecha de actualización es la misma que la de creación
        ];
    }
}
</file>

<file path="database/factories/CursoFactory.php">
<?php

namespace Database\Factories;

use App\Models\Curso; // Verifica la ruta del modelo
use App\Models\Profesor; // Necesario para asignar profesor
use Illuminate\Database\Eloquent\Factories\Factory;
use Carbon\Carbon;

class CursoFactory extends Factory
{
    protected $model = Curso::class;

    public function definition(): array
    {
        $modalidades = ['Presencial', 'Online', 'Semipresencial (Blended)'];
        $niveles = ['Básico', 'Intermedio', 'Avanzado', 'Especialización'];
        $horarios = ['09:00-13:00 L-V (4h)', '16:00-20:00 L-V (4h)', '09:00-15:00 L-V (6h)', '09:00-13:00 y 16:00-20:00 L-J (8h Mixto)', 'Fines de semana (S 09:00-14:00)'];
        $centros = ['Centro Principal - Aula 1', 'Centro Norte - Aula Magna', 'Plataforma Online Moodle', 'Centro Sur - Taller 3'];

        // Asegurarse que existen profesores antes de ejecutar este factory
        $profesorId = Profesor::inRandomOrder()->first()?->id; // Obtiene el ID de un profesor al azar
         // Si no hay profesores, lanza un error o retorna null/default ID? Depende de tu lógica.
         // Para evitar errores, el ProfesorSeeder DEBE ejecutarse antes.
         if(!$profesorId) {
             // Podrías crear un profesor aquí si no existe, pero es mejor asegurar el orden en DatabaseSeeder
             throw new \Exception("No se encontraron profesores para asignar al curso. Asegúrate de ejecutar ProfesorSeeder primero.");
         }

        $fechaInicio = fake()->dateTimeBetween('+1 week', '+6 months');
        $duracionDias = fake()->numberBetween(30, 180); // Duración en días
        $fechaFin = (clone $fechaInicio)->modify("+$duracionDias days");


        return [
            'nombre' => fake()->catchPhrase() . ' ' . fake()->jobTitle(), // Nombre de curso inventado
            'codigo' => fake()->unique()->bothify('??###??'), // Código único
            'descripcion' => fake()->paragraph(3),
            'modalidad' => fake()->randomElement($modalidades),
            'nivel' => fake()->randomElement($niveles),
            'requisitos' => fake()->sentence(10),
            'fecha_inicio' => $fechaInicio->format('Y-m-d'),
            'fecha_fin' => $fechaFin->format('Y-m-d'),
            'horas_totales' => fake()->numberBetween(40, 600),
            'horario' => fake()->randomElement($horarios),
            'centros' => fake()->randomElement($centros),
            'profesor_id' => $profesorId, // Asigna el ID del profesor obtenido
            'plazas_maximas' => fake()->numberBetween(15, 25), // Plazas entre 15 y 25
        ];
    }

    /**
     * Indica que el curso debe tener fechas en el pasado (finalizado).
     *
     * @return \Illuminate\Database\Eloquent\Factories\Factory
     */
    public function finalizado()
    {
        return $this->state(function (array $attributes) {
            // Generar fechas de inicio y fin que estén en el pasado
            $fechaFinPasada = Carbon::instance(fake()->dateTimeBetween('-1 year', '-1 week')); // Fecha fin entre hace 1 año y hace 1 semana
            $duracionDias = fake()->numberBetween(30, 180);
            $fechaInicioPasada = $fechaFinPasada->copy()->subDays($duracionDias); // Restar días para obtener inicio

            return [
                'fecha_inicio' => $fechaInicioPasada->format('Y-m-d'),
                'fecha_fin' => $fechaFinPasada->format('Y-m-d'),
            ];
        });
}
}
</file>

<file path="database/factories/PreinscritoSepeFactory.php">
<?php

namespace Database\Factories;

use App\Models\PreinscritoSepe; // Verifica la ruta del modelo
use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Str;

class PreinscritoSepeFactory extends Factory
{
    protected $model = PreinscritoSepe::class;

    public function definition(): array
    {
        $situacion = ['Desempleado', 'Empleado', 'Mejora de empleo', 'Otro'];
        $nivel = ['Sin estudios', 'ESO', 'Bachillerato', 'Grado Medio', 'Grado Superior', 'Grado Universitario'];
        $estadosPreinscrito = ['Pendiente', 'Contactado', 'Interesado', 'No Interesado', 'Convertido']; // Ajusta tus estados

        return [
            'nombre' => fake()->firstName(),
            'apellido1' => fake()->lastName(),
            'apellido2' => fake()->optional(0.7)->lastName(),
            'dni' => fake()->unique()->numerify('########') . fake()->randomLetter(),
            'fecha_nacimiento' => fake()->dateTimeBetween('-60 years', '-16 years')->format('Y-m-d'),
            'telefono' => fake()->boolean(90) ? fake()->unique()->numerify('6########') : null,
            'email' => fake()->boolean(80) ? fake()->unique()->safeEmail() : null,
            'direccion' => fake()->boolean(70) ? fake()->streetAddress() : null,
            'localidad' => fake()->city(),
            'provincia' => fake()->state(), // O usa una lista de provincias españolas
            'cp' => fake()->boolean(80) ? fake()->postcode() : null,
            'nacionalidad' => fake()->randomElement(['Española', 'Comunitaria', 'Extracomunitaria', 'Otra']),
            'situacion_laboral' => fake()->randomElement($situacion),
            'nivel_formativo' => fake()->randomElement($nivel),
            'fecha_importacion' => fake()->dateTimeThisYear(), // O now() si quieres que siempre sea la fecha actual
            'estado' => fake()->randomElement($estadosPreinscrito), // Asegúrate que el campo 'estado' existe en tu $fillable del modelo
        ];
    }
    
}
</file>

<file path="database/factories/ProfesorFactory.php">
<?php

namespace Database\Factories;

use App\Models\Profesor; // Asegúrate que la ruta a tu modelo es correcta
use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Str; // Para el DNI de ejemplo

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Profesor>
 */
class ProfesorFactory extends Factory
{
    /**
     * The name of the factory's corresponding model.
     *
     * @var string
     */
    protected $model = Profesor::class; // Especifica el modelo aquí también si es necesario

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        // Lista de titulaciones y especialidades de ejemplo
        $titulaciones = [
            'Licenciatura en Informática', 'Grado en Ingeniería de Software', 'Doctorado en IA',
            'Licenciatura en ADE', 'Grado en Marketing Digital', 'Máster en Finanzas',
            'Licenciatura en Filología Inglesa', 'Grado en Traducción e Interpretación',
            'Ingeniería Técnica Industrial', 'Grado en Electrónica Industrial',
            'Licenciatura en Derecho', 'Máster en Derecho Laboral'
        ];
        $especialidades = [
            'Desarrollo Backend (PHP/Java)', 'Desarrollo Frontend (React/Vue)', 'Bases de Datos SQL/NoSQL',
            'Administración de Empresas', 'Marketing Online y SEO', 'Contabilidad y Fiscalidad',
            'Inglés para Negocios (B2/C1)', 'Metodologías Ágiles (Scrum)',
            'Automatización Industrial', 'Sistemas Embebidos',
            'Derecho Mercantil', 'Prevención de Riesgos Laborales'
        ];

        // Generar sexo para usar nombres apropiados
        $sexo = fake()->randomElement(['Hombre', 'Mujer']);
        $nombre = ($sexo === 'Hombre') ? fake()->firstNameMale() : fake()->firstNameFemale();

        return [
            'nombre' => $nombre,
            'apellido1' => fake()->lastName(),
            'apellido2' => fake()->optional(0.7)->lastName(), // 70% de probabilidad de tener segundo apellido
            // DNI: formato realista (8 números + letra), pero letra aleatoria (no calculada)
            // unique() asegura que no se repitan DNI en esta ejecución del seeder
            'dni' => fake()->unique()->numerify('########') . fake()->randomLetter(),
            // NUSS: formato realista, pero números aleatorios
            'num_seguridad_social' => fake()->unique()->numerify('##/########/##'),
            // Fecha de nacimiento para edades entre 28 y 65 años
            'fecha_nacimiento' => fake()->dateTimeBetween('-65 years', '-28 years')->format('Y-m-d'),
            'sexo' => $sexo,
            'direccion' => fake()->streetAddress(),
            // Teléfono móvil español realista
            'telefono' => fake()->unique()->numerify('6########'), // Empieza por 6
            // Email único basado en nombre/apellido
            'email' => fake()->unique()->safeEmail(),
            'titulacion_academica' => fake()->randomElement($titulaciones),
            'especialidad' => fake()->randomElement($especialidades),
            // created_at y updated_at son manejados automáticamente por Eloquent
        ];
    }
}
</file>

<file path="database/factories/UserFactory.php">
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}
</file>

<file path="database/migrations/0001_01_01_000000_create_users_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });

        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });

        Schema::create('sessions', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->foreignId('user_id')->nullable()->index();
            $table->string('ip_address', 45)->nullable();
            $table->text('user_agent')->nullable();
            $table->longText('payload');
            $table->integer('last_activity')->index();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users');
        Schema::dropIfExists('password_reset_tokens');
        Schema::dropIfExists('sessions');
    }
};
</file>

<file path="database/migrations/0001_01_01_000001_create_cache_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('cache', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->mediumText('value');
            $table->integer('expiration');
        });

        Schema::create('cache_locks', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->string('owner');
            $table->integer('expiration');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('cache');
        Schema::dropIfExists('cache_locks');
    }
};
</file>

<file path="database/migrations/0001_01_01_000002_create_jobs_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('jobs', function (Blueprint $table) {
            $table->id();
            $table->string('queue')->index();
            $table->longText('payload');
            $table->unsignedTinyInteger('attempts');
            $table->unsignedInteger('reserved_at')->nullable();
            $table->unsignedInteger('available_at');
            $table->unsignedInteger('created_at');
        });

        Schema::create('job_batches', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->string('name');
            $table->integer('total_jobs');
            $table->integer('pending_jobs');
            $table->integer('failed_jobs');
            $table->longText('failed_job_ids');
            $table->mediumText('options')->nullable();
            $table->integer('cancelled_at')->nullable();
            $table->integer('created_at');
            $table->integer('finished_at')->nullable();
        });

        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('jobs');
        Schema::dropIfExists('job_batches');
        Schema::dropIfExists('failed_jobs');
    }
};
</file>

<file path="database/migrations/2025_04_19_203310_create_profesores_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up()
{
    Schema::create('profesores', function (Blueprint $table) {
        $table->id();
        $table->string('nombre', 100);
        $table->string('apellido1', 100);
        $table->string('apellido2', 100)->nullable();
        $table->string('dni', 15)->unique();
        $table->string('num_seguridad_social', 20)->nullable();
        $table->date('fecha_nacimiento')->nullable();
        $table->string('sexo', 10)->nullable();
        $table->text('direccion')->nullable();
        $table->string('telefono', 20)->nullable();
        $table->string('email', 100)->nullable();
        $table->string('titulacion_academica', 150)->nullable();
        $table->string('especialidad', 100)->nullable();
        $table->timestamps();
    });
}


    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('profesores');
    }
};
</file>

<file path="database/migrations/2025_04_19_203323_create_alumnos_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up()
{
    Schema::create('alumnos', function (Blueprint $table) {
        $table->id();
        $table->string('nombre', 100);
        $table->string('apellido1', 100);
        $table->string('apellido2', 100)->nullable();
        $table->string('dni', 15)->unique();
        $table->string('num_seguridad_social', 20)->nullable();
        $table->date('fecha_nacimiento');
        $table->string('sexo', 10)->nullable();
        $table->text('direccion')->nullable();
        $table->string('cp', 10)->nullable();
        $table->string('localidad', 100)->nullable();
        $table->string('provincia', 100)->nullable();
        $table->string('telefono', 20)->nullable();
        $table->string('email', 100)->nullable();
        $table->string('nacionalidad', 50)->nullable();
        $table->string('situacion_laboral', 100)->nullable();
        $table->string('nivel_formativo', 100)->nullable();
        $table->timestamps();
    });
}


    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('alumnos');
    }
};
</file>

<file path="database/migrations/2025_04_19_203334_create_cursos_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up()
{
    Schema::create('cursos', function (Blueprint $table) {
        $table->id();
        $table->string('nombre', 255);
        $table->string('codigo', 20)->nullable();
        $table->text('descripcion')->nullable();
        $table->string('modalidad', 50)->nullable();
        $table->string('nivel', 50)->nullable();
        $table->text('requisitos')->nullable();
        $table->date('fecha_inicio')->nullable();
        $table->date('fecha_fin')->nullable();
        $table->integer('horas_totales')->nullable();
        $table->string('horario', 100)->nullable();
        $table->string('centros', 255)->nullable();        
        $table->integer('plazas_maximas')->default(20);

        // --- ÚNICA Y CORRECTA DEFINICIÓN PARA PROFESOR_ID ---
        $table->foreignId('profesor_id')
              ->nullable() // O quita nullable si es obligatorio
              ->constrained('profesores') // Especifica la tabla a la que hace referencia
              ->nullOnDelete(); // O tu política preferida en eliminación

        $table->timestamps();
    });
}


    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('cursos');
    }
};
</file>

<file path="database/migrations/2025_04_19_203344_create_alumno_curso_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up()
{
    Schema::create('alumno_curso', function (Blueprint $table) {
        $table->id();
        $table->foreignId('alumno_id')->constrained('alumnos');
        $table->foreignId('curso_id')->constrained('cursos');
        $table->date('fecha_inscripcion')->default(now());
        $table->decimal('nota', 4, 2)->nullable();
        $table->string('estado', 50)->nullable();
        $table->unique(['alumno_id', 'curso_id']);
        $table->timestamps();
    });
}


    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('alumno_curso');
    }
};
</file>

<file path="database/migrations/2025_04_19_203353_create_preinscritos_sepe_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up()
{
    Schema::create('preinscritos_sepe', function (Blueprint $table) {
        $table->id();
        $table->string('nombre', 100)->nullable();
        $table->string('apellido1', 100)->nullable();
        $table->string('apellido2', 100)->nullable();
        $table->string('dni', 15)->nullable();
        $table->date('fecha_nacimiento')->nullable();
        $table->string('telefono', 20)->nullable();
        $table->string('email', 100)->nullable();
        $table->text('direccion')->nullable();
        $table->string('localidad', 100)->nullable();
        $table->string('provincia', 100)->nullable();
        $table->string('cp', 10)->nullable();
        $table->string('nacionalidad', 50)->nullable();
        $table->string('situacion_laboral', 100)->nullable();
        $table->string('nivel_formativo', 100)->nullable();
        $table->timestamp('fecha_importacion')->useCurrent();
        $table->timestamps();
    });
}


    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('preinscritos_sepe');
    }
};
</file>

<file path="database/migrations/2025_05_17_213845_add_estado_to_alumnos_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
            // En el método up() de la nueva migración
        Schema::table('alumnos', function (Blueprint $table) {
            $table->string('estado')->nullable()->after('nivel_formativo'); // O después de la columna que prefieras
        // Podrías poner un default: ->default('Activo');
});
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
            // En el método down()
    Schema::table('alumnos', function (Blueprint $table) {
        $table->dropColumn('estado');
    });
    }
};
</file>

<file path="database/migrations/2025_06_03_124951_add_estado_to_preinscritos_sepe_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        
        Schema::table('preinscritos_sepe', function (Blueprint $table) {
            $table->string('estado')->nullable()->after('nivel_formativo'); 
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        
        Schema::table('preinscritos_sepe', function (Blueprint $table) {
            $table->dropColumn('estado');
        });
    }
};
</file>

<file path="database/migrations/2025_06_04_123326_add_num_seguridad_social_to_preinscritos_sepe_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
{
    Schema::table('preinscritos_sepe', function (Blueprint $table) {
        $table->string('num_seguridad_social', 20)->nullable();
    });
}
public function down()
{
    Schema::table('preinscritos_sepe', function (Blueprint $table) {
        $table->dropColumn('num_seguridad_social');
    });
}

};
</file>

<file path="database/migrations/2025_06_04_170305_add_sexo_to_preinscritos_sepe_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
{
    Schema::table('preinscritos_sepe', function (Blueprint $table) {
        $table->string('sexo', 20)->nullable();
    });
}

public function down()
{
    Schema::table('preinscritos_sepe', function (Blueprint $table) {
        $table->dropColumn('sexo');
    });
}

};
</file>

<file path="database/migrations/2025_06_15_193251_create_time_slots_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('time_slots', function (Blueprint $table) {
            // Clave primaria
            $table->id();
        
            // Día de la semana (0 = domingo, 6 = sábado)
            $table->tinyInteger('weekday');
        
            // Hora de inicio y de fin
            $table->time('start_time');
            $table->time('end_time');
        
            // Aula en la que se imparte la clase
            $table->string('room', 50);
        
            // Marcas de tiempo (created_at, updated_at)
            $table->timestamps();
        
            // Índice compuesto para búsquedas rápidas por día, hora y aula
            $table->index(['weekday', 'start_time', 'room']);
        });
        
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('time_slots');
    }
};
</file>

<file path="database/migrations/2025_06_15_193659_create_schedules_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('schedules', function (Blueprint $table) {
            $table->id();
            
            // Relación con el curso
            $table->foreignId('curso_id')
                  ->constrained('cursos')
                  ->onDelete('cascade');
            
            // Columnas para los detalles del horario
            $table->tinyInteger('dia_semana'); // 1=Lunes, 2=Martes...
            $table->time('hora_inicio');
            $table->time('hora_fin');
            $table->string('aula')->nullable();
            
            // Relación opcional con un profesor específico para esta franja
            $table->foreignId('profesor_id')
                  ->nullable()
                  ->constrained('profesores')
                  ->onDelete('set null');
            
            // Timestamps (created_at y updated_at)
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('schedules');
    }
};
</file>

<file path="database/seeders/AlumnoCursoSeeder.php">
<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Alumno;
use App\Models\Curso;
use App\Models\AlumnoCurso;
use Illuminate\Support\Facades\DB; // Para consultas eficientes
use Carbon\Carbon;                 // Para manipulación de fechas

class AlumnoCursoSeeder extends Seeder
{
    /**
     * Ejecuta los seeds para la tabla alumno_curso.
     * Intenta asignar cursos a alumnos de forma aleatoria,
     * respetando las plazas máximas y evitando duplicados.
     */
    public function run(): void
    {
        $this->command->info("----------------------------------------");
        $this->command->info("Iniciando Seeder: Asignando cursos a alumnos...");
        $this->command->info("----------------------------------------");

        // 1. Obtener los IDs de los alumnos existentes
        $alumnosIds = Alumno::pluck('id');

        // 2. Obtener los cursos existentes con los datos necesarios
        // Usamos all() para asegurar que tenemos los objetos completos, luego indexamos por ID.
        $cursos = Curso::all()->keyBy('id');

        // 3. Verificar si hay datos suficientes para continuar
        if ($alumnosIds->isEmpty() || $cursos->isEmpty()) {
            $this->command->warn("-> No se pueden crear inscripciones. Asegúrate de que existen alumnos y cursos creados por los seeders anteriores.");
            return;
        }
        $this->command->line("-> Encontrados " . $alumnosIds->count() . " alumnos y " . $cursos->count() . " cursos.");

        // 4. Preparar datos para validaciones y batch insert
        // Array para guardar las nuevas inscripciones a insertar
        $inscripcionesACrear = [];

        // Mapa para buscar rápidamente inscripciones existentes (evitar violación UNIQUE)
        // Clave: "alumnoId-cursoId", Valor: true
        $inscripcionesExistentesMap = AlumnoCurso::select('alumno_id', 'curso_id')->get()->mapWithKeys(function ($item) {
            return [$item->alumno_id . '-' . $item->curso_id => true];
        });
        $this->command->line("-> Encontradas " . $inscripcionesExistentesMap->count() . " inscripciones previas (si se ejecuta sin migrate:fresh).");


        // Mapa para llevar la cuenta de inscritos actuales por curso (respetar plazas máximas)
        // Clave: curso_id, Valor: numero_de_inscritos_o_pendientes
        $cursosConInscritosMap = AlumnoCurso::select('curso_id', DB::raw('count(*) as total'))
                                        ->whereIn('estado', ['Inscrito', 'Pendiente']) // Solo contar los que ocupan plaza activa
                                        ->groupBy('curso_id')
                                        ->pluck('total', 'curso_id');

        // 5. Definir parámetros para el proceso de asignación
        $inscripcionesCreadasContador = 0;
        $maxInscripcionesPorAlumno = 3; // Límite de cuántos cursos intentaremos asignar a cada alumno

        $this->command->info("-> Intentando asignar hasta $maxInscripcionesPorAlumno cursos por alumno...");

        // 6. Iterar sobre cada alumno para intentar asignarle cursos
        foreach ($alumnosIds as $alumnoId) {
            $cursosAsignadosAEsteAlumno = 0;
            // Barajar los cursos disponibles para variar las asignaciones
            $cursosDisponibles = $cursos->shuffle();

            // Iterar sobre los cursos barajados para este alumno
            foreach ($cursosDisponibles as $cursoId => $curso) {

                // Si ya hemos asignado el máximo permitido a este alumno, pasamos al siguiente
                if ($cursosAsignadosAEsteAlumno >= $maxInscripcionesPorAlumno) {
                    break; // Salir del bucle de cursos para este alumno
                }

                // --- Controles de Seguridad y Lógica de Negocio ---

                // a) Control EXPLÍCITO contra IDs de curso inválidos (<= 0)
                if (!is_numeric($cursoId) || $cursoId <= 0) {
                     $this->command->error("-> ¡Saltando! Detectado curso_id inválido o no numérico: [" . $cursoId . "] para Alumno ID: [$alumnoId]. Revisar lógica de obtención de cursos.");
                     continue; // Pasar al siguiente curso
                }

                // b) Construir clave única para verificar duplicados
                $claveUnica = $alumnoId . '-' . $cursoId;
                if ($inscripcionesExistentesMap->has($claveUnica)) {
                    // $this->command->line("-> Saltando: Alumno [$alumnoId] ya tiene registro para Curso [$cursoId]."); // Descomentar para debug detallado
                    continue; // Ya existe, probar siguiente curso
                }

                // c) Verificar plazas disponibles
                $inscritosActuales = $cursosConInscritosMap->get($cursoId, 0); // Obtener inscritos actuales, 0 si no hay
                if ($inscritosActuales >= $curso->plazas_maximas) {
                    // $this->command->line("-> Saltando: Curso [$cursoId] lleno (Plazas: {$curso->plazas_maximas}, Inscritos: {$inscritosActuales})."); // Descomentar para debug detallado
                    continue; // Curso lleno, probar siguiente curso
                }

                // --- Preparación de Datos para la Nueva Inscripción ---

                // d) Generar estado y nota aleatorios
                $estado = fake()->randomElement(['Inscrito', 'Completado', 'Pendiente']);
                $nota = ($estado === 'Completado') ? fake()->randomFloat(2, 4, 10) : null;

                // e) Generar fecha de inscripción válida usando Carbon
                try {
                    $fechaInicioCursoObj = Carbon::parse($curso->fecha_inicio);
                    $fechaFinCursoObj = Carbon::parse($curso->fecha_fin);

                    $inicioRangoInscripcion = $fechaInicioCursoObj->copy()->subMonth(); // Restar un mes de forma segura

                    // Asegurar que el rango sea válido
                    if ($inicioRangoInscripcion->greaterThan($fechaFinCursoObj)) {
                        $inicioRangoInscripcion = $fechaInicioCursoObj;
                    }

                    $fechaInscripcion = fake()->dateTimeBetween(
                        $inicioRangoInscripcion,
                        $fechaFinCursoObj
                    )->format('Y-m-d');
                } catch (\Exception $e) {
                    // Capturar posible error de parseo de fecha si los datos son incorrectos
                    $this->command->error("-> Error al procesar fechas para Curso ID [$cursoId]: " . $e->getMessage());
                    $fechaInscripcion = now()->format('Y-m-d'); // Usar fecha actual como fallback
                }


                // f) Añadir la nueva inscripción al array para el batch insert
                $inscripcionesACrear[] = [
                    'alumno_id' => $alumnoId,
                    'curso_id' => $cursoId,          // Usar el ID del curso actual
                    'fecha_inscripcion' => $fechaInscripcion,
                    'nota' => $nota,
                    'estado' => $estado,
                    'created_at' => now(),        // Necesario para ::insert()
                    'updated_at' => now(),        // Necesario para ::insert()
                ];

                // --- Actualizar contadores internos para las siguientes iteraciones ---
                $inscripcionesExistentesMap->put($claveUnica, true);        // Marcar como "existente" para este run
                $cursosConInscritosMap->put($cursoId, $inscritosActuales + 1); // Incrementar contador de inscritos para este curso
                $cursosAsignadosAEsteAlumno++;                             // Incrementar contador para este alumno
                $inscripcionesCreadasContador++;                           // Incrementar contador global

            } // Fin loop interno (cursos)
        } // Fin loop externo (alumnos)

        // 7. Realizar la inserción masiva si hay inscripciones para crear
        if (!empty($inscripcionesACrear)) {
            $this->command->info("-> Preparando inserción de [$inscripcionesCreadasContador] nuevas inscripciones...");
            // Usar insert() para alto rendimiento en inserciones masivas
            AlumnoCurso::insert($inscripcionesACrear);
            $this->command->info("-> ¡Inserción completada!");
        } else {
            $this->command->info("-> No se crearon nuevas inscripciones (posiblemente ya existían o cursos llenos).");
        }

        $this->command->info("----------------------------------------");
        $this->command->info("Seeder AlumnoCursoSeeder finalizado.");
        $this->command->info("----------------------------------------");
    }
}
</file>

<file path="database/seeders/AlumnoSeeder.php">
<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Alumno; // Importar modelo

class AlumnoSeeder extends Seeder
{
    public function run(): void
    {
        $cantidad = 50; // Define cuántos alumnos crear
        $this->command->info("Creando $cantidad alumnos de ejemplo...");
        Alumno::factory()->count($cantidad)->create();
        $this->command->info("¡$cantidad alumnos creados!");
    }
}
</file>

<file path="database/seeders/CursoSeeder.php">
<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Curso; // Importar modelo

class CursoSeeder extends Seeder
{
    public function run(): void
    {
        $cantidad = 15; // Define cuántos cursos crear
        $this->command->info("Creando $cantidad cursos de ejemplo...");
        Curso::factory()->count($cantidad)->create();
        $this->command->info("¡$cantidad cursos creados!");
    }
}
</file>

<file path="database/seeders/DatabaseSeeder.php">
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        $this->command->info("Iniciando el proceso de Seeding...");

        // Llamamos a todos los seeders en un único array, en el orden correcto de dependencias.
        $this->call([
            // 1. Entidades base que no dependen de otras (excepto User).
            UserSeeder::class,
            ProfesorSeeder::class,
            AlumnoSeeder::class,
            PreinscritoSepeSeeder::class,

            // 2. Entidades que dependen de las anteriores.
            CursoSeeder::class,          // Depende de Profesores.

            // 3. Tablas pivote o de relación.
            AlumnoCursoSeeder::class,    // Depende de Alumnos y Cursos.

            // 4. Seeder de Horarios.
            //    Este seeder ya crea los TimeSlots que necesita, por lo que no es
            //    necesario llamar a TimeSlotSeeder por separado.
            ScheduleSeeder::class,
        ]);

        $this->command->info("¡Seeding completado con éxito!");
    }
}
</file>

<file path="database/seeders/PreinscritoSepeSeeder.php">
<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\PreinscritoSepe; // Importar modelo

class PreinscritoSepeSeeder extends Seeder
{
    public function run(): void
    {
        $cantidad = 25; // Define cuántos preinscritos crear
        $this->command->info("Creando $cantidad preinscritos de ejemplo...");
        PreinscritoSepe::factory()->count($cantidad)->create();
        $this->command->info("¡$cantidad preinscritos creados!");
    }
}
</file>

<file path="database/seeders/ProfesorSeeder.php">
<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Profesor; // Importa tu modelo Profesor

class ProfesorSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // Mensaje informativo (opcional)
        $this->command->info('Creando 12 profesores de ejemplo...');

        // Usar el Factory para crear 12 registros de Profesor
        Profesor::factory()->count(12)->create();

        $this->command->info('¡12 profesores creados!');
    }
}
</file>

<file path="database/seeders/ScheduleSeeder.php">
<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Curso;
use App\Models\Profesor;
use App\Models\Schedule;

class ScheduleSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $this->command->info('----------------------------------------');
        $this->command->info('Iniciando Seeder: Creando horarios de prueba...');
        $this->command->info('----------------------------------------');

        // Limpiamos la tabla para evitar duplicados en ejecuciones repetidas
        Schedule::truncate();

        // Obtenemos todos los cursos y profesores para no consultar en cada iteración
        $cursos = Curso::all();
        $profesores = Profesor::all();

        if ($cursos->isEmpty() || $profesores->isEmpty()) {
            $this->command->error('No se pueden crear horarios porque no hay cursos o profesores. Ejecuta los otros seeders primero.');
            return;
        }

        $dias = [1, 2, 3, 4, 5]; // Lunes a Viernes
        $horasInicio = ['09:00:00', '10:00:00', '11:00:00', '12:00:00', '16:00:00', '17:00:00'];
        $aulas = ['Aula 101', 'Aula 102', 'Laboratorio A', 'Sala de Juntas', 'Aula Virtual 1'];

        for ($i = 0; $i < 20; $i++) {
            $cursoAleatorio = $cursos->random();
            $horaInicioAleatoria = $horasInicio[array_rand($horasInicio)];
            
            Schedule::create([
                'curso_id' => $cursoAleatorio->id,
                'profesor_id' => $profesores->random()->id,
                'dia_semana' => $dias[array_rand($dias)],
                'hora_inicio' => $horaInicioAleatoria,
                'hora_fin' => date('H:i:s', strtotime($horaInicioAleatoria . ' +2 hours')), // Duración de 2 horas
                'aula' => $aulas[array_rand($aulas)],
            ]);
        }
        
        $this->command->info('¡20 franjas horarias creadas con éxito!');
        $this->command->info('----------------------------------------');
        $this->command->info('Seeder de Horarios finalizado.');
        $this->command->info('----------------------------------------');
    }
}
</file>

<file path="database/seeders/TimeSlotSeeder.php">
<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class TimeSlotSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
{
    /*
     * PROPÓSITO
     * Generar 6 días (lunes-sábado) × 8 franjas de 2 horas (09-11, 11-13…)
     * Aula fija “Aula 101” para el ejemplo.
     */

    // Array con horas de inicio
    $starts = ['09:00', '11:00', '13:00', '15:00', '17:00', '19:00', '21:00', '23:00'];

    foreach (range(1, 6) as $weekday) {               // 1 = lunes, 6 = sábado
        foreach ($starts as $start) {
            $end = \Carbon\Carbon::parse($start)->addHours(2)->format('H:i');
            \App\Models\TimeSlot::updateOrCreate(
                ['weekday' => $weekday, 'start_time' => $start, 'room' => 'Aula 101'],
                ['end_time' => $end]
            );
        }
    }
}

}
</file>

<file path="database/seeders/UserSeeder.php">
<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\User; // Importar User
use Illuminate\Support\Facades\Hash; // Importar Hash

class UserSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $this->command->info('Creando/verificando usuario administrador...');

        User::firstOrCreate(
            ['email' => 'admin@admin.com'], // El email que quieres
            [
                'name' => 'Admin Principal', // El nombre que quieres
                'password' => Hash::make('admin'), // La contraseña que quieres (hasheada)
                'email_verified_at' => now() // Marcar como verificado
            ]
        );

        $this->command->info('Usuario admin@admin.com procesado.');

        // Opcional: Crear otros usuarios de prueba con factory
        // User::factory()->count(10)->create();
    }
}
</file>

<file path="database/.gitignore">
*.sqlite*
</file>

<file path="public/.htaccess">
<IfModule mod_rewrite.c>
    <IfModule mod_negotiation.c>
        Options -MultiViews -Indexes
    </IfModule>

    RewriteEngine On

    # Handle Authorization Header
    RewriteCond %{HTTP:Authorization} .
    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

    # Handle X-XSRF-Token Header
    RewriteCond %{HTTP:x-xsrf-token} .
    RewriteRule .* - [E=HTTP_X_XSRF_TOKEN:%{HTTP:X-XSRF-Token}]

    # Redirect Trailing Slashes If Not A Folder...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_URI} (.+)/$
    RewriteRule ^ %1 [L,R=301]

    # Send Requests To Front Controller...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.php [L]
</IfModule>
</file>

<file path="public/index.php">
<?php

use Illuminate\Foundation\Application;
use Illuminate\Http\Request;

// die('SI VES ESTE MENSAJE, EL VOLUMEN DE DOCKER FUNCIONA.');


define('LARAVEL_START', microtime(true));

// Determine if the application is in maintenance mode...
if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) {
    require $maintenance;
}

// Register the Composer autoloader...
require __DIR__.'/../vendor/autoload.php';

// Bootstrap Laravel and handle the request...
/** @var Application $app */
$app = require_once __DIR__.'/../bootstrap/app.php';

$app->handleRequest(Request::capture());
</file>

<file path="public/robots.txt">
User-agent: *
Disallow:
</file>

<file path="resources/css/admin.css">
body {
            background-color: #f4f7f6; /* Un gris muy claro, similar al de la imagen */
            font-family: 'Figtree', sans-serif;
            overflow-x: hidden; /* Evitar scroll horizontal innecesario */
        }
        .admin-layout-wrapper { /* Nuevo div contenedor */
            display: flex;
            min-height: 100vh;
        }
        .sidebar {
            width: 260px; /* Ancho de la sidebar de referencia */
            background-color: #ffffff; /* Fondo blanco */
            border-right: 1px solid #e5e7eb; /* Borde sutil (Tailwind gray-200) */
            display: flex;
            flex-direction: column;
        }
        .sidebar-header {
            padding: 1.5rem 1.25rem; /* py-6 px-5 */
            border-bottom: 1px solid #e5e7eb;
        }
        .sidebar-header .app-name {
            font-size: 1.125rem; /* text-lg */
            font-weight: 600; /* font-semibold */
            color: #1f2937; /* Tailwind gray-800 */
        }
        .sidebar-header .app-subtitle {
            font-size: 0.75rem; /* text-xs */
            color: #6b7280; /* Tailwind gray-500 */
        }
        .sidebar-nav {
            flex-grow: 1;
            padding-top: 1rem; /* pt-4 */
            overflow-y: auto;
        }
        .sidebar-nav .nav-link {
            display: flex;
            align-items: center;
            padding: 0.75rem 1.25rem; /* py-3 px-5 */
            font-size: 0.875rem; /* text-sm */
            font-weight: 500; /* font-medium */
            color: #4b5563; /* Tailwind gray-600 */
            border-radius: 0.375rem; /* rounded-md */
            margin: 0 0.75rem 0.25rem 0.75rem; /* mx-3 mb-1 */
            transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out;
        }
        .sidebar-nav .nav-link:hover {
            background-color: #f3f4f6; /* Tailwind gray-100 */
            color: #1f2937; /* Tailwind gray-800 */
        }
        .sidebar-nav .nav-link.active {
            background-color: #e0e7ff; /* Tailwind indigo-100 (un azul claro) */
            color: #4338ca; /* Tailwind indigo-700 */
            font-weight: 600; /* font-semibold */
        }
        .sidebar-nav .nav-link .bi {
            margin-right: 0.75rem; /* mr-3 */
            font-size: 1.125rem; /* text-lg */
            width: 20px; /* Para alinear bien */
            text-align: center;
        }
        .main-content {
            flex-grow: 1;
            padding: 1.5rem; /* p-6 */
            /* margin-left ya no es necesario con flexbox en el wrapper */
        }
        .content-header {
           background-color: #ffffff; /* Fondo blanco para el header */
           padding: 1rem 1.5rem; /* py-4 px-6 */
           border-radius: 0.5rem; /* rounded-lg */
           box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1); /* shadow-md */
           margin-bottom: 1.5rem; /* mb-6 */
           display: flex;
           justify-content: space-between;
           align-items: center;
        }

        /* Ajustes para responsive (ocultar sidebar en móvil, etc.) */
        @media (max-width: 767.98px) {
            .admin-layout-wrapper {
                flex-direction: column;
            }
            .sidebar {
                 width: 100%;
                 min-height: auto;
                 position: relative;
                 border-right: none;
                 border-bottom: 1px solid #e5e7eb;
            }
             .main-content {
                /* No se necesita margin-left: 0; aquí */
            }
            /* Podrías añadir un botón para mostrar/ocultar la sidebar en móvil */
        }

        /* resources/css/app.css o admin.css */
.form-input {
    @apply w-full px-4 py-2.5 border border-gray-300 rounded-lg shadow-sm transition-colors focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500;
}
.form-select {
    @apply w-full px-4 py-2.5 border border-gray-300 rounded-lg shadow-sm transition-colors focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 appearance-none;
}
.form-input-error {
    @apply border-red-500 focus:ring-red-500 focus:border-red-500;
}
/* ... otras clases de botones si no las tienes globales ... */
.btn-indigo-tailwind {
    @apply px-6 py-2.5 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-lg shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors;
}
.btn-secondary-tailwind {
    @apply px-6 py-2.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors;
}
</file>

<file path="resources/css/app.css">
/* resources/css/app.css */

/* Importar estilos personalizados ANTES de Tailwind */
/* Aunque parezca contraintuitivo, Tailwind podrá sobrescribir esto si es necesario */
/* debido a la especificidad o a las capas (@layer) si se usan. */
@import "dashboard-admin.css"; /* <-- AÑADE ESTA LÍNEA */
/* @import "welcome.css"; */

/* Directivas de Tailwind */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Aquí puedes añadir más CSS personalizado si quieres */
/* Asegurar que el body y html ocupen todo el alto */
html, body {
    height: 100%;
    margin: 0;
    padding: 0;
}

/* Centrar verticalmente el contenido */
.min-h-screen {
    min-height: 100vh;
}
</file>

<file path="resources/css/dashboard-admin.css">
/* Sidebar */
#sidebarMenu {
    min-height: 100vh;
    border-right: 1px solid #e9ecef;
}
#sidebarMenu .nav-link {
    color: #495057;
    font-weight: 500;
    border-radius: 0 2rem 2rem 0;
    transition: background 0.2s, color 0.2s;
}
#sidebarMenu .nav-link.active,
#sidebarMenu .nav-link:hover {
    background: #e9f5ee;
    color: #198754;
}
#sidebarMenu .nav-link i {
    font-size: 1.2rem;
}

/* Estilos generales para las tarjetas del dashboard */
/*.card {
    border-radius: 1rem;
    border: none;  
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.05);  
}*/

/*.card-header {
    border-bottom: 1px solid #f1f1f1;
    background: #fff;
    font-weight: 600; 
    padding: 0.75rem 1.25rem;  
}*/

/* Estilos para las tarjetas de resumen (KPIs) */
.d-flex i {
    /* Asegurar que los iconos tengan un tamaño consistente si Bootstrap no lo hace */
    /* font-size: 2rem; */ /* Ya tienes fs-2, esto es un ejemplo si necesitaras override */
    line-height: 1; /* Mejor alineación vertical */
}
.card-title {
    font-size: 0.9rem; /* Título de tarjeta un poco más pequeño */
    color: #6c757d; /* Color grisáceo */
}
.fs-4.fw-bold {
    color: #343a40; /* Color oscuro para el número */
}

/* Estilos para los contenedores de gráficos */
#asistenciaChart, #generoChart {
    max-height: 280px; /* Limitar altura máxima de los gráficos */
}
</file>

<file path="resources/css/login.css">
body, html {
            margin: 0;
            padding: 0;
            overflow: hidden;
        }
        
        #particles-js {
            position: absolute;
            width: 100%;
            height: 100%;
            background-color: #000;
            z-index: -1;
        }
        
        .form-container {
            background-color: rgba(15, 23, 42, 0.6);
            backdrop-filter: blur(8px);
            border: 1px solid rgba(0, 225, 255, 0.2);
            box-shadow: 0 8px 32px rgba(0, 225, 255, 0.1);
            clip-path: polygon(
                0 5px, 5px 0, 
                calc(100% - 5px) 0, 100% 5px, 
                100% calc(100% - 5px), calc(100% - 5px) 100%, 
                5px 100%, 0 calc(100% - 5px)
            );
        }
        
        .input-group {
            position: relative;
        }
        
        .input-icon {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: #00e1ff;
        }
        
        .input-field {
            padding-left: 40px !important;
            background-color: rgba(15, 23, 42, 0.4) !important;
            border: 1px solid rgba(0, 225, 255, 0.3) !important;
            color: #e2e8f0 !important;
            transition: all 0.3s ease;
            border-radius: 0 !important;
            clip-path: polygon(
                0 4px, 4px 0, 
                calc(100% - 4px) 0, 100% 4px, 
                100% calc(100% - 4px), calc(100% - 4px) 100%, 
                4px 100%, 0 calc(100% - 4px)
            );
        }
        
        .input-field:focus {
            background-color: rgba(15, 23, 42, 0.6) !important;
            border-color: #00e1ff !important;
            box-shadow: 0 0 8px rgba(0, 225, 255, 0.5) !important;
        }
        
        .input-label {
            color: #00e1ff !important;
            font-weight: 500;
            text-transform: uppercase;
            font-size: 0.8rem;
            letter-spacing: 1px;
        }
        
        .login-btn {
            background: linear-gradient(90deg, rgba(0, 225, 255, 0.8), rgba(0, 185, 215, 0.8)) !important;
            border: none !important;
            box-shadow: 0 0 15px rgba(0, 225, 255, 0.4) !important;
            transition: all 0.3s ease !important;
            border-radius: 0 !important;
            clip-path: polygon(
                0 4px, 4px 0, 
                calc(100% - 4px) 0, 100% 4px, 
                100% calc(100% - 4px), calc(100% - 4px) 100%, 
                4px 100%, 0 calc(100% - 4px)
            );
        }
        
        .login-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 0 20px rgba(0, 225, 255, 0.6) !important;
            background: linear-gradient(90deg, rgba(0, 225, 255, 0.9), rgba(0, 195, 225, 0.9)) !important;
        }
        
        .login-btn:active {
            transform: translateY(1px);
        }
        
        .forgot-link {
            color: #00e1ff !important;
            transition: all 0.2s ease;
            font-size: 0.85rem;
        }
        
        .forgot-link:hover {
            color: #80f0ff !important;
            text-shadow: 0 0 8px rgba(0, 225, 255, 0.6);
            text-decoration: none !important;
        }
        
        .checkbox-custom {
            accent-color: #00e1ff;
            border-radius: 0 !important;
        }
        
        .logo-image {
            width: 220px;
            height: auto;
            object-fit: contain;
            filter: drop-shadow(0 0 12px rgba(0, 225, 255, 0.6));
        }
        
        .content-wrapper {
            position: relative;
            z-index: 10;
        }
        
        .footer-icons a {
            color: rgba(0, 225, 255, 0.7);
            transition: all 0.3s ease;
        }
        
        .footer-icons a:hover {
            color: #00e1ff;
            transform: translateY(-2px);
            filter: drop-shadow(0 0 8px rgba(0, 225, 255, 0.8));
        }
        
        .footer-text {
            color: rgba(0, 225, 255, 0.6);
            font-size: 0.8rem;
        }
        
        .footer-text a {
            color: rgba(0, 225, 255, 0.8);
            transition: all 0.2s ease;
        }
        
        .footer-text a:hover {
            color: #00e1ff;
            text-shadow: 0 0 8px rgba(0, 225, 255, 0.6);
        }
</file>

<file path="resources/js/app.js">
//import '@fullcalendar/core/main.css';
import '../css/admin.css'; // Ajusta la ruta si es diferente
import '../css/app.css';
import { initParticles } from './particles-config'; 
import Alpine from 'alpinejs';


window.Alpine = Alpine;

Alpine.start();
</file>

<file path="resources/js/bootstrap.js">
import axios from 'axios';
window.axios = axios;

window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

// Ejemplo: Inicializar todos los tooltips manualmente
const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))
</file>

<file path="resources/js/particles-config.js">
// Particles.js configuration
        export function initParticles() {
            if (document.getElementById('particles-js')) {
                particlesJS('particles-js', {
                    particles: {
                        number: {
                            value: 150,
                            density: {
                                enable: true,
                                value_area: 800
                            }
                        },
                        color: {
                            value: "#00e1ff"
                        },
                        shape: {
                            type: "circle",
                            stroke: {
                                width: 0,
                                color: "#000000"
                            },
                        },
                        opacity: {
                            value: 0.7,
                            random: false,
                            anim: {
                                enable: false,
                                speed: 1,
                                opacity_min: 0.1,
                                sync: false
                            }
                        },
                        size: {
                            value: 2,
                            random: true,
                            anim: {
                                enable: false,
                                speed: 40,
                                size_min: 0.1,
                                sync: false
                            }
                        },
                        line_linked: {
                            enable: true,
                            distance: 130,
                            color: "#00e1ff",
                            opacity: 0.4,
                            width: 1
                        },
                        move: {
                            enable: true,
                            speed: 0.5,
                            direction: "none",
                            random: false,
                            straight: false,
                            out_mode: "out",
                            bounce: false,
                            attract: {
                                enable: false,
                                rotateX: 600,
                                rotateY: 1200
                            }
                        }
                    },
                    interactivity: {
                        detect_on: "canvas",
                        events: {
                            onhover: {
                                enable: true,
                                mode: "grab"
                            },
                            onclick: {
                                enable: true,
                                mode: "push"
                            },
                            resize: true
                        },
                        modes: {
                            grab: {
                                distance: 200,
                                line_linked: {
                                    opacity: 1
                                }
                            },
                            push: {
                                particles_nb: 4
                            }
                        }
                    },
                    retina_detect: true
                });
            }
        }

        // Para inicializar automáticamente
        document.addEventListener('DOMContentLoaded', initParticles);
</file>

<file path="resources/js/schedules.js">
import { Calendar } from '@fullcalendar/core';
import dayGridPlugin from '@fullcalendar/daygrid';
import timeGridPlugin from '@fullcalendar/timegrid';
import rrulePlugin from '@fullcalendar/rrule';

document.addEventListener('DOMContentLoaded', function() {
    var calendarEl = document.getElementById('calendar');
    var calendar = new Calendar(calendarEl, {
        plugins: [ dayGridPlugin, timeGridPlugin, rrulePlugin ],
        initialView: 'timeGridWeek',
        locale: 'es',
        headerToolbar: {
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,timeGridDay'
        },
        firstDay: 1,
        allDaySlot: false,
        slotMinTime: "08:00:00",
        slotMaxTime: "22:00:00",
        events: '/admin/schedule/events',

        eventDidMount: function(info) {
            const titleEl = info.el.querySelector('.fc-event-title');
            if (!titleEl) return;
            let extraContent = '';
            if (info.event.extendedProps.profesor) {
                extraContent += `<div class="fc-event-profesor"><i class="bi bi-person-video3"></i> ${info.event.extendedProps.profesor}</div>`;
            }
            if (info.event.extendedProps.aula) {
                extraContent += `<div class="fc-event-aula"><i class="bi bi-geo-alt-fill"></i> ${info.event.extendedProps.aula}</div>`;
            }
            titleEl.insertAdjacentHTML('afterend', extraContent);
        },
    });
    calendar.render();
});
</file>

<file path="resources/views/admin/alumnos/create.blade.php">
@extends('layouts.admin')

@section('title', 'Añadir Nuevo Alumno')
@section('page-title', 'Añadir Nuevo Alumno')

@section('content')
<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        {{-- Header --}}
        <div class="mb-8">
            <div class="flex items-center space-x-3">
                <div class="p-3 bg-indigo-100 rounded-lg">
                    <svg class="w-8 h-8 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
                </div>
                <div>
                    <h1 class="text-3xl font-bold text-gray-900">Añadir Nuevo Alumno</h1>
                    <p class="text-gray-600 mt-1">Complete todos los campos marcados con * para registrar al alumno</p>
                </div>
            </div>
        </div>

        @if ($errors->any())
            <div class="mb-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded-md">
                <strong class="font-bold">¡Atención! Por favor, corrija los siguientes errores:</strong>
                <ul class="mt-2 list-disc list-inside text-sm">
                    @foreach ($errors->all() as $error)
                        <li>{{ $error }}</li>
                    @endforeach
                </ul>
            </div>
        @endif

        <form method="POST" action="{{ route('admin.alumnos.store') }}" class="space-y-8">
            @csrf

            {{-- Información Personal --}}
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
                <div class="bg-gradient-to-r from-blue-50 to-indigo-50 px-6 py-4 border-b border-gray-200">
                    <div class="flex items-center space-x-3">
                        <div class="p-2 bg-blue-100 rounded-lg">
                            <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path></svg>
                        </div>
                        <h2 class="text-lg font-semibold text-gray-900">Información Personal</h2>
                    </div>
                </div>
                
                <div class="p-6 space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div class="space-y-1">
                            <label for="nombre" class="block text-sm font-medium text-gray-700">Nombre <span class="text-red-500">*</span></label>
                            <input type="text" name="nombre" id="nombre" value="{{ old('nombre') }}" required class="w-full px-4 py-2 border {{ $errors->has('nombre') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors" placeholder="Ingrese el nombre">
                            @error('nombre') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="apellido1" class="block text-sm font-medium text-gray-700">Primer Apellido <span class="text-red-500">*</span></label>
                            <input type="text" name="apellido1" id="apellido1" value="{{ old('apellido1') }}" required class="w-full px-4 py-2 border {{ $errors->has('apellido1') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors" placeholder="Primer apellido">
                            @error('apellido1') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="apellido2" class="block text-sm font-medium text-gray-700">Segundo Apellido</label>
                            <input type="text" name="apellido2" id="apellido2" value="{{ old('apellido2') }}" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors" placeholder="Segundo apellido (opcional)">
                            @error('apellido2') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div class="space-y-1">
                            <label for="dni" class="block text-sm font-medium text-gray-700">DNI/NIE <span class="text-red-500">*</span></label>
                            <input type="text" name="dni" id="dni" value="{{ old('dni') }}" required class="w-full px-4 py-2 border {{ $errors->has('dni') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors" placeholder="12345678A">
                            @error('dni') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="email" class="block text-sm font-medium text-gray-700">Email <span class="text-red-500">*</span></label>
                            <input type="email" name="email" id="email" value="{{ old('email') }}" required class="w-full px-4 py-2 border {{ $errors->has('email') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors" placeholder="ejemplo@correo.com">
                            @error('email') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="sexo" class="block text-sm font-medium text-gray-700">Sexo <span class="text-red-500">*</span></label>
                            <select name="sexo" id="sexo" required class="w-full px-4 py-2 border {{ $errors->has('sexo') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors">
                                <option value="" disabled {{ old('sexo') ? '' : 'selected' }}>Seleccionar...</option>
                                <option value="Hombre" {{ old('sexo') == 'Hombre' ? 'selected' : '' }}>Hombre</option>
                                <option value="Mujer" {{ old('sexo') == 'Mujer' ? 'selected' : '' }}>Mujer</option>
                                <option value="Otro" {{ old('sexo') == 'Otro' ? 'selected' : '' }}>Otro</option>
                            </select>
                            @error('sexo') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div class="space-y-1">
                            <label for="fecha_nacimiento" class="block text-sm font-medium text-gray-700">Fecha de Nacimiento <span class="text-red-500">*</span></label>
                            <input type="date" name="fecha_nacimiento" id="fecha_nacimiento" value="{{ old('fecha_nacimiento') }}" required class="w-full px-4 py-2 border {{ $errors->has('fecha_nacimiento') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors">
                            @error('fecha_nacimiento') <p class="text-red-500 text-sm">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="nacionalidad" class="block text-sm font-medium text-gray-700">Nacionalidad <span class="text-red-500">*</span></label>
                            <input type="text" name="nacionalidad" id="nacionalidad" value="{{ old('nacionalidad', 'Española') }}" required class="w-full px-4 py-2 border {{ $errors->has('nacionalidad') ? 'border-red-300 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors" placeholder="Española">
                            @error('nacionalidad') <p class="text-red-500 text-sm">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="num_seguridad_social" class="block text-sm font-medium text-gray-700">Número Seguridad Social <span class="text-red-500">*</span></label>
                            <input type="text" name="num_seguridad_social" id="num_seguridad_social" value="{{ old('num_seguridad_social') }}" required class="w-full px-4 py-2 border {{ $errors->has('num_seguridad_social') ? 'border-red-300 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors" placeholder="12/34567890/12">
                            @error('num_seguridad_social') <p class="text-red-500 text-sm">{{ $message }}</p> @enderror
                        </div>
                    </div>
                </div>
            </div>

            {{-- Información de Contacto --}}
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
                <div class="bg-gradient-to-r from-green-50 to-emerald-50 px-6 py-4 border-b border-gray-200">
                    <div class="flex items-center space-x-3">
                        <div class="p-2 bg-green-100 rounded-lg">
                            <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>
                        </div>
                        <h2 class="text-lg font-semibold text-gray-900">Información de Contacto</h2>
                    </div>
                </div>
                
                <div class="p-6 space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="space-y-1">
                            <label for="direccion" class="block text-sm font-medium text-gray-700">Dirección Completa <span class="text-red-500">*</span></label>
                            <textarea name="direccion" id="direccion" rows="3" required class="w-full px-4 py-2 border {{ $errors->has('direccion') ? 'border-red-300 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors resize-none" placeholder="Calle, número, piso, puerta...">{{ old('direccion') }}</textarea>
                            @error('direccion') <p class="text-red-500 text-sm">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="telefono" class="block text-sm font-medium text-gray-700">Teléfono <span class="text-red-500">*</span></label>
                            <input type="tel" name="telefono" id="telefono" value="{{ old('telefono') }}" required class="w-full px-4 py-2 border {{ $errors->has('telefono') ? 'border-red-300 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors" placeholder="600123456">
                            @error('telefono') <p class="text-red-500 text-sm">{{ $message }}</p> @enderror
                        </div>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div class="space-y-1">
                            <label for="cp" class="block text-sm font-medium text-gray-700">Código Postal <span class="text-red-500">*</span></label>
                            <input type="text" name="cp" id="cp" value="{{ old('cp') }}" required class="w-full px-4 py-2 border {{ $errors->has('cp') ? 'border-red-300 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors" placeholder="28001">
                            @error('cp') <p class="text-red-500 text-sm">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="localidad" class="block text-sm font-medium text-gray-700">Localidad <span class="text-red-500">*</span></label>
                            <input type="text" name="localidad" id="localidad" value="{{ old('localidad') }}" required class="w-full px-4 py-2 border {{ $errors->has('localidad') ? 'border-red-300 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors" placeholder="Madrid">
                            @error('localidad') <p class="text-red-500 text-sm">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="provincia" class="block text-sm font-medium text-gray-700">Provincia <span class="text-red-500">*</span></label>
                            <input type="text" name="provincia" id="provincia" value="{{ old('provincia') }}" required class="w-full px-4 py-2 border {{ $errors->has('provincia') ? 'border-red-300 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors" placeholder="Madrid">
                            @error('provincia') <p class="text-red-500 text-sm">{{ $message }}</p> @enderror
                        </div>
                    </div>
                </div>
            </div>

            {{-- Información Académica y Laboral --}}
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
                <div class="bg-gradient-to-r from-purple-50 to-pink-50 px-6 py-4 border-b border-gray-200">
                    <div class="flex items-center space-x-3">
                        <div class="p-2 bg-purple-100 rounded-lg">
                            <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path></svg>
                        </div>
                        <h2 class="text-lg font-semibold text-gray-900">Información Académica y Laboral</h2>
                    </div>
                </div>
                
                <div class="p-6 space-y-6">
                    {{-- El select 'nivel_formativo' y 'estado' se mantienen aquí, una sola vez --}}
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div class="space-y-1">
                            <label for="nivel_formativo" class="block text-sm font-medium text-gray-700">Nivel Formativo <span class="text-red-500">*</span></label>
                            <select name="nivel_formativo" id="nivel_formativo" required class="w-full px-4 py-2 border {{ $errors->has('nivel_formativo') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors">
                                <option value="" disabled {{ old('nivel_formativo') ? '' : 'selected' }}>Selecciona un nivel...</option>
                                <option value="Sin estudios" {{ old('nivel_formativo') == 'Sin estudios' ? 'selected' : '' }}>Sin estudios</option>
                                <option value="ESO" {{ old('nivel_formativo') == 'ESO' ? 'selected' : '' }}>ESO</option>
                                <option value="Bachillerato" {{ old('nivel_formativo') == 'Bachillerato' ? 'selected' : '' }}>Bachillerato</option>
                                <option value="Grado Medio" {{ old('nivel_formativo') == 'Grado Medio' ? 'selected' : '' }}>Grado Medio</option>
                                <option value="Grado Superior" {{ old('nivel_formativo') == 'Grado Superior' ? 'selected' : '' }}>Grado Superior</option>
                                <option value="Grado Universitario" {{ old('nivel_formativo') == 'Grado Universitario' ? 'selected' : '' }}>Grado Universitario</option>
                                <option value="Máster" {{ old('nivel_formativo') == 'Máster' ? 'selected' : '' }}>Máster</option>
                                <option value="Doctorado" {{ old('nivel_formativo') == 'Doctorado' ? 'selected' : '' }}>Doctorado</option>
                            </select>
                            @error('nivel_formativo') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>

                        <div class="space-y-1">
                            <label for="situacion_laboral" class="block text-sm font-medium text-gray-700">Situación Laboral <span class="text-red-500">*</span></label>
                            <select name="situacion_laboral" id="situacion_laboral" required class="w-full px-4 py-2 border {{ $errors->has('situacion_laboral') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors">
                                <option value="" disabled {{ old('situacion_laboral') ? '' : 'selected' }}>Seleccionar...</option>
                                <option value="Empleado a tiempo completo" {{ old('situacion_laboral') == 'Empleado a tiempo completo' ? 'selected' : '' }}>Empleado a tiempo completo</option>
                                <option value="Empleado a tiempo parcial" {{ old('situacion_laboral') == 'Empleado a tiempo parcial' ? 'selected' : '' }}>Empleado a tiempo parcial</option>
                                <option value="Desempleado" {{ old('situacion_laboral') == 'Desempleado' ? 'selected' : '' }}>Desempleado</option>
                                <option value="Estudiante" {{ old('situacion_laboral') == 'Estudiante' ? 'selected' : '' }}>Estudiante</option>
                                <option value="Jubilado" {{ old('situacion_laboral') == 'Jubilado' ? 'selected' : '' }}>Jubilado</option>
                                <option value="Autónomo" {{ old('situacion_laboral') == 'Autónomo' ? 'selected' : '' }}>Autónomo</option>
                            </select>
                            @error('situacion_laboral') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>

                        <div class="space-y-1">
                            <label for="estado" class="block text-sm font-medium text-gray-700">Estado <span class="text-red-500">*</span></label>
                            <select name="estado" id="estado" required class="w-full px-4 py-2 border {{ $errors->has('estado') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors">
                                <option value="" disabled {{ old('estado') ? '' : 'selected' }}>Seleccionar...</option>
                                <option value="Activo" {{ old('estado') == 'Activo' ? 'selected' : '' }}>Activo</option>
                                <option value="Inactivo" {{ old('estado') == 'Inactivo' ? 'selected' : '' }}>Inactivo</option>
                                <option value="Pendiente" {{ old('estado') == 'Pendiente' ? 'selected' : '' }}>Pendiente</option>
                                <option value="Baja" {{ old('estado') == 'Baja' ? 'selected' : '' }}>Baja</option>
                            </select>
                            @error('estado') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                    </div>
                </div>
            </div>

            {{-- Botones de Acción --}}
            <div class="flex flex-col sm:flex-row justify-end gap-4 pt-6">
                <a href="{{ route('admin.alumnos.index') }}" class="px-6 py-3 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors">
                    <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                    Cancelar
                </a>
                <button type="submit" class="px-6 py-3 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-lg shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors">
                    <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>
                    Guardar Alumno
                </button>
            </div>
        </form>
    </div>
</div>
@endsection

@push('scripts')
<script>
document.addEventListener('DOMContentLoaded', function() {
    const dniInput = document.getElementById('dni');
    if (dniInput) {
        dniInput.addEventListener('input', function() {
            let value = this.value.toUpperCase().replace(/[^A-Z0-9]/g, '').substring(0, 9);
            this.value = value;
            // Validación básica de formato (ya no es estrictamente necesaria si la validación backend es robusta, pero ayuda al UX)
            // const dniRegex = /^[0-9]{8}[A-Z]$/;
            // const nieRegex = /^[XYZ][0-9]{7}[A-Z]$/;
            // if (value && !dniRegex.test(value) && !nieRegex.test(value)) {
            //     this.classList.add('border-red-500', 'focus:ring-red-500', 'focus:border-red-500');
            //     this.classList.remove('border-gray-300', 'focus:ring-indigo-500', 'focus:border-indigo-500');
            // } else {
            //     this.classList.remove('border-red-300', 'focus:ring-red-500', 'focus:border-red-500');
            //     this.classList.add('border-gray-300', 'focus:ring-indigo-500', 'focus:border-indigo-500');
            // }
        });
    }

    const nssInput = document.getElementById('num_seguridad_social');
    if (nssInput) {
        nssInput.addEventListener('input', function() {
            let value = this.value.replace(/\D/g, '');
            let formattedValue = '';
            if (value.length > 0) {
                formattedValue = value.substring(0, 2);
                if (value.length > 2) {
                    formattedValue += '/' + value.substring(2, 10);
                    if (value.length > 10) {
                        formattedValue += '/' + value.substring(10, 12);
                    }
                }
            }
            this.value = formattedValue.substring(0, 15);
        });
    }

    const cpInput = document.getElementById('codigo_postal');
    if (cpInput) {
        cpInput.addEventListener('input', function() {
            this.value = this.value.replace(/\D/g, '').substring(0, 5);
        });
    }

    const telefonoInput = document.getElementById('telefono');
    if (telefonoInput) {
        telefonoInput.addEventListener('input', function() {
            this.value = this.value.replace(/\D/g, '').substring(0, 9);
        });
    }
});
</script>
@endpush
</file>

<file path="resources/views/admin/alumnos/edit.blade.php">
@extends('layouts.admin')

@section('title', 'Editar Alumno: ' . $alumno->nombre . ' ' . $alumno->apellido1)
@section('page-title', 'Editar Alumno')

@section('content')
<div class="min-h-screen bg-gray-50 py-8"> {{-- Coincidir con create.blade.php --}}
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        {{-- Header --}}
        <div class="mb-8">
            <div class="flex items-center space-x-3">
                <div class="p-3 bg-indigo-100 rounded-lg">
                    <svg class="w-8 h-8 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
                </div>
                <div>
                    {{-- El título ya se maneja por @section('page-title') en el layout --}}
                    {{-- <h1 class="text-3xl font-bold text-gray-900">Editar Alumno</h1> --}}
                    <p class="text-gray-600 mt-1">Modifique los campos necesarios y guarde los cambios.</p>
                </div>
            </div>
        </div>

        {{-- Mostrar Errores de Validación Generales (Opcional) --}}
        @if ($errors->any())
            <div class="mb-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded-md">
                <strong class="font-bold">¡Atención!</strong>
                <ul class="mt-2 list-disc list-inside text-sm">
                    @foreach ($errors->all() as $error)
                        <li>{{ $error }}</li>
                    @endforeach
                </ul>
            </div>
        @endif

        <form method="POST" action="{{ route('admin.alumnos.update', $alumno->id) }}" class="space-y-8">
            @csrf
            @method('PUT')

            {{-- Información Personal --}}
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
                <div class="bg-gradient-to-r from-blue-50 to-indigo-50 px-6 py-4 border-b border-gray-200">
                    <div class="flex items-center space-x-3">
                        <div class="p-2 bg-blue-100 rounded-lg">
                            <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path></svg>
                        </div>
                        <h2 class="text-lg font-semibold text-gray-900">Información Personal</h2>
                    </div>
                </div>
                
                <div class="p-6 space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div class="space-y-2">
                            <label for="nombre" class="block text-sm font-medium text-gray-700">Nombre <span class="text-red-500">*</span></label>
                            <input type="text" name="nombre" id="nombre" value="{{ old('nombre', $alumno->nombre) }}" required
                                   class="w-full px-4 py-3 border {{ $errors->has('nombre') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors">
                            @error('nombre') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-2">
                            <label for="apellido1" class="block text-sm font-medium text-gray-700">Primer Apellido <span class="text-red-500">*</span></label>
                            <input type="text" name="apellido1" id="apellido1" value="{{ old('apellido1', $alumno->apellido1) }}" required
                                   class="w-full px-4 py-3 border {{ $errors->has('apellido1') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors">
                            @error('apellido1') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-2">
                            <label for="apellido2" class="block text-sm font-medium text-gray-700">Segundo Apellido</label>
                            <input type="text" name="apellido2" id="apellido2" value="{{ old('apellido2', $alumno->apellido2) }}"
                                   class="w-full px-4 py-3 border {{ $errors->has('apellido2') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors">
                            @error('apellido2') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div class="space-y-2">
                            <label for="dni" class="block text-sm font-medium text-gray-700">DNI/NIE <span class="text-red-500">*</span></label>
                            <input type="text" name="dni" id="dni" value="{{ old('dni', $alumno->dni) }}" required
                                   class="w-full px-4 py-3 border {{ $errors->has('dni') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors">
                            @error('dni') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-2">
                            <label for="email" class="block text-sm font-medium text-gray-700">Email <span class="text-red-500">*</span></label>
                            <input type="email" name="email" id="email" value="{{ old('email', $alumno->email) }}" required
                                   class="w-full px-4 py-3 border {{ $errors->has('email') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors">
                            @error('email') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-2">
                            <label for="sexo" class="block text-sm font-medium text-gray-700">Sexo <span class="text-red-500">*</span></label>
                            <select name="sexo" id="sexo" required
                                    class="w-full px-4 py-3 border {{ $errors->has('sexo') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors">
                                <option value="" disabled>Seleccionar...</option>
                                <option value="Hombre" {{ old('sexo', $alumno->sexo) == 'Hombre' ? 'selected' : '' }}>Hombre</option>
                                <option value="Mujer" {{ old('sexo', $alumno->sexo) == 'Mujer' ? 'selected' : '' }}>Mujer</option>
                                <option value="Otro" {{ old('sexo', $alumno->sexo) == 'Otro' ? 'selected' : '' }}>Otro</option>
                            </select>
                            @error('sexo') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div class="space-y-2">
                            <label for="fecha_nacimiento" class="block text-sm font-medium text-gray-700">Fecha de Nacimiento <span class="text-red-500">*</span></label>
                            <input type="date" name="fecha_nacimiento" id="fecha_nacimiento" value="{{ old('fecha_nacimiento', $alumno->fecha_nacimiento) }}" required
                                   class="w-full px-4 py-3 border {{ $errors->has('fecha_nacimiento') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors">
                            @error('fecha_nacimiento') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-2">
                            <label for="nacionalidad" class="block text-sm font-medium text-gray-700">Nacionalidad <span class="text-red-500">*</span></label>
                            <input type="text" name="nacionalidad" id="nacionalidad" value="{{ old('nacionalidad', $alumno->nacionalidad) }}" required
                                   class="w-full px-4 py-3 border {{ $errors->has('nacionalidad') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors">
                            @error('nacionalidad') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-2">
                            <label for="num_seguridad_social" class="block text-sm font-medium text-gray-700">Número Seguridad Social <span class="text-red-500">*</span></label>
                            <input type="text" name="num_seguridad_social" id="num_seguridad_social" value="{{ old('num_seguridad_social', $alumno->num_seguridad_social) }}" required
                                   class="w-full px-4 py-3 border {{ $errors->has('num_seguridad_social') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors">
                            @error('num_seguridad_social') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                    </div>
                </div>
            </div>

            {{-- Información de Contacto --}}
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
                <div class="bg-gradient-to-r from-green-50 to-emerald-50 px-6 py-4 border-b border-gray-200">
                    {{-- ... icono y título de sección ... --}}
                    <div class="flex items-center space-x-3">
                        <div class="p-2 bg-green-100 rounded-lg">
                            <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>
                        </div>
                        <h2 class="text-lg font-semibold text-gray-900">Información de Contacto</h2>
                    </div>
                </div>
                <div class="p-6 space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="space-y-2">
                            <label for="direccion" class="block text-sm font-medium text-gray-700">Dirección Completa <span class="text-red-500">*</span></label>
                            <textarea name="direccion" id="direccion" rows="3" required
                                      class="w-full px-4 py-3 border {{ $errors->has('direccion') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors resize-none">{{ old('direccion', $alumno->direccion) }}</textarea>
                            @error('direccion') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-2">
                            <label for="telefono" class="block text-sm font-medium text-gray-700">Teléfono <span class="text-red-500">*</span></label>
                            <input type="tel" name="telefono" id="telefono" value="{{ old('telefono', $alumno->telefono) }}" required
                                   class="w-full px-4 py-3 border {{ $errors->has('telefono') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors">
                            @error('telefono') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div class="space-y-2">
                            <label for="cp" class="block text-sm font-medium text-gray-700">Código Postal <span class="text-red-500">*</span></label>
                            <input type="text" name="cp" id="cp" value="{{ old('cp', $alumno->cp) }}" required
                                   class="w-full px-4 py-3 border {{ $errors->has('cp') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors">
                            @error('cp') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-2">
                            <label for="localidad" class="block text-sm font-medium text-gray-700">Localidad <span class="text-red-500">*</span></label>
                            <input type="text" name="localidad" id="localidad" value="{{ old('localidad', $alumno->localidad) }}" required
                                   class="w-full px-4 py-3 border {{ $errors->has('localidad') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors">
                            @error('localidad') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-2">
                            <label for="provincia" class="block text-sm font-medium text-gray-700">Provincia <span class="text-red-500">*</span></label>
                            <input type="text" name="provincia" id="provincia" value="{{ old('provincia', $alumno->provincia) }}" required
                                   class="w-full px-4 py-3 border {{ $errors->has('provincia') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors">
                            @error('provincia') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                    </div>
                </div>
            </div>

            {{-- Información Académica y Laboral --}}
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
                <div class="bg-gradient-to-r from-purple-50 to-pink-50 px-6 py-4 border-b border-gray-200">
                    {{-- ... icono y título de sección ... --}}
                     <div class="flex items-center space-x-3">
                        <div class="p-2 bg-purple-100 rounded-lg">
                            <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path></svg>
                        </div>
                        <h2 class="text-lg font-semibold text-gray-900">Información Académica y Laboral</h2>
                    </div>
                </div>
                <div class="p-6 space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div class="space-y-2">
                            <label for="nivel_formativo" class="block text-sm font-medium text-gray-700">Nivel Formativo <span class="text-red-500">*</span></label>
                            <select name="nivel_formativo" id="nivel_formativo" required
                                    class="w-full px-4 py-3 border {{ $errors->has('nivel_formativo') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors">
                                {{-- (Opciones de nivel formativo) --}}
                                <option value="" disabled>Selecciona un nivel...</option>
                                <option value="Sin estudios" {{ old('nivel_formativo', $alumno->nivel_formativo) == 'Sin estudios' ? 'selected' : '' }}>Sin estudios</option>
                                <option value="ESO" {{ old('nivel_formativo', $alumno->nivel_formativo) == 'ESO' ? 'selected' : '' }}>ESO</option>
                                <option value="Bachillerato" {{ old('nivel_formativo', $alumno->nivel_formativo) == 'Bachillerato' ? 'selected' : '' }}>Bachillerato</option>
                                <option value="Grado Medio" {{ old('nivel_formativo', $alumno->nivel_formativo) == 'Grado Medio' ? 'selected' : '' }}>Grado Medio</option>
                                <option value="Grado Superior" {{ old('nivel_formativo', $alumno->nivel_formativo) == 'Grado Superior' ? 'selected' : '' }}>Grado Superior</option>
                                <option value="Grado Universitario" {{ old('nivel_formativo', $alumno->nivel_formativo) == 'Grado Universitario' ? 'selected' : '' }}>Grado Universitario</option>
                                <option value="Máster" {{ old('nivel_formativo', $alumno->nivel_formativo) == 'Máster' ? 'selected' : '' }}>Máster</option>
                                <option value="Doctorado" {{ old('nivel_formativo', $alumno->nivel_formativo) == 'Doctorado' ? 'selected' : '' }}>Doctorado</option>
                            </select>
                            @error('nivel_formativo') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-2">
                            <label for="situacion_laboral" class="block text-sm font-medium text-gray-700">Situación Laboral <span class="text-red-500">*</span></label>
                            <select name="situacion_laboral" id="situacion_laboral" required
                                    class="w-full px-4 py-3 border {{ $errors->has('situacion_laboral') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors">
                                {{-- (Opciones de situación laboral) --}}
                                <option value="" disabled>Seleccionar...</option>
                                <option value="Empleado a tiempo completo" {{ old('situacion_laboral', $alumno->situacion_laboral) == 'Empleado a tiempo completo' ? 'selected' : '' }}>Empleado a tiempo completo</option>
                                <option value="Empleado a tiempo parcial" {{ old('situacion_laboral', $alumno->situacion_laboral) == 'Empleado a tiempo parcial' ? 'selected' : '' }}>Empleado a tiempo parcial</option>
                                <option value="Desempleado" {{ old('situacion_laboral', $alumno->situacion_laboral) == 'Desempleado' ? 'selected' : '' }}>Desempleado</option>
                                <option value="Estudiante" {{ old('situacion_laboral', $alumno->situacion_laboral) == 'Estudiante' ? 'selected' : '' }}>Estudiante</option>
                                <option value="Jubilado" {{ old('situacion_laboral', $alumno->situacion_laboral) == 'Jubilado' ? 'selected' : '' }}>Jubilado</option>
                                <option value="Autónomo" {{ old('situacion_laboral', $alumno->situacion_laboral) == 'Autónomo' ? 'selected' : '' }}>Autónomo</option>
                            </select>
                            @error('situacion_laboral') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-2">
                            <label for="estado" class="block text-sm font-medium text-gray-700">Estado <span class="text-red-500">*</span></label>
                            <select name="estado" id="estado" required
                                    class="w-full px-4 py-3 border {{ $errors->has('estado') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg transition-colors">
                                {{-- (Opciones de estado) --}}
                                <option value="" disabled>Seleccionar...</option>
                                <option value="Activo" {{ old('estado', $alumno->estado) == 'Activo' ? 'selected' : '' }}>Activo</option>
                                <option value="Inactivo" {{ old('estado', $alumno->estado) == 'Inactivo' ? 'selected' : '' }}>Inactivo</option>
                                <option value="Pendiente" {{ old('estado', $alumno->estado) == 'Pendiente' ? 'selected' : '' }}>Pendiente</option>
                                <option value="Baja" {{ old('estado', $alumno->estado) == 'Baja' ? 'selected' : '' }}>Baja</option>
                            </select>
                            @error('estado') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                    </div>
                </div>
            </div>

            {{-- Botones de Acción --}}
            <div class="flex flex-col sm:flex-row justify-end gap-4 pt-6">
                <a href="{{ route('admin.alumnos.show', $alumno->id) }}"
                   class="px-6 py-3 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors">
                    <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                    Cancelar
                </a>
                <button type="submit"
                        class="px-6 py-3 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-lg shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors">
                    <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>
                    Actualizar Alumno
                </button>
            </div>
        </form>
    </div>
</div>
@endsection


@push('scripts')
<script>
    // Validación en tiempo real del email
    document.getElementById('email').addEventListener('blur', function() {
        const email = this.value;
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        
        if (email && !emailRegex.test(email)) {
            this.classList.add('border-red-500', 'focus:ring-red-500');
            this.classList.remove('border-gray-300', 'focus:ring-indigo-500');
        } else {
            this.classList.remove('border-red-500', 'focus:ring-red-500');
            this.classList.add('border-gray-300', 'focus:ring-indigo-500');
        }
    });

    // Validación del DNI
    document.getElementById('dni').addEventListener('blur', function() {
        const dni = this.value.toUpperCase();
        const dniRegex = /^[0-9]{8}[TRWAGMYFPDXBNJZSQVHLCKE]$/;
        const nieRegex = /^[XYZ][0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKE]$/;
        
        if (dni && !dniRegex.test(dni) && !nieRegex.test(dni)) {
            this.classList.add('border-red-500', 'focus:ring-red-500');
            this.classList.remove('border-gray-300', 'focus:ring-indigo-500');
        } else {
            this.classList.remove('border-red-500', 'focus:ring-red-500');
            this.classList.add('border-gray-300', 'focus:ring-indigo-500');
        }
    });

    // Validación del teléfono
    document.getElementById('telefono').addEventListener('blur', function() {
        const telefono = this.value;
        const telefonoRegex = /^[6-9][0-9]{8}$/; // Teléfonos españoles
        
        if (telefono && !telefonoRegex.test(telefono)) {
            this.classList.add('border-red-500', 'focus:ring-red-500');
            this.classList.remove('border-gray-300', 'focus:ring-indigo-500');
        } else {
            this.classList.remove('border-red-500', 'focus:ring-red-500');
            this.classList.add('border-gray-300', 'focus:ring-indigo-500');
        }
    });

    // Validación del código postal
    document.getElementById('cp').addEventListener('blur', function() {
        const cp = this.value;
        const cpRegex = /^[0-9]{5}$/;
        
        if (cp && !cpRegex.test(cp)) {
            this.classList.add('border-red-500', 'focus:ring-red-500');
            this.classList.remove('border-gray-300', 'focus:ring-indigo-500');
        } else {
            this.classList.remove('border-red-500', 'focus:ring-red-500');
            this.classList.add('border-gray-300', 'focus:ring-indigo-500');
        }
    });

    // Validación del número de seguridad social
    document.getElementById('num_seguridad_social').addEventListener('blur', function() {
        const nss = this.value;
        const nssRegex = /^[0-9]{2}\/[0-9]{8}\/[0-9]{2}$/;
        
        if (nss && !nssRegex.test(nss)) {
            this.classList.add('border-red-500', 'focus:ring-red-500');
            this.classList.remove('border-gray-300', 'focus:ring-indigo-500');
        } else {
            this.classList.remove('border-red-500', 'focus:ring-red-500');
            this.classList.add('border-gray-300', 'focus:ring-indigo-500');
        }
    });

    // Formateo automático del número de seguridad social
    document.getElementById('num_seguridad_social').addEventListener('input', function() {
        let value = this.value.replace(/\D/g, ''); // Eliminar caracteres no numéricos
        if (value.length >= 2) {
            value = value.substring(0, 2) + '/' + value.substring(2);
        }
        if (value.length >= 11) {
            value = value.substring(0, 11) + '/' + value.substring(11, 13);
        }
        this.value = value;
    });

    // Formateo automático del teléfono (agregar espacios cada 3 dígitos)
    document.getElementById('telefono').addEventListener('input', function() {
        let value = this.value.replace(/\D/g, ''); // Eliminar caracteres no numéricos
        value = value.substring(0, 9); // Limitar a 9 dígitos
        this.value = value;
    });

    // Auto-completar campos relacionados (ejemplo: si es de Madrid, sugerir provincia)
    document.getElementById('localidad').addEventListener('blur', function() {
        const localidad = this.value.toLowerCase();
        const provinciaField = document.getElementById('provincia');
        
        // Mapeo básico de localidades a provincias
        const localidadProvincia = {
            'madrid': 'Madrid',
            'barcelona': 'Barcelona',
            'valencia': 'Valencia',
            'sevilla': 'Sevilla',
            'bilbao': 'Vizcaya',
            'málaga': 'Málaga',
            'murcia': 'Murcia',
            'palma': 'Baleares',
            'las palmas': 'Las Palmas',
            'valladolid': 'Valladolid'
        };
        
        if (localidadProvincia[localidad] && !provinciaField.value) {
            provinciaField.value = localidadProvincia[localidad];
        }
    });
</script>
@endpush
</file>

<file path="resources/views/admin/alumnos/index.blade.php">
@extends('layouts.admin')

@section('title', 'Gestión de Alumnos')
@section('page-title', 'Gestión de Alumnos')

@section('content')
    {{-- Mensajes Flash de Sesión - Diseño mejorado --}}
    @if (session('success'))
        <div class="mb-6 px-4 py-3 rounded-lg relative bg-gradient-to-r from-green-50 to-green-100 border-l-4 border-green-400 text-green-800 shadow-sm animate-fadeIn" role="alert">
            <div class="flex items-center">
                <i class="bi bi-check-circle-fill text-green-500 mr-3"></i>
                <div>
                    <strong class="font-semibold">¡Éxito!</strong>
                    <p class="text-sm mt-1">{{ session('success') }}</p>
                </div>
            </div>
        </div>
    @endif
    @if (session('error'))
        <div class="mb-6 px-4 py-3 rounded-lg relative bg-gradient-to-r from-red-50 to-red-100 border-l-4 border-red-400 text-red-800 shadow-sm animate-fadeIn" role="alert">
            <div class="flex items-center">
                <i class="bi bi-exclamation-triangle-fill text-red-500 mr-3"></i>
                <div>
                    <strong class="font-semibold">¡Atención!</strong>
                    <p class="text-sm mt-1">{{ session('error') }}</p>
                </div>
            </div>
        </div>
    @endif

    <!-- KPIs / Tarjetas de Resumen - Diseño mejorado -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="bg-gradient-to-br from-white to-gray-50 p-6 rounded-xl shadow-sm border border-gray-100 hover:shadow-md transition-all duration-200 group">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-xs font-semibold text-gray-600 uppercase tracking-wider mb-2">Alumnos Activos</p>
                    <p class="text-3xl font-bold text-gray-900">{{ $totalAlumnosActivos ?? '0' }}</p>
                </div>
                <div class="p-3 bg-green-100 rounded-lg group-hover:bg-green-200 transition-colors duration-200">
                    <i class="bi bi-person-check-fill text-2xl text-green-600"></i>
                </div>
            </div>
        </div>
        
        <div class="bg-gradient-to-br from-white to-gray-50 p-6 rounded-xl shadow-sm border border-gray-100 hover:shadow-md transition-all duration-200 group">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-xs font-semibold text-gray-600 uppercase tracking-wider mb-2">Nuevos Este Mes</p>
                    <p class="text-3xl font-bold text-gray-900">{{ $nuevosAlumnosEsteMes ?? '0' }}</p>
                </div>
                <div class="p-3 bg-blue-100 rounded-lg group-hover:bg-blue-200 transition-colors duration-200">
                    <i class="bi bi-person-plus-fill text-2xl text-blue-600"></i>
                </div>
            </div>
        </div>
        
        <div class="bg-gradient-to-br from-white to-gray-50 p-6 rounded-xl shadow-sm border border-gray-100 hover:shadow-md transition-all duration-200 group">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-xs font-semibold text-gray-600 uppercase tracking-wider mb-2">Ratio Alumno-Profesor</p>
                    <p class="text-3xl font-bold text-gray-900">{{ $ratioAlumnoProfesor ?? 'N/A' }}</p>
                </div>
                <div class="p-3 bg-purple-100 rounded-lg group-hover:bg-purple-200 transition-colors duration-200">
                    <i class="bi bi-diagram-3-fill text-2xl text-purple-600"></i>
                </div>
            </div>
        </div>
        
        <div class="bg-gradient-to-br from-white to-gray-50 p-6 rounded-xl shadow-sm border border-gray-100 hover:shadow-md transition-all duration-200 group">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-xs font-semibold text-gray-600 uppercase tracking-wider mb-2">Tasa de Asistencia</p>
                    <p class="text-3xl font-bold text-green-600">{{ $tasaAsistencia ?? 'N/A' }}</p>
                </div>
                <div class="p-3 bg-orange-100 rounded-lg group-hover:bg-orange-200 transition-colors duration-200">
                    <i class="bi bi-calendar-check-fill text-2xl text-orange-600"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Filtros y Herramientas - Diseño mejorado -->
    <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8">
        <form method="GET" action="{{ route('admin.alumnos.index') }}" id="filterForm">
            <div class="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6">
                <div class="flex flex-col sm:flex-row items-stretch sm:items-center gap-4 w-full lg:w-auto">
                    <!-- Buscador mejorado -->
                    <div class="relative group">
                        <div class="absolute inset-y-0 left-0 flex items-center pl-4">
                            <i class="bi bi-search text-gray-400 group-focus-within:text-indigo-500 transition-colors duration-200"></i>
                        </div>
                        <input type="text" 
                               name="search" 
                               id="search" 
                               class="block w-full sm:w-80 pl-11 pr-4 py-3 border border-gray-300 rounded-lg bg-gray-50 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent focus:bg-white transition-all duration-200 text-sm"
                               placeholder="Buscar por nombre o ID..." 
                               value="{{ $searchTerm ?? '' }}"
                               autocomplete="off">
                        @if($searchTerm ?? false)
                            <button type="button" 
                                    onclick="clearSearch()" 
                                    class="absolute inset-y-0 right-0 flex items-center pr-4 text-gray-400 hover:text-gray-600">
                                <i class="bi bi-x-lg"></i>
                            </button>
                        @endif
                    </div>
                    
                    <!-- Filtro de grado mejorado -->
                    <div class="relative">
                        <select name="grado" 
                                id="grado" 
                                class="block w-full sm:w-48 rounded-lg border border-gray-300 bg-gray-50 px-4 py-3 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent focus:bg-white transition-all duration-200 appearance-none cursor-pointer">
                            <option value="">🎓 Todos los Grados</option>
                            @foreach ($opcionesGrado as $grado)
                                <option value="{{ $grado }}" {{ ($filtroGrado == $grado) ? 'selected' : '' }}>
                                    {{ $grado }}
                                </option>
                            @endforeach
                        </select>
                        
                    </div>
                    
                    <!-- Filtro de estado mejorado -->
                    <div class="relative">
                        <select name="estado_filtro" 
                                id="estado_filtro" 
                                class="block w-full sm:w-48 rounded-lg border border-gray-300 bg-gray-50 px-4 py-3 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent focus:bg-white transition-all duration-200 appearance-none cursor-pointer">
                            <option value="">📊 Todos los Estados</option>
                            @foreach ($opcionesEstado as $estado)
                                <option value="{{ $estado }}" {{ ($filtroEstado == $estado) ? 'selected' : '' }}>
                                    {{ $estado }}
                                </option>
                            @endforeach
                        </select>
                        
                    </div>
                    
                    <!-- Botones de acción -->
                    <div class="flex gap-2">
                        <button type="submit" 
                                class="inline-flex items-center justify-center px-6 py-3 border border-gray-300 shadow-sm text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 hover:border-gray-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-200">
                            <i class="bi bi-funnel mr-2"></i>
                            Aplicar
                        </button>
                        @if(($searchTerm ?? false) || ($filtroGrado ?? false) || ($filtroEstado ?? false))
                            <a href="{{ route('admin.alumnos.index') }}" 
                               class="inline-flex items-center justify-center px-4 py-3 text-sm font-medium rounded-lg text-gray-500 bg-gray-100 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition-all duration-200"
                               title="Limpiar filtros">
                                <i class="bi bi-arrow-clockwise"></i>
                            </a>
                        @endif
                    </div>
                </div>
                
                <!-- Botón principal mejorado -->
                <div class="flex-shrink-0 w-full sm:w-auto">
                    <a href="{{ route('admin.alumnos.create') }}" 
                       class="w-full sm:w-auto inline-flex items-center justify-center px-6 py-3 border border-transparent shadow-sm text-sm font-semibold rounded-lg text-white bg-gradient-to-r from-indigo-600 to-indigo-700 hover:from-indigo-700 hover:to-indigo-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-200 transform hover:scale-105">
                        <i class="bi bi-plus-lg mr-2"></i> 
                        Nuevo Alumno
                    </a>
                </div>
            </div>
            
            <!-- Información de resultados -->
            @if($alumnos->total() > 0)
                <div class="mt-4 pt-4 border-t border-gray-100">
                    <p class="text-sm text-gray-600">
                        <i class="bi bi-info-circle mr-1"></i>
                        Mostrando {{ $alumnos->firstItem() }}-{{ $alumnos->lastItem() }} de {{ $alumnos->total() }} alumnos
                        @if(($searchTerm ?? false) || ($filtroGrado ?? false) || ($filtroEstado ?? false))
                            <span class="ml-2 px-2 py-1 bg-indigo-100 text-indigo-800 rounded-full text-xs font-medium">
                                Filtros activos
                            </span>
                        @endif
                    </p>
                </div>
            @endif
        </form>
    </div>

    <!-- Tabla de Alumnos - Diseño mejorado -->
    <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gradient-to-r from-gray-50 to-gray-100">
                    <tr>
                        <th scope="col" class="px-6 py-4 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">
                            <div class="flex items-center space-x-1">
                                <i class="bi bi-person-fill"></i>
                                <span>Alumno</span>
                            </div>
                        </th>
                        <th scope="col" class="px-6 py-4 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">
                            <div class="flex items-center space-x-1">
                                <i class="bi bi-card-text"></i>
                                <span>ID Alumno</span>
                            </div>
                        </th>
                        <th scope="col" class="px-6 py-4 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">
                            <div class="flex items-center space-x-1">
                                <i class="bi bi-mortarboard"></i>
                                <span>Grado/Año</span>
                            </div>
                        </th>
                        <th scope="col" class="px-6 py-4 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">
                            <div class="flex items-center space-x-1">
                                <i class="bi bi-envelope"></i>
                                <span>Email</span>
                            </div>
                        </th>
                        <th scope="col" class="px-6 py-4 text-center text-xs font-bold text-gray-600 uppercase tracking-wider">
                            <div class="flex items-center justify-center space-x-1">
                                <i class="bi bi-circle-fill"></i>
                                <span>Estado</span>
                            </div>
                        </th>
                        <th scope="col" class="px-6 py-4 text-center text-xs font-bold text-gray-600 uppercase tracking-wider">
                            Acciones
                        </th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-100">
                    @forelse ($alumnos as $alumno)
                        <tr class="hover:bg-gray-50 transition-colors duration-150 group">
                            <td class="px-6 py-5 whitespace-nowrap">
                                <div class="flex items-center">
                                    <div class="flex-shrink-0 h-12 w-12">
                                        <img class="h-12 w-12 rounded-full ring-2 ring-gray-200 group-hover:ring-indigo-300 transition-all duration-200" 
                                             src="https://ui-avatars.com/api/?name={{ urlencode($alumno->nombre . ' ' . $alumno->apellido1) }}&color=7F9CF5&background=EBF4FF&font-size=0.33" 
                                             alt="Avatar de {{ $alumno->nombre }}">
                                    </div>
                                    <div class="ml-4">
                                        <div class="text-sm font-semibold text-gray-900 group-hover:text-indigo-600 transition-colors duration-200">
                                            {{ $alumno->nombre }} {{ $alumno->apellido1 }} {{ $alumno->apellido2 }}
                                        </div>
                                        <div class="text-xs text-gray-500 mt-1 flex items-center">
                                            <i class="bi bi-calendar3 mr-1"></i>
                                            Inscrito {{ $alumno->created_at ? $alumno->created_at->format('M Y') : 'Fecha no disponible' }}
                                        </div>
                                    </div>
                                </div>
                            </td>
                            <td class="px-6 py-5 whitespace-nowrap">
                                <div class="text-sm text-gray-900 font-mono">{{ $alumno->dni ?? 'N/A' }}</div>
                            </td>
                            <td class="px-6 py-5 whitespace-nowrap">
                                @if($alumno->nivel_formativo)
                                    <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-indigo-100 text-indigo-800">
                                        {{ $alumno->nivel_formativo }}
                                    </span>
                                @else
                                    <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-600">
                                        No especificado
                                    </span>
                                @endif
                            </td>
                            <td class="px-6 py-5 whitespace-nowrap">
                                @if($alumno->email)
                                    <div class="text-sm text-gray-700">
                                        <a href="mailto:{{ $alumno->email }}" 
                                           class="hover:text-indigo-600 transition-colors duration-200 flex items-center">
                                            <i class="bi bi-envelope-fill mr-1 text-xs"></i>
                                            {{ $alumno->email }}
                                        </a>
                                    </div>
                                @else
                                    <span class="text-sm text-gray-400">Sin email</span>
                                @endif
                            </td>
                            <td class="px-6 py-5 whitespace-nowrap text-center">
                                @php
                                    $estado = $alumno->estado ?? 'Desconocido';
                                    $badgeClass = 'bg-gray-100 text-gray-800';
                                    $iconClass = 'bi-question-circle';
                                    if ($estado === 'Activo') {
                                        $badgeClass = 'bg-green-100 text-green-800';
                                        $iconClass = 'bi-check-circle-fill';
                                    } elseif ($estado === 'Inactivo') {
                                        $badgeClass = 'bg-red-100 text-red-800';
                                        $iconClass = 'bi-x-circle-fill';
                                    } elseif ($estado === 'Pendiente') {
                                        $badgeClass = 'bg-yellow-100 text-yellow-800';
                                        $iconClass = 'bi-clock-fill';
                                    }
                                @endphp
                                <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold {{ $badgeClass }}">
                                    <i class="bi {{ $iconClass }} mr-1"></i>
                                    {{ $estado }}
                                </span>
                            </td>
                            <td class="px-6 py-5 whitespace-nowrap text-center">
                                <div class="flex items-center justify-center space-x-2">
                                    <a href="{{ route('admin.alumnos.show', $alumno->id) }}" 
                                       class="inline-flex items-center justify-center h-8 w-8 rounded-lg text-gray-400 hover:text-blue-600 hover:bg-blue-50 transition-all duration-200 group/btn"
                                       title="Ver detalles">
                                        <i class="bi bi-eye-fill group-hover/btn:scale-110 transition-transform duration-200"></i>
                                    </a>
                                    <a href="{{ route('admin.alumnos.edit', $alumno->id) }}" 
                                       class="inline-flex items-center justify-center h-8 w-8 rounded-lg text-gray-400 hover:text-indigo-600 hover:bg-indigo-50 transition-all duration-200 group/btn"
                                       title="Editar información">
                                        <i class="bi bi-pencil-fill group-hover/btn:scale-110 transition-transform duration-200"></i>
                                    </a>
                                    <button type="button" 
                                            onclick="confirmDelete('{{ route('admin.alumnos.destroy', $alumno->id) }}', '{{ addslashes($alumno->nombre . ' ' . $alumno->apellido1) }}')"
                                            class="inline-flex items-center justify-center h-8 w-8 rounded-lg text-gray-400 hover:text-red-600 hover:bg-red-50 transition-all duration-200 group/btn"
                                            title="Eliminar alumno">
                                        <i class="bi bi-trash-fill group-hover/btn:scale-110 transition-transform duration-200"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    @empty
                        <tr>
                            <td colspan="6" class="px-6 py-12 text-center">
                                <div class="flex flex-col items-center justify-center space-y-4">
                                    <div class="p-4 bg-gray-100 rounded-full">
                                        <i class="bi bi-person-x text-4xl text-gray-400"></i>
                                    </div>
                                    <div class="text-center">
                                        <h3 class="text-lg font-medium text-gray-900 mb-2">No hay alumnos</h3>
                                        <p class="text-sm text-gray-500 mb-4">
                                            @if(($searchTerm ?? false) || ($filtroGrado ?? false) || ($filtroEstado ?? false))
                                                No se encontraron alumnos que coincidan con los criterios de búsqueda.
                                            @else
                                                Aún no has agregado ningún alumno al sistema.
                                            @endif
                                        </p>
                                        @if(!($searchTerm ?? false) && !($filtroGrado ?? false) && !($filtroEstado ?? false))
                                            <a href="{{ route('admin.alumnos.create') }}" 
                                               class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-indigo-600 hover:bg-indigo-700 transition-colors duration-200">
                                                <i class="bi bi-plus-lg mr-2"></i>
                                                Agregar primer alumno
                                            </a>
                                        @else
                                            <button type="button" 
                                                    onclick="clearFilters()" 
                                                    class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-200">
                                                <i class="bi bi-arrow-clockwise mr-2"></i>
                                                Limpiar filtros
                                            </button>
                                        @endif
                                    </div>
                                </div>
                            </td>
                        </tr>
                    @endforelse
                </tbody>
            </table>
        </div>
    </div>

    <!-- Paginación mejorada -->
    @if ($alumnos->hasPages())
        <div class="mt-8 px-6 py-4 bg-white rounded-xl shadow-sm border border-gray-200">
            <div class="flex items-center justify-between">
                <div class="text-sm text-gray-500">
                    Página {{ $alumnos->currentPage() }} de {{ $alumnos->lastPage() }}
                </div>
                <div class="pagination-wrapper">
                    {{ $alumnos->appends(request()->query())->links() }}
                </div>
            </div>
        </div>
    @endif

<!-- Modal de confirmación de eliminación -->
<x-delete-modal title="Eliminar Alumno" />
@endsection

@push('styles')
<style>
    .animate-fadeIn {
        animation: fadeIn 0.5s ease-in-out;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .pagination-wrapper .pagination {
        display: flex;
        list-style: none;
        border-radius: 0.5rem;
        padding: 0;
        margin: 0;
    }
    
    .pagination-wrapper .pagination li {
        margin: 0 2px;
    }
    
    .pagination-wrapper .pagination li a,
    .pagination-wrapper .pagination li span {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0.5rem 0.75rem;
        text-decoration: none;
        color: #6b7280;
        background-color: white;
        border: 1px solid #d1d5db;
        border-radius: 0.375rem;
        transition: all 0.2s;
        font-size: 0.875rem;
    }
    
    .pagination-wrapper .pagination li a:hover {
        background-color: #f3f4f6;
        color: #374151;
    }
    
    .pagination-wrapper .pagination li.active span {
        background-color: #4f46e5;
        color: white;
        border-color: #4f46e5;
    }
    


    
</style>
@endpush

@push('scripts')
<script>
    // Función para limpiar búsqueda
    function clearSearch() {
        document.getElementById('search').value = '';
        document.getElementById('filterForm').submit();
    }
    
    // Función para limpiar todos los filtros
    function clearFilters() {
        window.location.href = '{{ route("admin.alumnos.index") }}';
    }
         
    // Auto-submit en cambio de filtros
    document.getElementById('grado').addEventListener('change', function() {
        document.getElementById('filterForm').submit();
    });
    
    document.getElementById('estado_filtro').addEventListener('change', function() {
        document.getElementById('filterForm').submit();
    });
    
    // Feedback visual al enviar formulario
    document.getElementById('filterForm').addEventListener('submit', function() {
        const submitBtn = this.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<i class="bi bi-arrow-clockwise animate-spin mr-2"></i>Aplicando...';
        submitBtn.disabled = true;
        
        setTimeout(() => {
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        }, 2000);
    });
    

</script>
@endpush
</file>

<file path="resources/views/admin/alumnos/show.blade.php">
@extends('layouts.admin')
@section('title', 'Perfil de ' . $alumno->nombre . ' ' . $alumno->apellido1)
@section('page-title', 'Perfil del Estudiante')

@push('styles')
<style>
    /* Solo estilos que no se pueden lograr con Tailwind */
    .student-card-gradient {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    @media print {
        .no-print { display: none !important; }
        .print-friendly { background: #f8fafc !important; color: #1e293b !important; }
    }
</style>
@endpush

@section('content')
{{-- Bloque de Mensajes Flash --}}
    @if (session('success'))
        <div class="mb-4 px-4 py-3 rounded-md relative bg-green-100 border border-green-400 text-green-800" role="alert">
            <strong class="font-bold">¡Éxito!</strong>
            <span class="block sm:inline">{{ session('success') }}</span>
        </div>
    @endif
    @if (session('error'))
        <div class="mb-4 px-4 py-3 rounded-md relative bg-red-100 border border-red-400 text-red-800" role="alert">
            <strong class="font-bold">¡Error!</strong>
            <span class="block sm:inline">{{ session('error') }}</span>
        </div>
    @endif
    {{-- Fin Bloque de Mensajes Flash --}}
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Student Header Card -->
    <div class="student-card-gradient rounded-3xl p-6 md:p-8 text-white mb-8 relative overflow-hidden shadow-2xl">
        <!-- Efecto decorativo con Tailwind -->
        <div class="absolute -top-20 -right-20 w-40 h-40 bg-white/10 rounded-full transform rotate-45"></div>
        <div class="absolute -top-10 -right-10 w-20 h-20 bg-white/5 rounded-full"></div>
        
        <div class="flex flex-col md:flex-row items-center md:items-start relative z-10">
            <!-- Avatar -->
            <div class="flex-shrink-0 mb-6 md:mb-0 md:mr-8">
                <div class="relative">
                    <img class="w-28 h-28 md:w-32 md:h-32 rounded-full border-4 border-white/30 shadow-2xl object-cover"
                         src="https://ui-avatars.com/api/?name={{ urlencode($alumno->nombre . ' ' . $alumno->apellido1) }}&size=200&color=ffffff&background=6366f1&font-size=0.5"
                         alt="Avatar de {{ $alumno->nombre }}">
                    <!-- Status dot -->
                    @php
                        $estado = $alumno->estado ?? 'Desconocido';
                        $dotColor = match($estado) {
                            'Activo' => 'bg-green-400',
                            'Inactivo' => 'bg-red-400',
                            'Pendiente' => 'bg-yellow-400',
                            'Baja' => 'bg-purple-400',
                            default => 'bg-gray-400'
                        };
                    @endphp
                    <div class="absolute -bottom-1 -right-1 w-8 h-8 {{ $dotColor }} rounded-full border-4 border-white shadow-lg"></div>
                </div>
            </div>
            
            <!-- Student Info -->
            <div class="flex-1 text-center md:text-left">
                <h1 class="text-3xl md:text-4xl font-bold mb-2 tracking-tight">
                    {{ $alumno->nombre }} {{ $alumno->apellido1 }} {{ $alumno->apellido2 ?? '' }}
                </h1>
                
                <div class="flex items-center justify-center md:justify-start mb-4 text-white/90">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V4a2 2 0 011-1h2a2 2 0 011 1v2m-4 0a2 2 0 104 0m-5 8a2 2 0 100-4 2 2 0 000 4zm0 0c1.306 0 2.417.835 2.83 2M9 14a3.001 3.001 0 00-6 0"></path>
                    </svg>
                    ID: {{ $alumno->dni ?? 'N/A' }}
                </div>
                
                <div class="flex flex-col md:flex-row items-center md:items-start space-y-3 md:space-y-0 md:space-x-6">
                    <!-- Status Badge -->
                    <div>
                        @php
                            $statusClasses = match($estado) {
                                'Activo' => 'bg-green-500/20 text-green-100 border-green-400/30',
                                'Inactivo' => 'bg-red-500/20 text-red-100 border-red-400/30',
                                'Pendiente' => 'bg-yellow-500/20 text-yellow-100 border-yellow-400/30',
                                'Baja' => 'bg-purple-500/20 text-purple-100 border-purple-400/30',
                                default => 'bg-gray-500/20 text-gray-100 border-gray-400/30'
                            };
                        @endphp
                        <span class="inline-flex items-center px-4 py-2 rounded-full text-sm font-semibold uppercase tracking-wide border backdrop-blur-sm {{ $statusClasses }}">
                            <div class="w-2 h-2 {{ $dotColor }} rounded-full mr-2 animate-pulse"></div>
                            {{ $estado }}
                        </span>
                    </div>
                    
                    <!-- Contact Info -->
                    @if($alumno->email)
                        <div class="flex items-center text-white/90">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                            </svg>
                            <span class="text-sm">{{ $alumno->email }}</span>
                        </div>
                    @endif
                    
                    @if($alumno->telefono)
                        <div class="flex items-center text-white/90">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                            </svg>
                            <span class="text-sm">{{ $alumno->telefono }}</span>
                        </div>
                    @endif
                </div>
            </div>
        </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
        <!-- Main Content -->
        <div class="lg:col-span-3 space-y-8">
            <!-- Personal Information -->
            <div>
                <h2 class="text-2xl font-bold text-gray-900 mb-6 flex items-center">
                    <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center mr-3">
                        <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                        </svg>
                    </div>
                    Información Personal
                </h2>
                
                <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4">
                    <!-- Email -->
                    <div class="bg-white rounded-xl p-6 border border-gray-200 hover:shadow-lg hover:border-gray-300 hover:-translate-y-1 transition-all duration-300 group">
                        <div class="flex items-center text-sm font-semibold text-gray-600 mb-3">
                            <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center mr-3 group-hover:bg-blue-200 transition-colors">
                                <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                                </svg>
                            </div>
                            Email
                        </div>
                        <div class="text-gray-900 font-medium break-words text-sm">
                            {{ $alumno->email ?? 'No especificado' }}
                        </div>
                    </div>
                    
                    <!-- Fecha de Nacimiento -->
                    <div class="bg-white rounded-xl p-6 border border-gray-200 hover:shadow-lg hover:border-gray-300 hover:-translate-y-1 transition-all duration-300 group">
                        <div class="flex items-center text-sm font-semibold text-gray-600 mb-3">
                            <div class="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center mr-3 group-hover:bg-green-200 transition-colors">
                                <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                </svg>
                            </div>
                            Fecha de Nacimiento
                        </div>
                        <div class="text-gray-900 font-medium text-sm">
                            {{ $alumno->fecha_nacimiento ? \Carbon\Carbon::parse($alumno->fecha_nacimiento)->format('d/m/Y') : 'No especificada' }}
                            @if($alumno->fecha_nacimiento)
                                <div class="text-xs text-gray-500 mt-1">
                                    ({{ \Carbon\Carbon::parse($alumno->fecha_nacimiento)->age }} años)
                                </div>
                            @endif
                        </div>
                    </div>
                    
                    <!-- Sexo -->
                    <div class="bg-white rounded-xl p-6 border border-gray-200 hover:shadow-lg hover:border-gray-300 hover:-translate-y-1 transition-all duration-300 group">
                        <div class="flex items-center text-sm font-semibold text-gray-600 mb-3">
                            <div class="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center mr-3 group-hover:bg-purple-200 transition-colors">
                                <svg class="w-4 h-4 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                </svg>
                            </div>
                            Sexo
                        </div>
                        <div class="text-gray-900 font-medium text-sm">{{ $alumno->sexo ?? 'No especificado' }}</div>
                    </div>
                    
                    <!-- Nivel Formativo -->
                    <div class="bg-white rounded-xl p-6 border border-gray-200 hover:shadow-lg hover:border-gray-300 hover:-translate-y-1 transition-all duration-300 group">
                        <div class="flex items-center text-sm font-semibold text-gray-600 mb-3">
                            <div class="w-8 h-8 bg-indigo-100 rounded-lg flex items-center justify-center mr-3 group-hover:bg-indigo-200 transition-colors">
                                <svg class="w-4 h-4 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 14l9-5-9-5-9 5 9 5z"></path>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z"></path>
                                </svg>
                            </div>
                            Nivel Formativo
                        </div>
                        <div class="text-gray-900 font-medium text-sm">{{ $alumno->nivel_formativo ?? 'No especificado' }}</div>
                    </div>
                    
                    <!-- Seguridad Social -->
                    <div class="bg-white rounded-xl p-6 border border-gray-200 hover:shadow-lg hover:border-gray-300 hover:-translate-y-1 transition-all duration-300 group">
                        <div class="flex items-center text-sm font-semibold text-gray-600 mb-3">
                            <div class="w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center mr-3 group-hover:bg-red-200 transition-colors">
                                <svg class="w-4 h-4 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                                </svg>
                            </div>
                            Seguridad Social
                        </div>
                        <div class="text-gray-900 font-medium text-sm">{{ $alumno->num_seguridad_social ?? 'No especificado' }}</div>
                    </div>
                    
                    <!-- Nacionalidad -->
                    <div class="bg-white rounded-xl p-6 border border-gray-200 hover:shadow-lg hover:border-gray-300 hover:-translate-y-1 transition-all duration-300 group">
                        <div class="flex items-center text-sm font-semibold text-gray-600 mb-3">
                            <div class="w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center mr-3 group-hover:bg-yellow-200 transition-colors">
                                <svg class="w-4 h-4 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 21v-4m0 0V5a2 2 0 012-2h6.5l1 1H21l-3 6 3 6h-8.5l-1-1H5a2 2 0 00-2 2zm9-13.5V9"></path>
                                </svg>
                            </div>
                            Nacionalidad
                        </div>
                        <div class="text-gray-900 font-medium text-sm">{{ $alumno->nacionalidad ?? 'No especificada' }}</div>
                    </div>
                </div>
            </div>

            <!-- Contact Information -->
            <div>
                <h2 class="text-2xl font-bold text-gray-900 mb-6 flex items-center">
                    <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center mr-3">
                        <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        </svg>
                    </div>
                    Información de Contacto
                </h2>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Address -->
                    <div class="bg-white rounded-xl p-6 border border-gray-200 hover:shadow-lg hover:border-gray-300 hover:-translate-y-1 transition-all duration-300 group">
                        <div class="flex items-center text-sm font-semibold text-gray-600 mb-3">
                            <div class="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center mr-3 group-hover:bg-green-200 transition-colors">
                                <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
                                </svg>
                            </div>
                            Dirección Completa
                        </div>
                        <div class="text-gray-900 font-medium">
                            <div class="mb-1">{{ $alumno->direccion ?? 'No especificada' }}</div>
                            @if($alumno->cp || $alumno->localidad || $alumno->provincia)
                                <div class="text-sm text-gray-600">
                                    {{ $alumno->cp }} {{ $alumno->localidad }}, {{ $alumno->provincia }}
                                </div>
                            @endif
                        </div>
                    </div>
                    
                    <!-- Phone -->
                    <div class="bg-white rounded-xl p-6 border border-gray-200 hover:shadow-lg hover:border-gray-300 hover:-translate-y-1 transition-all duration-300 group">
                        <div class="flex items-center text-sm font-semibold text-gray-600 mb-3">
                            <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center mr-3 group-hover:bg-blue-200 transition-colors">
                                <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                                </svg>
                            </div>
                            Teléfono
                        </div>
                        <div class="text-gray-900 font-medium flex items-center justify-between">
                            <span>{{ $alumno->telefono ?? 'No especificado' }}</span>
                            @if($alumno->telefono)
                                <a href="tel:{{ $alumno->telefono }}" 
                                   class="p-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-lg transition-all duration-200">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                                    </svg>
                                </a>
                            @endif
                        </div>
                    </div>
                </div>
            </div>

            <!-- Academic and Work Information -->
            <div>
                <h2 class="text-2xl font-bold text-gray-900 mb-6 flex items-center">
                    
                    <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center mr-3">
                <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 14l9-5-9-5-9 5 9 5z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 14l9-5-9-5-9 5 9 5z"></path>
                </svg>
            </div>
                    Información Académica y Laboral
                </h2>
                
                <div class="bg-white rounded-xl p-6 border border-gray-200 hover:shadow-lg hover:border-gray-300 hover:-translate-y-1 transition-all duration-300 group">
                    <div class="flex items-center text-sm font-semibold text-gray-600 mb-3">
                    <div class="w-8 h-8 bg-orange-100 rounded-lg flex items-center justify-center mr-3 group-hover:bg-orange-200 transition-colors">
    <svg class="w-4 h-4 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.618 5.984A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016zM12 9v2m0 4h.01"></path>
    </svg>
</div>
                        Situación Laboral
                    </div>
                    <div class="text-gray-900 font-medium">{{ $alumno->situacion_laboral ?? 'No especificada' }}</div>
                </div>
            </div>

            <!-- Academic History -->
            <div>
                <h2 class="text-2xl font-bold text-gray-900 mb-6 flex items-center">
                    <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center mr-3">
                        <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                        </svg>
                    </div>
                    Historial Académico
                </h2>
                
                
                @if ($alumno->relationLoaded('cursos') && $alumno->cursos->count() > 0)
                    <div class="space-y-4">
                        @foreach ($alumno->cursos as $cursoInscrito)
                            <div class="bg-white border border-gray-200 rounded-xl p-6 hover:shadow-lg hover:border-gray-300 transition-all duration-300">
                                <div class="flex flex-col md:flex-row md:items-center justify-between">

                                    {{-- Parte Izquierda: Nombre del Curso y Datos Pivote --}}
                                    <div class="flex-1">
                                        <h4 class="font-semibold text-gray-900 mb-3">
                                            <a href="{{ route('admin.cursos.show', $cursoInscrito->id) }}"
                                            class="text-blue-600 hover:text-blue-800 hover:underline transition-colors">
                                                {{ $cursoInscrito->nombre }}
                                            </a>
                                        </h4>
                                        <div class="flex flex-wrap items-center gap-4 text-sm text-gray-600">
                                            {{-- ... (tus spans para Estado y Nota se mantienen igual) ... --}}
                                            <span class="flex items-center bg-gray-50 px-3 py-1 rounded-lg">
                                                <i class="bi bi-check-circle-fill text-gray-500 mr-1.5"></i>
                                                Estado: <span class="font-medium text-gray-900 ml-1">{{ $cursoInscrito->pivot->estado ?? 'N/A' }}</span>
                                            </span>
                                            <span class="flex items-center bg-gray-50 px-3 py-1 rounded-lg">
                                                <i class="bi bi-star-fill text-gray-500 mr-1.5"></i>
                                                Nota: <span class="font-medium text-gray-900 ml-1">{{ $cursoInscrito->pivot->nota ?? 'N/A' }}</span>
                                            </span>
                                        </div>
                                    </div>

                                    {{-- Parte Derecha: Badge de Estado y NUEVO Botón de Desinscribir --}}
                                    <div class="mt-4 md:mt-0 md:ml-6 flex items-center space-x-3">
                                        {{-- Badge de Estado (sin cambios) --}}
                                        @php
                                            $estadoCurso = $cursoInscrito->pivot->estado ?? 'N/A';
                                            $badgeClasses = match($estadoCurso) {
                                                'Completado'  => 'bg-green-100 text-green-800 border-green-200',
                                                'En Progreso' => 'bg-blue-100 text-blue-800 border-blue-200',
                                                'Abandonado'  => 'bg-red-100 text-red-800 border-red-200',
                                                default       => 'bg-gray-100 text-gray-800 border-gray-200'
                                            };
                                        @endphp
                                        <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold border {{ $badgeClasses }}">
                                            {{ $estadoCurso }}
                                        </span>

                                        {{-- Formulario real (ahora sin confirm nativo) --}}
                                        <form id="desinscribir-form-{{ $cursoInscrito->id }}"          
                                            
                                            action="{{ route('admin.alumnos.cursos.desinscribir', [
                                                        'alumno' => $alumno->id,
                                                        'curso'  => $cursoInscrito->id]) }}"
                                            method="POST"
                                            class="inline">                                           
                                            @csrf
                                            @method('DELETE')

                                            {{-- Botón que abre el modal --}}
                                            <button x-data type="button"                                        
                                                    @click="$dispatch('open-modal', 'desinscribir-modal-{{ $cursoInscrito->id }}')"
                                                    class="inline-flex items-center justify-center h-8 w-8 rounded-lg
                                                        bg-red-500 text-white shadow-sm hover:bg-red-600
                                                        focus:outline-none focus:ring-2 focus:ring-offset-2
                                                        focus:ring-red-500 transition-all duration-200 group/btn"
                                                    title="Desinscribir de este curso">
                                                <i class="bi bi-person-x-fill text-lg group-hover/btn:scale-110 transition-transform duration-200"></i>
                                            </button>
                                        </form>
                                    </div>

                                    {{-- Modal de confirmación --}}
                                    <x-desinscribir-modal
                                            id="desinscribir-modal-{{ $cursoInscrito->id }}"
                                            :form="'desinscribir-form-' . $cursoInscrito->id">
                                        <p class="text-sm text-gray-600">
                                            ¿Seguro que quieres desinscribir a
                                            <b>{{ $alumno->nombre }}</b> del curso
                                            <b>{{ $cursoInscrito->nombre }}</b>? Esta acción es irreversible.
                                        </p>
                                    </x-desinscribir-modal>

                                                    </div>
                                                </div>
                                            @endforeach
                                        </div>
                @else    
                   <div class="text-center py-16 bg-gray-50 border-2 border-dashed border-gray-300 rounded-xl">
                       <div class="w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-4">
                           <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                           </svg>
                       </div>
                       <h3 class="text-lg font-medium text-gray-600 mb-2">Sin cursos registrados</h3>
                       <p class="text-gray-500 max-w-sm mx-auto">Este estudiante aún no tiene cursos asignados en el sistema.</p>
                   </div>
               @endif
           </div>
       </div>

       <!-- Sidebar -->
       <div class="lg:col-span-1 space-y-6 no-print">
           <!-- Quick Actions -->
           <div class="bg-white rounded-xl p-6 border border-gray-200 sticky top-8 shadow-sm">
               <h3 class="font-bold text-gray-800 mb-6 flex items-center">
                   <div class="w-6 h-6 bg-yellow-100 rounded-lg flex items-center justify-center mr-3">
                       <svg class="w-4 h-4 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                       </svg>
                   </div>
                   Acciones Rápidas
               </h3>
               
               <div class="space-y-3">
                   <a href="{{ route('admin.alumnos.edit', $alumno->id) }}" 
                      class="flex items-center justify-center w-full px-4 py-3 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-xl transition-all duration-200 transform hover:-translate-y-0.5 hover:shadow-lg group">
                       <svg class="w-4 h-4 mr-2 group-hover:scale-110 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                       </svg>
                       Editar Perfil
                   </a>
                   
                   <button onclick="openEnrollModal('{{ $alumno->id }}')" 
                           class="flex items-center justify-center w-full px-4 py-3 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-xl transition-all duration-200 transform hover:-translate-y-0.5 hover:shadow-lg group">
                       <svg class="w-4 h-4 mr-2 group-hover:scale-110 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                       </svg>
                       Inscribir a Curso
                   </button>
                   
                   
                   <button onclick="printProfile()" 
                           class="flex items-center justify-center w-full px-4 py-3 bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold rounded-xl border border-gray-300 transition-all duration-200 transform hover:-translate-y-0.5 hover:shadow-md group">
                       <svg class="w-4 h-4 mr-2 group-hover:scale-110 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"></path>
                       </svg>
                       Imprimir Perfil
                   </button>
                   
                   <button onclick="exportProfile()" 
                           class="flex items-center justify-center w-full px-4 py-3 bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold rounded-xl border border-gray-300 transition-all duration-200 transform hover:-translate-y-0.5 hover:shadow-md group">
                       <svg class="w-4 h-4 mr-2 group-hover:scale-110 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                       </svg>
                       Exportar PDF
                   </button>
               </div>
               
               <!-- Contact Actions -->
               <div class="border-t border-gray-200 pt-6 mt-6">
                   <h4 class="font-semibold text-gray-700 mb-4 text-sm">Contacto Directo</h4>
                   
                   @if($alumno->email)
                   <a href="mailto:{{ $alumno->email }}" 
                      class="flex items-center justify-center w-full px-4 py-3 bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold rounded-xl border border-gray-300 transition-all duration-200 transform hover:-translate-y-0.5 mb-3 hover:shadow-md group">
                       <svg class="w-4 h-4 mr-2 group-hover:scale-110 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                       </svg>
                       Enviar Email
                   </a>
                   @endif
                   
                   @if($alumno->telefono)
                   <a href="tel:{{ $alumno->telefono }}" 
                      class="flex items-center justify-center w-full px-4 py-3 bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold rounded-xl border border-gray-300 transition-all duration-200 transform hover:-translate-y-0.5 hover:shadow-md group">
                       <svg class="w-4 h-4 mr-2 group-hover:scale-110 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                       </svg>
                       Llamar
                   </a>
                   @endif
               </div>
               

           <!-- Statistics -->
           <div class="border-t border-gray-200 pt-6 mt-6">
           <div class="bg-white rounded-xl p-6 border border-gray-200 shadow-sm">
               <h4 class="font-semibold text-gray-700 mb-6 flex items-center">
                   <div class="w-6 h-6 bg-blue-100 rounded-lg flex items-center justify-center mr-3">
                       <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                       </svg>
                   </div>
                   Estadísticas
               </h4>
               
               <div class="space-y-4">
                   <div class="flex justify-between items-center">
                       <span class="text-sm text-gray-600">Cursos Totales:</span>
                       <span class="font-semibold text-gray-800 bg-gray-100 px-3 py-1.5 rounded-lg text-sm">
                           {{ $alumno->relationLoaded('cursos') ? $alumno->cursos->count() : 0 }}
                       </span>
                   </div>
                   
                   @if($alumno->relationLoaded('cursos') && $alumno->cursos->count() > 0)
                   <div class="flex justify-between items-center">
                       <span class="text-sm text-gray-600">Completados:</span>
                       <span class="font-semibold text-green-700 bg-green-100 px-3 py-1.5 rounded-lg text-sm">
                           {{ $alumno->cursos->where('pivot.estado', 'Completado')->count() }}
                       </span>
                   </div>
                   
                   <div class="flex justify-between items-center">
                       <span class="text-sm text-gray-600">En Progreso:</span>
                       <span class="font-semibold text-blue-700 bg-blue-100 px-3 py-1.5 rounded-lg text-sm">
                           {{ $alumno->cursos->where('pivot.estado', 'En Progreso')->count() }}
                       </span>
                   </div>
                   
                   @php
                       $notasNumericas = $alumno->cursos
                           ->pluck('pivot.nota')
                           ->filter(function($nota) {
                               return is_numeric($nota);
                           });
                       $promedioNotas = $notasNumericas->count() > 0 ? $notasNumericas->avg() : null;
                   @endphp
                   
                   @if($promedioNotas)
                   <div class="flex justify-between items-center">
                       <span class="text-sm text-gray-600">Promedio:</span>
                       @php
                           $promedioColor = $promedioNotas >= 7 ? 'text-green-700 bg-green-100' : ($promedioNotas >= 5 ? 'text-yellow-700 bg-yellow-100' : 'text-red-700 bg-red-100');
                       @endphp
                       <span class="font-semibold px-3 py-1.5 rounded-lg text-sm {{ $promedioColor }}">
                           {{ number_format($promedioNotas, 1) }}
                       </span>
                   </div>
                   @endif
                   @endif
               </div>
           </div>
           <!-- Navigation -->
           <div class="border-t border-gray-200 pt-6 mt-6">
               <h4 class="font-semibold text-gray-700 mb-4 flex items-center">
                   <div class="w-6 h-6 bg-gray-100 rounded-lg flex items-center justify-center mr-3">
                       <svg class="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16l-4-4m0 0l4-4m-4 4h18"></path>
                       </svg>
                   </div>
                   Navegación
               </h4>
               
               <a href="{{ route('admin.alumnos.index') }}" 
                  class="flex items-center justify-center w-full px-4 py-3 bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold rounded-xl border border-gray-300 transition-all duration-200 transform hover:-translate-y-0.5 hover:shadow-md group">
                   <svg class="w-4 h-4 mr-2 group-hover:scale-110 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                       <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16l-4-4m0 0l4-4m-4 4h18"></path>
                   </svg>
                   Volver a Lista
               </a>
           
           </div>
           
       </div>
   </div>
</div>
<!-- Modal para Inscribir Alumno a Curso -->
<div id="enrollModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 hidden">
    <div class="relative top-20 mx-auto p-5 border w-full max-w-lg shadow-lg rounded-xl bg-white">
        <div class="mt-3">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold text-gray-900">Inscribir Alumno a un Curso</h3>
                <button onclick="closeEnrollModal()" class="text-gray-400 hover:text-gray-600">×</button>
            </div>

            <form id="enrollForm" method="POST"> {{-- La action se establecerá con JS --}}
                @csrf
                <div class="space-y-4">
                    <div>
                        <label for="curso_id" class="block text-sm font-medium text-gray-700">Seleccionar Curso <span class="text-red-500">*</span></label>
                        <select name="curso_id" id="curso_id_select" required
                                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                            <option value="">Cargando cursos disponibles...</option>
                            {{-- Las opciones se llenarán con JavaScript --}}
                        </select>
                    </div>
                     {{-- Puedes añadir más campos si son necesarios, ej: estado inicial de la inscripción --}}
                     <div>
                        <label for="enroll_status" class="block text-sm font-medium text-gray-700">Estado de la Inscripción</label>
                        <select name="estado" id="enroll_status" class="mt-1 block w-full ...">
                            <option value="Inscrito" selected>Inscrito</option>
                            <option value="Pendiente">Pendiente</option>
                        </select>
                     </div>
                </div>
                <div class="mt-6 flex justify-end space-x-3">
                    <button type="button" onclick="closeEnrollModal()" class="btn-secondary-tailwind">Cancelar</button>
                    <button type="submit" class="btn-indigo-tailwind">Inscribir</button>
                </div>
            </form>
        </div>
    </div>
</div>
<!-- Modal de confirmación de desinscripción -->
<x-desinscribir-modal title="Desinscribir de este curso" />
@endsection

@push('scripts')
<script>
    const enrollModal = document.getElementById('enrollModal');
    const enrollForm = document.getElementById('enrollForm');
    const cursoSelect = document.getElementById('curso_id_select');

    function openEnrollModal(alumnoId) {
        if (!enrollModal || !enrollForm || !cursoSelect) {
            console.error("Elementos del modal de inscripción no encontrados.");
            return;
        }

        // Establecer la acción del formulario
        const actionUrl = `{{ route('admin.alumnos.cursos.inscribir', ['alumno' => ':id']) }}`.replace(':id', alumnoId);
        enrollForm.action = actionUrl;

        // Limpiar y mostrar "cargando" en el select
        cursoSelect.innerHTML = '<option value="">Cargando cursos...</option>';
        cursoSelect.disabled = true;

        // Mostrar el modal
        enrollModal.classList.remove('hidden');

        // Obtener los cursos disponibles vía AJAX
        const cursosDisponiblesUrl = `{{ route('admin.alumnos.cursos.disponibles', ['alumno' => ':id']) }}`.replace(':id', alumnoId);
        fetch(cursosDisponiblesUrl)
            .then(response => response.json())
            .then(data => {
                cursoSelect.innerHTML = '<option value="" disabled selected>Selecciona un curso</option>'; // Opción por defecto
                if (data.length > 0) {
                    data.forEach(curso => {
                        const option = document.createElement('option');
                        option.value = curso.id;
                        option.textContent = curso.nombre;
                        cursoSelect.appendChild(option);
                    });
                } else {
                     cursoSelect.innerHTML = '<option value="">No hay cursos disponibles para este alumno</option>';
                }
                cursoSelect.disabled = false;
            })
            .catch(error => {
                console.error('Error al cargar los cursos:', error);
                cursoSelect.innerHTML = '<option value="">Error al cargar cursos</option>';
            });
    }

    function closeEnrollModal() {
        if (enrollModal) {
            enrollModal.classList.add('hidden');
        }
    }

    function printProfile() {
       window.print();
   }
   
   function exportProfile() {
       // Puedes implementar la funcionalidad de exportación PDF aquí
       alert('Funcionalidad de exportación a PDF a implementar');
   }
    
</script>
@endpush
</file>

<file path="resources/views/admin/cursos/create.blade.php">
@extends('layouts.admin')

@section('title', 'Añadir Nuevo Curso')
@section('page-title', 'Añadir Nuevo Curso')

@section('content')
<div class="max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
    @if ($errors->any())
        <div class="mb-6 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg shadow-sm">
            <strong class="font-bold">¡Atención! Por favor, corrige los errores:</strong>
            <ul class="mt-2 list-disc list-inside text-sm">
                @foreach ($errors->all() as $error)
                    <li>{{ $error }}</li>
                @endforeach
            </ul>
        </div>
    @endif

    <form method="POST" action="{{ route('admin.cursos.store') }}" class="space-y-8">
        @csrf

        {{-- Sección Información Principal del Curso --}}
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
            <div class="bg-gradient-to-r from-blue-50 to-indigo-50 px-6 py-4 border-b border-gray-200">
                <h2 class="text-lg font-semibold text-gray-900">Información Principal del Curso</h2>
            </div>
            <div class="p-6 space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="space-y-1">
                        <label for="nombre" class="block text-sm font-medium text-gray-700">Nombre del Curso <span class="text-red-500">*</span></label>
                        <input type="text" name="nombre" id="nombre" value="{{ old('nombre') }}" required
                               class="w-full px-4 py-2.5 border {{ $errors->has('nombre') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                        @error('nombre') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="space-y-1">
                        <label for="codigo" class="block text-sm font-medium text-gray-700">Código del Curso</label>
                        <input type="text" name="codigo" id="codigo" value="{{ old('codigo') }}"
                               class="w-full px-4 py-2.5 border {{ $errors->has('codigo') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors"
                               placeholder="Ej: DWFS01">
                        @error('codigo') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                </div>
                <div class="space-y-1">
                    <label for="descripcion" class="block text-sm font-medium text-gray-700">Descripción</label>
                    <textarea name="descripcion" id="descripcion" rows="4"
                              class="w-full px-4 py-2.5 border {{ $errors->has('descripcion') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors resize-none">{{ old('descripcion') }}</textarea>
                    @error('descripcion') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                </div>
            </div>
        </div>

        {{-- Sección Detalles del Curso --}}
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
            <div class="bg-gradient-to-r from-green-50 to-emerald-50 px-6 py-4 border-b border-gray-200">
                <h2 class="text-lg font-semibold text-gray-900">Detalles del Curso</h2>
            </div>
            <div class="p-6 space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div class="space-y-1">
                        <label for="modalidad" class="block text-sm font-medium text-gray-700">Modalidad <span class="text-red-500">*</span></label>
                        {{-- Si usas opciones fijas o pasadas desde el controlador como $opcionesModalidad --}}
                        <select name="modalidad" id="modalidad" required class="w-full px-4 py-2.5 border {{ $errors->has('modalidad') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                            <option value="" disabled {{ old('modalidad') ? '' : 'selected' }}>Seleccionar modalidad...</option>
                            <option value="Online" {{ old('modalidad') == 'Online' ? 'selected' : '' }}>Online</option>
Use code with caution.
Blade
_500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors" />
<option value="Presencial" {{ old('modalidad') == 'Presencial' ? 'selected' : '' }}>Presencial</option>
<option value="Semipresencial (Blended)" {{ old('modalidad') == 'Semipresencial (Blended)' ? 'selected' : '' }}>Semipresencial (Blended)</option>
</select>
@error('modalidad') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
</div>
<div class="space-y-1">
<label for="nivel" class="block text-sm font-medium text-gray-700">Nivel</label>
<input type="text" name="nivel" id="nivel" value="{{ old('nivel') }}"
class="w-full px-4 py-2.5 border {{ $errors->has('nivel') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
@error('nivel') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
</div>
<div class="space-y-1">
<label for="profesor_id" class="block text-sm font-medium text-gray-700">Profesor Asignado <span class="text-red-500">*</span></label>
<select name="profesor_id" id="profesor_id" required
class="w-full px-4 py-2.5 border {{ $errors->has('profesor_id') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
<option value="" disabled {{ old('profesor_id') ? '' : 'selected' }}>Seleccionar profesor...</option>
@foreach($profesores as $profesor)
<option value="{{ $profesor->id }}" {{ old('profesor_id') == $profesor->id ? 'selected' : '' }}>
{{ $profesor->nombre }} {{ $profesor->apellido1 }}
</option>
@endforeach
</select>
@error('profesor_id') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
</div>
</div>
<div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div class="space-y-1">
                        <label for="fecha_inicio" class="block text-sm font-medium text-gray-700">Fecha de Inicio</label>
                        <input type="date" name="fecha_inicio" id="fecha_inicio" value="{{ old('fecha_inicio') }}"
                               class="w-full px-4 py-2.5 border {{ $errors->has('fecha_inicio') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                        @error('fecha_inicio') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="space-y-1">
                        <label for="fecha_fin" class="block text-sm font-medium text-gray-700">Fecha de Fin</label>
                        <input type="date" name="fecha_fin" id="fecha_fin" value="{{ old('fecha_fin') }}"
                               class="w-full px-4 py-2.5 border {{ $errors->has('fecha_fin') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                        @error('fecha_fin') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="space-y-1">
                        <label for="horas_totales" class="block text-sm font-medium text-gray-700">Horas Totales</label>
                        <input type="number" name="horas_totales" id="horas_totales" value="{{ old('horas_totales') }}" min="1"
                               class="w-full px-4 py-2.5 border {{ $errors->has('horas_totales') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                        @error('horas_totales') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                     <div class="space-y-1">
                        <label for="horario" class="block text-sm font-medium text-gray-700">Horario</label>
                        <input type="text" name="horario" id="horario" value="{{ old('horario') }}"
                               class="w-full px-4 py-2.5 border {{ $errors->has('horario') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors"
                               placeholder="Ej: L-V 09:00-13:00">
                        @error('horario') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="space-y-1">
                        <label for="plazas_maximas" class="block text-sm font-medium text-gray-700">Plazas Máximas <span class="text-red-500">*</span></label>
                        <input type="number" name="plazas_maximas" id="plazas_maximas" value="{{ old('plazas_maximas', 20) }}" required min="1"
                               class="w-full px-4 py-2.5 border {{ $errors->has('plazas_maximas') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                        @error('plazas_maximas') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                </div>
                 <div class="space-y-1">
                    <label for="requisitos" class="block text-sm font-medium text-gray-700">Requisitos</label>
                    <textarea name="requisitos" id="requisitos" rows="3"
                              class="w-full px-4 py-2.5 border {{ $errors->has('requisitos') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors resize-none">{{ old('requisitos') }}</textarea>
                    @error('requisitos') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                </div>
                <div class="space-y-1">
                    <label for="centros" class="block text-sm font-medium text-gray-700">Centro(s) donde se imparte</label>
                    <input type="text" name="centros" id="centros" value="{{ old('centros') }}"
                           class="w-full px-4 py-2.5 border {{ $errors->has('centros') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors"
                           placeholder="Ej: Centro Principal, Aula Virtual">
                    @error('centros') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                </div>
            </div>
        </div>

        {{-- Botones de Acción --}}
        <div class="flex flex-col sm:flex-row justify-end gap-3 pt-4">
            <a href="{{ route('admin.cursos.index') }}"
               class="px-6 py-2.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors text-center">
                Cancelar
            </a>
            <button type="submit"
                    class="px-6 py-2.5 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-lg shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors">
                Guardar Curso
            </button>
        </div>
    </form>
</div>
Use code with caution.
</div>
@endsection
@push('scripts')
{{-- Incluir aquí JS para selectores de fecha o editores de texto enriquecido si los usas --}}
@endpush
</file>

<file path="resources/views/admin/cursos/edit.blade.php">
@extends('layouts.admin')

@section('title', 'Editar Curso: ' . $curso->nombre)
@section('page-title', 'Editar Curso')

@section('content')
<div class="max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
    {{-- Bloque para mostrar errores de validación generales --}}
    @if ($errors->any())
        <div class="mb-6 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg shadow-sm">
            <strong class="font-bold">¡Atención! Por favor, corrige los errores:</strong>
            <ul class="mt-2 list-disc list-inside text-sm">
                @foreach ($errors->all() as $error)
                    <li>{{ $error }}</li>
                @endforeach
            </ul>
        </div>
    @endif

    <form method="POST" action="{{ route('admin.cursos.update', $curso->id) }}" class="space-y-8">
        @csrf
        @method('PUT')

        {{-- Sección Información Principal del Curso --}}
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
            <div class="bg-gradient-to-r from-blue-50 to-indigo-50 px-6 py-4 border-b border-gray-200">
                <h2 class="text-lg font-semibold text-gray-900">Información Principal del Curso</h2>
            </div>
            <div class="p-6 space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="space-y-1">
                        <label for="nombre" class="block text-sm font-medium text-gray-700">Nombre del Curso <span class="text-red-500">*</span></label>
                        <input type="text" name="nombre" id="nombre" value="{{ old('nombre', $curso->nombre) }}" required
                               class="w-full px-4 py-2.5 border {{ $errors->has('nombre') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                        @error('nombre') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="space-y-1">
                        <label for="codigo" class="block text-sm font-medium text-gray-700">Código del Curso</label>
                        <input type="text" name="codigo" id="codigo" value="{{ old('codigo', $curso->codigo) }}"
                               class="w-full px-4 py-2.5 border {{ $errors->has('codigo') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors"
                               placeholder="Ej: DWFS01">
                        @error('codigo') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                </div>
                <div class="space-y-1">
                    <label for="descripcion" class="block text-sm font-medium text-gray-700">Descripción</label>
                    <textarea name="descripcion" id="descripcion" rows="4"
                              class="w-full px-4 py-2.5 border {{ $errors->has('descripcion') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors resize-none">{{ old('descripcion', $curso->descripcion) }}</textarea>
                    @error('descripcion') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                </div>
            </div>
        </div>

        {{-- Sección Detalles del Curso --}}
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
            <div class="bg-gradient-to-r from-green-50 to-emerald-50 px-6 py-4 border-b border-gray-200">
                 <h2 class="text-lg font-semibold text-gray-900">Detalles del Curso</h2>
            </div>
            <div class="p-6 space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div class="space-y-1">
                        <label for="modalidad" class="block text-sm font-medium text-gray-700">Modalidad <span class="text-red-500">*</span></label>
                        <select name="modalidad" id="modalidad" required class="w-full px-4 py-2.5 border {{ $errors->has('modalidad') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                            <option value="" disabled>Seleccionar modalidad...</option>
                            <option value="Online" {{ old('modalidad', $curso->modalidad) == 'Online' ? 'selected' : '' }}>Online</option>
                            <option value="Presencial" {{ old('modalidad', $curso->modalidad) == 'Presencial' ? 'selected' : '' }}>Presencial</option>
                            <option value="Semipresencial (Blended)" {{ old('modalidad', $curso->modalidad) == 'Semipresencial (Blended)' ? 'selected' : '' }}>Semipresencial (Blended)</option>
                        </select>
                        @error('modalidad') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="space-y-1">
                        <label for="nivel" class="block text-sm font-medium text-gray-700">Nivel</label>
                        <input type="text" name="nivel" id="nivel" value="{{ old('nivel', $curso->nivel) }}"
                               class="w-full px-4 py-2.5 border {{ $errors->has('nivel') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                        @error('nivel') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="space-y-1">
                        <label for="profesor_id" class="block text-sm font-medium text-gray-700">Profesor Asignado <span class="text-red-500">*</span></label>
                        <select name="profesor_id" id="profesor_id" required
                                class="w-full px-4 py-2.5 border {{ $errors->has('profesor_id') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                            <option value="" disabled>Seleccionar profesor...</option>
                            @foreach($profesores as $profesor) {{-- $profesores se pasa desde el método edit() del controlador --}}
                                <option value="{{ $profesor->id }}" {{ old('profesor_id', $curso->profesor_id) == $profesor->id ? 'selected' : '' }}>
                                    {{ $profesor->nombre }} {{ $profesor->apellido1 }}
                                </option>
                            @endforeach
                        </select>
                        @error('profesor_id') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div class="space-y-1">
                        <label for="fecha_inicio" class="block text-sm font-medium text-gray-700">Fecha de Inicio</label>
                        <input type="date" name="fecha_inicio" id="fecha_inicio" value="{{ old('fecha_inicio', $curso->fecha_inicio ? $curso->fecha_inicio->format('Y-m-d') : '') }}"
                               class="w-full px-4 py-2.5 border {{ $errors->has('fecha_inicio') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                        @error('fecha_inicio') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="space-y-1">
                        <label for="fecha_fin" class="block text-sm font-medium text-gray-700">Fecha de Fin</label>
                        <input type="date" name="fecha_fin" id="fecha_fin" value="{{ old('fecha_fin', $curso->fecha_fin ? $curso->fecha_fin->format('Y-m-d') : '') }}"
                               class="w-full px-4 py-2.5 border {{ $errors->has('fecha_fin') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                        @error('fecha_fin') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="space-y-1">
                        <label for="horas_totales" class="block text-sm font-medium text-gray-700">Horas Totales</label>
                        <input type="number" name="horas_totales" id="horas_totales" value="{{ old('horas_totales', $curso->horas_totales) }}" min="1"
                               class="w-full px-4 py-2.5 border {{ $errors->has('horas_totales') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                        @error('horas_totales') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                     <div class="space-y-1">
                        <label for="horario" class="block text-sm font-medium text-gray-700">Horario</label>
                        <input type="text" name="horario" id="horario" value="{{ old('horario', $curso->horario) }}"
                               class="w-full px-4 py-2.5 border {{ $errors->has('horario') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors"
                               placeholder="Ej: L-V 09:00-13:00">
                        @error('horario') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="space-y-1">
                        <label for="plazas_maximas" class="block text-sm font-medium text-gray-700">Plazas Máximas <span class="text-red-500">*</span></label>
                        <input type="number" name="plazas_maximas" id="plazas_maximas" value="{{ old('plazas_maximas', $curso->plazas_maximas) }}" required min="1"
                               class="w-full px-4 py-2.5 border {{ $errors->has('plazas_maximas') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                        @error('plazas_maximas') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                </div>

                 <div class="space-y-1">
                    <label for="requisitos" class="block text-sm font-medium text-gray-700">Requisitos</label>
                    <textarea name="requisitos" id="requisitos" rows="3"
                              class="w-full px-4 py-2.5 border {{ $errors->has('requisitos') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors resize-none">{{ old('requisitos', $curso->requisitos) }}</textarea>
                    @error('requisitos') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                </div>
                <div class="space-y-1">
                    <label for="centros" class="block text-sm font-medium text-gray-700">Centro(s) donde se imparte</label>
                    <input type="text" name="centros" id="centros" value="{{ old('centros', $curso->centros) }}"
                           class="w-full px-4 py-2.5 border {{ $errors->has('centros') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors"
                           placeholder="Ej: Centro Principal, Aula Virtual">
                    @error('centros') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                </div>
            </div>
        </div>

        {{-- Botones de Acción --}}
        <div class="flex flex-col sm:flex-row justify-end gap-3 pt-4">
            <a href="{{ route('admin.cursos.show', $curso->id) }}"
               class="px-6 py-2.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 text-center">
                Cancelar
            </a>
            <button type="submit"
                    class="px-6 py-2.5 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-lg shadow-sm hover:bg-indigo-700">
                Actualizar Curso
            </button>
        </div>
    </form>
</div>
@endsection

@push('scripts')
{{-- No se necesitan scripts específicos para la edición de cursos por ahora. --}}
    {{-- Aquí podrías añadir en el futuro:
        - Inicialización de un editor de texto enriquecido para 'descripcion' o 'requisitos'.
        - Librerías para selectores de fecha más avanzados si los inputs 'date' no son suficientes.
        - Validación en tiempo real del lado del cliente más compleja (aunque la del backend es la crucial).        
        - Inicialización de un editor WYSIWYG para <textarea name="descripcion">
        - Inicialización de un selector de fechas más avanzado (Datepicker)
    --}}
@endpush
</file>

<file path="resources/views/admin/cursos/index.blade.php">
@extends('layouts.admin')

@section('title', 'Gestión de Cursos')
@section('page-title', 'Gestión de Cursos')

@section('content')
    {{-- Mensajes Flash Mejorados --}}
    @if (session('success'))
        <div class="mb-8 px-6 py-4 rounded-2xl relative bg-gradient-to-r from-emerald-50 via-green-50 to-emerald-50 border border-emerald-200 text-emerald-800 shadow-lg shadow-emerald-100/50 animate-slideInDown" role="alert">
            <div class="flex items-start">
                <div class="flex-shrink-0 mt-0.5">
                    <div class="w-8 h-8 bg-emerald-500 rounded-full flex items-center justify-center shadow-sm">
                        <i class="bi bi-check-lg text-white text-sm font-bold"></i>
                    </div>
                </div>
                <div class="ml-4 flex-1">
                    <div class="text-sm font-semibold text-emerald-900">Operación exitosa</div>
                    <div class="mt-1 text-sm text-emerald-700">{{ session('success') }}</div>
                </div>
                <button type="button" onclick="this.parentElement.parentElement.remove()" 
                        class="flex-shrink-0 ml-4 p-1 rounded-full hover:bg-emerald-200 transition-colors">
                    <i class="bi bi-x text-emerald-600 text-lg"></i>
                </button>
            </div>
        </div>
    @endif
    
    @if (session('error'))
        <div class="mb-8 px-6 py-4 rounded-2xl relative bg-gradient-to-r from-red-50 via-rose-50 to-red-50 border border-red-200 text-red-800 shadow-lg shadow-red-100/50 animate-slideInDown" role="alert">
            <div class="flex items-start">
                <div class="flex-shrink-0 mt-0.5">
                    <div class="w-8 h-8 bg-red-500 rounded-full flex items-center justify-center shadow-sm">
                        <i class="bi bi-exclamation-lg text-white text-sm font-bold"></i>
                    </div>
                </div>
                <div class="ml-4 flex-1">
                    <div class="text-sm font-semibold text-red-900">Atención requerida</div>
                    <div class="mt-1 text-sm text-red-700">{{ session('error') }}</div>
                </div>
                <button type="button" onclick="this.parentElement.parentElement.remove()" 
                        class="flex-shrink-0 ml-4 p-1 rounded-full hover:bg-red-200 transition-colors">
                    <i class="bi bi-x text-red-600 text-lg"></i>
                </button>
            </div>
        </div>
    @endif

    
    {{-- KPIs Compactos con Diseño Premium --}}
    {{-- KPIs Compactos con Diseño Premium OPTIMIZADO --}}
<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4 mb-8">

{{-- Cursos Activos --}}
<div class="group relative overflow-hidden bg-gradient-to-br from-blue-50 via-white to-blue-50 p-4 rounded-2xl shadow-lg shadow-blue-100/25 border border-blue-100/50 hover:shadow-xl hover:shadow-blue-200/30 transition-all duration-300 hover:-translate-y-1 min-h-[120px]">
    <div class="absolute inset-0 bg-gradient-to-br from-transparent via-blue-50/30 to-blue-100/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
    <div class="relative z-10 flex h-full">
        {{-- Icono a la izquierda --}}
        <div class="flex-shrink-0 p-3 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl shadow-md shadow-blue-500/25 group-hover:shadow-blue-500/40 transition-all duration-300 group-hover:scale-105 h-fit">
            <i class="bi bi-journals text-xl text-white"></i>
        </div>
        
        {{-- Información organizada horizontalmente --}}
        <div class="flex-1 ml-4 flex flex-col justify-center">
            {{-- Fila única: Títulos a la izquierda, número y descripción a la derecha --}}
            <div class="flex justify-between items-start">
                {{-- Títulos --}}
                <div>
                    <div class="text-xs font-medium text-blue-600 uppercase tracking-wide">Cursos</div>
                    <div class="text-xs text-blue-500 font-medium">Activos</div>
                </div>
                {{-- Número principal con descripción debajo --}}
                <div class="text-right">
                    <div class="text-2xl font-bold text-gray-900 group-hover:text-blue-700 transition-colors">
                        {{ $totalCursosActivos ?? $cursos->total() }}
                    </div>
                    <div class="text-xs text-gray-600">
                        cursos disponibles
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

{{-- Media Alumnos --}}
<div class="group relative overflow-hidden bg-gradient-to-br from-emerald-50 via-white to-emerald-50 p-4 rounded-2xl shadow-lg shadow-emerald-100/25 border border-emerald-100/50 hover:shadow-xl hover:shadow-emerald-200/30 transition-all duration-300 hover:-translate-y-1 min-h-[120px]">
    <div class="absolute inset-0 bg-gradient-to-br from-transparent via-emerald-50/30 to-emerald-100/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
    <div class="relative z-10 flex h-full">
        {{-- Icono a la izquierda --}}
        <div class="flex-shrink-0 p-3 bg-gradient-to-br from-emerald-500 to-emerald-600 rounded-xl shadow-md shadow-emerald-500/25 group-hover:shadow-emerald-500/40 transition-all duration-300 group-hover:scale-105 h-fit">
            <i class="bi bi-people-fill text-xl text-white"></i>
        </div>
        
        {{-- Información organizada horizontalmente --}}
        <div class="flex-1 ml-4 flex flex-col justify-center">
            {{-- Fila única: Títulos a la izquierda, número y descripción a la derecha --}}
            <div class="flex justify-between items-start">
                {{-- Títulos --}}
                <div>
                    <div class="text-xs font-medium text-emerald-600 uppercase tracking-wide">Media</div>
                    <div class="text-xs text-emerald-500 font-medium">Alumnos/Curso</div>
                </div>
                {{-- Número principal con descripción debajo --}}
                <div class="text-right">
                    <div class="text-2xl font-bold text-gray-900 group-hover:text-emerald-700 transition-colors">
                        {{ $mediaAlumnosPorCurso ?? 'N/A' }}
                    </div>
                    <div class="text-xs text-gray-600">
                        estudiantes promedio
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

{{-- Modalidades --}}
<div class="group relative overflow-hidden bg-gradient-to-br from-purple-50 via-white to-purple-50 p-4 rounded-2xl shadow-lg shadow-purple-100/25 border border-purple-100/50 hover:shadow-xl hover:shadow-purple-200/30 transition-all duration-300 hover:-translate-y-1 min-h-[120px]">
    <div class="absolute inset-0 bg-gradient-to-br from-transparent via-purple-50/30 to-purple-100/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
    <div class="relative z-10 flex h-full">
        {{-- Icono a la izquierda --}}
        <div class="flex-shrink-0 p-3 bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl shadow-md shadow-purple-500/25 group-hover:shadow-purple-500/40 transition-all duration-300 group-hover:scale-105 h-fit">
            <i class="bi bi-intersect text-xl text-white"></i>
        </div>
        
        {{-- Información organizada horizontalmente --}}
        <div class="flex-1 ml-4 flex flex-col justify-center">
            {{-- Fila única: Títulos a la izquierda, número y descripción a la derecha --}}
            <div class="flex justify-between items-start">
                {{-- Títulos --}}
                <div>
                    <div class="text-xs font-medium text-purple-600 uppercase tracking-wide">Modalidades</div>
                    <div class="text-xs text-purple-500 font-medium">Disponibles</div>
                </div>
                {{-- Número principal con descripción debajo --}}
                <div class="text-right">
                    <div class="text-2xl font-bold text-gray-900 group-hover:text-purple-700 transition-colors">
                        {{ $opcionesModalidad->count() }}
                    </div>
                    <div class="text-xs text-gray-600">
                        tipos de enseñanza
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

{{-- Profesores --}}
<div class="group relative overflow-hidden bg-gradient-to-br from-amber-50 via-white to-amber-50 p-4 rounded-2xl shadow-lg shadow-amber-100/25 border border-amber-100/50 hover:shadow-xl hover:shadow-amber-200/30 transition-all duration-300 hover:-translate-y-1 min-h-[120px]">
    <div class="absolute inset-0 bg-gradient-to-br from-transparent via-amber-50/30 to-amber-100/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
    <div class="relative z-10 flex h-full">
        {{-- Icono a la izquierda --}}
        <div class="flex-shrink-0 p-3 bg-gradient-to-br from-amber-500 to-amber-600 rounded-xl shadow-md shadow-amber-500/25 group-hover:shadow-amber-500/40 transition-all duration-300 group-hover:scale-105 h-fit">
            <i class="bi bi-person-video3 text-xl text-white"></i>
        </div>
        
        {{-- Información organizada horizontalmente --}}
        <div class="flex-1 ml-4 flex flex-col justify-center">
            {{-- Fila única: Títulos a la izquierda, número y descripción a la derecha --}}
            <div class="flex justify-between items-start">
                {{-- Títulos --}}
                <div>
                    <div class="text-xs font-medium text-amber-600 uppercase tracking-wide">Profesores</div>
                    <div class="text-xs text-amber-500 font-medium">Asignados</div>
                </div>
                {{-- Número principal con descripción debajo --}}
                <div class="text-right">
                    <div class="text-2xl font-bold text-gray-900 group-hover:text-amber-700 transition-colors">
                        {{ $opcionesProfesores->count() }}
                    </div>
                    <div class="text-xs text-gray-600">
                        docentes activos
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</div>



    {{-- Panel de Filtros Compacto --}}
<div class="bg-gradient-to-r from-white via-gray-50/50 to-white rounded-2xl shadow-lg shadow-gray-200/50 border border-gray-200/50 p-4 mb-8 backdrop-blur-sm">
    <form method="GET" action="{{ route('admin.cursos.index') }}" id="filterFormCursos">
        <div class="flex flex-col xl:flex-row justify-between items-start xl:items-center gap-5">
            {{-- Controles de Filtrado --}}
            <div class="flex flex-col lg:flex-row items-stretch lg:items-center gap-4 w-full xl:w-auto">
                {{-- Buscador Compacto --}}
                <div class="relative group">
                    <div class="absolute inset-y-0 left-0 flex items-center pl-4 pointer-events-none z-10">
                        <i class="bi bi-search text-gray-400 group-focus-within:text-indigo-500 transition-colors duration-200"></i>
                    </div>
                    <input type="text" name="search" id="searchCursos"
                           class="block w-full lg:w-96 pl-10 pr-10 py-4 text-sm border-2 border-gray-200 rounded-xl bg-gray-50/50 placeholder-gray-400 focus:outline-none focus:ring-3 focus:ring-indigo-500/20 focus:border-indigo-500 focus:bg-white transition-all duration-300 shadow-inner hover:border-gray-300"
                           placeholder="Buscar cursos por nombre o código..." 
                           value="{{ $searchTerm ?? '' }}" 
                           autocomplete="off">
                    @if($searchTerm)
                        <button type="button" 
                                onclick="document.getElementById('searchCursos').value=''; document.getElementById('filterFormCursos').submit();" 
                                class="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-red-500 transition-colors duration-200 z-10">
                            <i class="bi bi-x-circle-fill"></i>
                        </button>
                    @endif
                </div>
                
                {{-- Selectores Compactos --}}
                <div class="flex flex-col sm:flex-row gap-3">
                    {{-- Filtro Modalidad --}}
                    <div class="relative group">
                        <select name="modalidad" id="modalidad_filtro" onchange="this.form.submit()"
                                class="block w-full sm:w-54 rounded-xl border-2 border-gray-200 bg-gray-50/50 px-4 py-4 text-sm focus:outline-none focus:ring-3 focus:ring-indigo-500/20 focus:border-indigo-500 focus:bg-white transition-all duration-300 appearance-none cursor-pointer hover:border-gray-300 shadow-inner">
                            <option value="">🎯 Todas las Modalidades</option>
                            @foreach ($opcionesModalidad as $modalidad)
                                <option value="{{ $modalidad }}" {{ ($filtroModalidad == $modalidad) ? 'selected' : '' }}>
                                    {{ $modalidad == 'Online' ? '💻' : ($modalidad == 'Presencial' ? '🏫' : '🔄') }} {{ $modalidad }}
                                </option>
                            @endforeach
                        </select>
                        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                            <i class="bi bi-chevron-down text-gray-400 group-hover:text-gray-600 transition-colors"></i>
                        </div>
                    </div>

                    {{-- Filtro Profesor --}}
                    <div class="relative group">
                        <select name="profesor_id" id="profesor_filtro" onchange="this.form.submit()"
                                class="block w-full sm:w-52 rounded-xl border-2 border-gray-200 bg-gray-50/50 px-4 py-4 text-sm focus:outline-none focus:ring-3 focus:ring-indigo-500/20 focus:border-indigo-500 focus:bg-white transition-all duration-300 appearance-none cursor-pointer hover:border-gray-300 shadow-inner">
                            <option value="">👨‍🏫 Todos los Profesores</option>
                            @foreach ($opcionesProfesores as $profesor)
                                <option value="{{ $profesor->id }}" {{ ($filtroProfesor == $profesor->id) ? 'selected' : '' }}>
                                    {{ $profesor->nombre }} {{ $profesor->apellido1 }}
                                </option>
                            @endforeach
                        </select>
                        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                            <i class="bi bi-chevron-down text-gray-400 group-hover:text-gray-600 transition-colors"></i>
                        </div>
                    </div>

                    {{-- Botón Limpiar Filtros --}}
                    @if($searchTerm || $filtroModalidad || $filtroProfesor)
                        <button type="button" 
                                onclick="window.location.href='{{ route('admin.cursos.index') }}'"
                                class="inline-flex items-center justify-center px-4 py-4 text-sm font-medium rounded-xl text-gray-600 bg-gray-100 border-2 border-gray-200 hover:bg-gray-200 hover:border-gray-300 focus:outline-none focus:ring-3 focus:ring-gray-500/20 transition-all duration-300 shadow-inner hover:shadow-lg"
                                title="Limpiar todos los filtros">
                            <i class="bi bi-arrow-clockwise mr-2"></i>
                            Limpiar
                        </button>
                    @endif
                </div>
            </div>
            
            {{-- Botón Nuevo Curso Compacto --}}
            <div class="flex-shrink-0 w-full sm:w-auto">
                <a href="{{ route('admin.cursos.create') }}" 
                   class="group w-full sm:w-auto inline-flex items-center justify-center px-6 py-4 border-2 border-transparent shadow-lg text-sm font-bold rounded-xl text-white bg-gradient-to-r from-indigo-600 via-indigo-700 to-purple-700 hover:from-indigo-700 hover:via-indigo-800 hover:to-purple-800 focus:outline-none focus:ring-3 focus:ring-indigo-500/30 transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-indigo-500/25">
                    <i class="bi bi-plus-lg mr-2 group-hover:scale-110 transition-transform duration-200"></i> 
                    Nuevo Curso
                </a>
            </div>
        </div>
        
        {{-- Información de Resultados Compacta --}}
        @if($cursos->total() > 0)
            <div class="mt-5 pt-4 border-t border-gray-200/50">
                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
                    <p class="text-xs text-gray-600 bg-gray-50 px-3 py-2 rounded-lg border border-gray-200/50">
                        <i class="bi bi-info-circle mr-1 text-blue-500"></i>
                        Mostrando <span class="font-semibold text-gray-900">{{ $cursos->firstItem() }}-{{ $cursos->lastItem() }}</span> 
                        de <span class="font-semibold text-gray-900">{{ $cursos->total() }}</span> cursos
                    </p>
                    @if($searchTerm || $filtroModalidad || $filtroProfesor) 
                        <span class="px-3 py-2 bg-gradient-to-r from-indigo-100 to-purple-100 text-indigo-800 rounded-lg text-xs font-semibold border border-indigo-200/50 shadow-sm">
                            <i class="bi bi-funnel mr-1"></i>Filtros activos
                        </span>
                    @endif
                </div>
            </div>
        @endif
    </form>
</div>


    {{-- Tabla Premium Responsive --}}
<div class="bg-white rounded-3xl shadow-2xl shadow-gray-200/50 border border-gray-200/100 overflow-hidden backdrop-blur-sm">
    {{-- Wrapper con scroll horizontal suave --}}
    <div class="overflow-x-auto scrollbar-thin scrollbar-thumb-indigo-300 scrollbar-track-gray-100">
        <div class="min-w-full inline-block align-middle">
        <table class="min-w-full divide-y divide-gray-100 border-collapse border border-gray-200/30">
    <thead class="bg-gradient-to-r from-gray-50 via-gray-100 to-gray-50">
        <tr>
            {{-- Columna Curso - Con borde ligero --}}
            <th scope="col" class="sticky left-0 z-20 bg-gray-15000 px-4 py-4 text-left text-xs font-bold text-gray-700 uppercase tracking-wider border-b border-gray-200/50 border-r border-gray-200/30 min-w-[280px]">
                <div class="flex items-center space-x-2">
                    <i class="bi bi-book text-gray-500"></i>
                    <span>Curso</span>
                </div>
            </th>
            
            {{-- Código - Con borde ligero --}}
            <th scope="col" class="hidden sm:table-cell px-4 py-4 text-left text-xs font-bold text-gray-700 uppercase tracking-wider border-b border-gray-200/50 border-r border-gray-200/30 min-w-[120px]">
                <div class="flex items-center space-x-2">
                    <i class="bi bi-hash text-gray-500"></i>
                    <span>Código</span>
                </div>
            </th>
            
            {{-- Modalidad - Con borde ligero --}}
            <th scope="col" class="hidden md:table-cell px-4 py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider border-b border-gray-200/50 border-r border-gray-200/30 min-w-[130px]">
                <div class="flex items-center space-x-2">
                    <i class="bi bi-intersect text-gray-500"></i>
                    <span>Modalidad</span>
                </div>
            </th>
            
            {{-- Profesor - Con borde ligero --}}
            <th scope="col" class="hidden lg:table-cell px-4 py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider border-b border-gray-200/50 border-r border-gray-200/30 min-w-[180px]">
                <div class="flex items-center space-x-2">
                    <i class="bi bi-person-video3 text-gray-500"></i>
                    <span>Profesor</span>
                </div>
            </th>
            
            {{-- Inscritos - Con borde ligero --}}
            <th scope="col" class="hidden sm:table-cell px-4 py-3 text-center text-xs font-bold text-gray-700 uppercase tracking-wider border-b border-gray-200/50 border-r border-gray-200/30 min-w-[100px]">
                <div class="flex items-center justify-center space-x-2">
                    <i class="bi bi-people text-gray-500"></i>
                    <span>Inscritos</span>
                </div>
            </th>
            
            {{-- Fechas - Con borde ligero --}}
            <th scope="col" class="hidden xl:table-cell px-4 py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider border-b border-gray-200/50 border-r border-gray-200/30 min-w-[140px]">
                <div class="flex items-center space-x-2">
                    <i class="bi bi-calendar-range text-gray-500"></i>
                    <span>Fechas</span>
                </div>
            </th>
            
            {{-- Plazas - Con borde ligero --}}
            <th scope="col" class="hidden lg:table-cell px-4 py-3 text-center text-xs font-bold text-gray-700 uppercase tracking-wider border-b border-gray-200/50 border-r border-gray-200/30 min-w-[100px]">
                <div class="flex items-center justify-center space-x-2">
                    <i class="bi bi-diagram-3 text-gray-500"></i>
                    <span>Plazas</span>
                </div>
            </th>
            
            {{-- Acciones - Sin borde derecho --}}
            <th scope="col" class="sticky right-0 z-20 bg-gray-150 px-4 py-3 text-center text-xs font-bold text-gray-700 uppercase tracking-wider border-b border-gray-200/50 min-w-[140px]">
                <div class="flex items-center justify-center space-x-2">
                    <i class="bi bi-gear text-gray-500"></i>
                    <span>Acciones</span>
                </div>
            </th>
        </tr>
    </thead>
    
    <tbody class="bg-white divide-y divide-gray-100/60">
        @forelse ($cursos as $index => $curso)
            <tr class="hover:bg-gradient-to-r hover:from-blue-50/30 hover:via-transparent hover:to-blue-50/30 transition-all duration-300 group border-b border-gray-100/50 {{ $index % 2 == 0 ? 'bg-gray-50/20' : 'bg-white' }}">
                
                {{-- Información del Curso - Con bordes ligeros --}}
                <td class="sticky left-0 z-10 bg-white group-hover:bg-blue-50/30 px-4 py-3 border-r border-gray-200/30 border-b border-gray-100/50">
                    <div class="space-y-1.5">
                        {{-- Título del curso --}}
                        <div class="text-sm font-bold text-gray-900 group-hover:text-indigo-700 transition-colors duration-200 line-clamp-2 max-w-[220px] leading-tight">
                            {{ Str::limit($curso->nombre, 60) }}
                        </div>
                        
                        {{-- Descripción --}}
                        <div class="text-xs text-gray-600 max-w-[220px] line-clamp-1">
                            {{ Str::limit($curso->descripcion, 45) }}
                        </div>
                        
                        {{-- Información adicional para móvil --}}
                        <div class="sm:hidden space-y-1 pt-1.5 border-t border-gray-100">
                            {{-- Código en móvil --}}
                            <div class="flex items-center space-x-2">
                                <span class="text-xs text-gray-500 font-semibold">Código:</span>
                                <code class="text-xs font-mono bg-gray-100 px-2 py-1 rounded">{{ $curso->codigo }}</code>
                            </div>
                            
                            {{-- Modalidad en móvil --}}
                            <div class="flex items-center space-x-2">
                                <span class="text-xs text-gray-500 font-semibold">Modalidad:</span>
                                <span class="inline-flex items-center px-2 py-1 text-xs font-medium rounded-full
                                    {{ $curso->modalidad == 'Online' ? 'bg-sky-100 text-sky-800' : 
                                       ($curso->modalidad == 'Presencial' ? 'bg-emerald-100 text-emerald-800' : 
                                        'bg-purple-100 text-purple-800') }}">
                                    @if($curso->modalidad == 'Online')
                                        <i class="bi bi-laptop mr-1"></i>
                                    @elseif($curso->modalidad == 'Presencial')
                                        <i class="bi bi-building mr-1"></i>
                                    @else
                                        <i class="bi bi-arrow-repeat mr-1"></i>
                                    @endif
                                    {{ $curso->modalidad }}
                                </span>
                            </div>
                            
                            {{-- Inscritos en móvil --}}
                            <div class="flex items-center space-x-2">
                                <span class="text-xs text-gray-500 font-semibold">Inscritos:</span>
                                <span class="inline-flex items-center justify-center w-6 h-6 bg-blue-500 text-white rounded-full text-xs font-bold">
                                    {{ $curso->alumnos_count }}
                                </span>
                            </div>
                        </div>
                    </div>
                </td>
                
                {{-- Código - Con bordes ligeros --}}
                <td class="hidden sm:table-cell px-4 py-3 whitespace-nowrap border-r border-gray-200/30 border-b border-gray-100/50">
                    <div class="inline-flex items-center px-3 py-1.5 rounded-xl bg-gray-100 border border-gray-200/50">
                        <code class="text-sm font-mono font-semibold text-gray-800">{{ $curso->codigo }}</code>
                    </div>
                </td>
                
                {{-- Modalidad - Con bordes ligeros --}}
                <td class="hidden md:table-cell px-4 py-3 whitespace-nowrap border-r border-gray-200/30 border-b border-gray-100/50">
                    <span class="inline-flex items-center px-4 py-1.5 text-sm font-bold rounded-xl shadow-sm
                        {{ $curso->modalidad == 'Online' ? 'bg-gradient-to-r from-sky-100 to-blue-100 text-sky-800 border border-sky-200' : 
                           ($curso->modalidad == 'Presencial' ? 'bg-gradient-to-r from-emerald-100 to-green-100 text-emerald-800 border border-emerald-200' : 
                            'bg-gradient-to-r from-purple-100 to-fuchsia-100 text-purple-800 border border-purple-200') }}">
                        @if($curso->modalidad == 'Online')
                            <i class="bi bi-laptop mr-2"></i>
                        @elseif($curso->modalidad == 'Presencial')
                            <i class="bi bi-building mr-2"></i>
                        @else
                            <i class="bi bi-arrow-repeat mr-2"></i>
                        @endif
                        {{ $curso->modalidad }}
                    </span>
                </td>
                
                {{-- Profesor - Con bordes ligeros --}}
                <td class="hidden lg:table-cell px-4 py-3 whitespace-nowrap border-r border-gray-200/30 border-b border-gray-100/50">
                    <div class="flex items-center space-x-3">
                        <div class="w-7 h-7 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-full flex items-center justify-center shadow-lg">
                            <span class="text-white text-xs font-bold">
                                {{ substr($curso->profesor->nombre ?? 'N', 0, 1) }}{{ substr($curso->profesor->apellido1 ?? 'A', 0, 1) }}
                            </span>
                        </div>
                        <div class="max-w-[120px]">
                            <div class="text-sm font-semibold text-gray-900 truncate">
                                {{ $curso->profesor->nombre ?? 'Sin asignar' }} {{ $curso->profesor->apellido1 ?? '' }}
                            </div>
                        </div>
                    </div>
                </td>
                
                {{-- Alumnos Inscritos - Con bordes ligeros --}}
<td class="hidden sm:table-cell px-4 py-3 whitespace-nowrap text-center border-r border-gray-200/30 border-b border-gray-100/50">
    <div class="inline-flex items-center justify-center">
        <div class="relative">
            <div class="w-8 h-8 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg shadow-blue-500/25 group-hover:shadow-blue-500/40 transition-all duration-300">
                <span class="text-white text-sm font-bold">{{ $curso->alumnos_count }}</span>
            </div>
            @if($curso->alumnos_count > 0)
                <div class="absolute -top-0.5 -right-0.5 w-2.5 h-2.5 bg-green-500 rounded-full border-2 border-white shadow-sm"></div>
            @endif
        </div>
    </div>
</td>

                
                {{-- Fechas - Con bordes ligeros --}}
                <td class="hidden xl:table-cell px-4 py-3 whitespace-nowrap border-r border-gray-200/30 border-b border-gray-100/50">
                    <div class="space-y-0.5">
                        <div class="flex items-center text-sm text-gray-700">
                            <i class="bi bi-calendar-event mr-2 text-green-600"></i>
                            {{ $curso->fecha_inicio ? $curso->fecha_inicio->format('d/m/Y') : 'No definida' }}
                        </div>
                        <div class="flex items-center text-sm text-gray-700">
                            <i class="bi bi-calendar-x mr-2 text-red-600"></i>
                            {{ $curso->fecha_fin ? $curso->fecha_fin->format('d/m/Y') : 'No definida' }}
                        </div>
                    </div>
                </td>
                
                {{-- Plazas - Con bordes ligeros --}}
<td class="hidden lg:table-cell px-4 py-3 whitespace-nowrap text-center border-r border-gray-200/30 border-b border-gray-100/50">
    <div class="inline-flex items-center px-2 py-1 rounded-lg bg-orange-100 border border-orange-200/50">
        <span class="text-sm font-semibold text-orange-800">{{ $curso->plazas_maximas }}</span>
        <span class="text-xs text-orange-600 ml-1">plazas</span>
    </div>
</td>

                
{{-- Acciones - Solo borde inferior --}}
<td class="sticky right-0 z-10 bg-white group-hover:bg-blue-50/30 px-3 py-2 whitespace-nowrap text-center border-b border-gray-100/50">
    <div class="flex items-center justify-center space-x-3">
        {{-- Ver --}}
        <a href="{{ route('admin.cursos.show', $curso->id) }}"
           class="group/action p-1 rounded-md bg-blue-100 text-blue-600 hover:bg-blue-600 hover:text-white transition-all duration-300 hover:scale-110 hover:shadow-lg hover:shadow-blue-500/25"
           title="Ver detalles del curso">
            <i class="bi bi-eye-fill w-4 h-4 group-hover/action:scale-110 transition-transform"></i>
        </a>
        
        {{-- Editar --}}
        <a href="{{ route('admin.cursos.edit', $curso->id) }}" 
           class="group/action p-1 rounded-md bg-indigo-100 text-indigo-600 hover:bg-indigo-600 hover:text-white transition-all duration-300 hover:scale-110 hover:shadow-lg hover:shadow-indigo-500/25"
           title="Editar curso">
            <i class="bi bi-pencil-fill w-4 h-4 group-hover/action:scale-110 transition-transform"></i>
        </a>
        
        {{-- Eliminar (con modal) --}}
            <button type="button"
                    onclick="confirmDelete(
                        '{{ route('admin.cursos.destroy', $curso->id) }}',
                        '{{ addslashes($curso->nombre) }}'
                    )"
                    class="group/action p-1 rounded-md bg-red-100 text-red-600 hover:bg-red-600
                        hover:text-white transition-all duration-300 hover:scale-110 hover:shadow-lg
                        hover:shadow-red-500/25"
                    title="Eliminar curso">
                <i class="bi bi-trash-fill w-4 h-4 group-hover/action:scale-110 transition-transform"></i>
            </button>

    </div>
</td>


            </tr>
        @empty
            {{-- Estado vacío sin cambios --}}
            <tr>
                <td colspan="8" class="px-8 py-16 text-center border-b border-gray-100/50">
                    {{-- Contenido del estado vacío igual que antes --}}
                </td>
            </tr>
        @endforelse
    </tbody>
</table>

        </div>
    </div>
</div>


    {{-- Paginación Premium --}}
    @if ($cursos->hasPages())
        <div class="mt-4 bg-gradient-to-r from-white via-gray-50/50 to-white rounded-3xl shadow-2xl shadow-gray-200/50 border border-gray-200/50 p-4 backdrop-blur-sm">
            <div class="flex flex-col sm:flex-row items-center justify-between gap-6">
                <div class="flex items-center space-x-4">
                    <div class="flex items-center px-4 py-2 bg-indigo-50 rounded-xl border border-indigo-200/50">
                        <i class="bi bi-file-earmark-text text-indigo-600 mr-2"></i>
                        <span class="text-sm font-medium text-indigo-800">
                            Página {{ $cursos->currentPage() }} de {{ $cursos->lastPage() }}
                        </span>
                    </div>
                    <div class="text-sm text-gray-600">
                        ({{ $cursos->total() }} cursos en total)
                    </div>
                </div>
                <div class="flex-shrink-0">
                    {{ $cursos->appends(request()->query())->links('vendor.pagination.tailwind') }}
                </div>
            </div>
        </div>
    @endif

<!-- Modal de confirmación de eliminación -->
<x-delete-modal title="Eliminar curso" />
@endsection

@push('styles')
<style>
    /* Animaciones personalizadas */
    @keyframes slideInDown {
        from { opacity: 0; transform: translate3d(0, -100%, 0); }
        to { opacity: 1; transform: translate3d(0, 0, 0); }
    }
    
    .animate-slideInDown {
        animation: slideInDown 0.6s ease-out;
    }
    
    /* Suavizado para transiciones */
    * {
        scroll-behavior: smooth;
    }
    
    /* Estilos personalizados para selectores */
    select option {
        padding: 12px;
        background-color: white;
        color: #374151;
    }
    
    select option:checked {
        background-color: #e0e7ff;
        color: #3730a3;
    }
    
    /* Efectos de hover para las filas de tabla */
    tbody tr:hover {
        transform: translateX(1px);
    }
    
    /* Estilos para scrollbar */
    .overflow-x-auto::-webkit-scrollbar {
        height: 8px;
    }
    
    .overflow-x-auto::-webkit-scrollbar-track {
        background: #f1f5f9;
        border-radius: 10px;
    }
    
    .overflow-x-auto::-webkit-scrollbar-thumb {
        background: linear-gradient(90deg, #6366f1, #8b5cf6);
        border-radius: 10px;
    }
    
    .overflow-x-auto::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(90deg, #4f46e5, #7c3aed);
    }
</style>
@endpush

@push('scripts')
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Auto-dismiss para mensajes flash después de 5 segundos
    const flashMessages = document.querySelectorAll('[role="alert"]');
    flashMessages.forEach(message => {
        setTimeout(() => {
            if (message.parentElement) {
                message.style.transform = 'translateX(100%)';
                message.style.opacity = '0';
                setTimeout(() => message.remove(), 300);
            }
        }, 5000);
    });
    
    // Mejorar la experiencia de búsqueda
    const searchInput = document.getElementById('searchCursos');
    if (searchInput) {
        let searchTimeout;
        searchInput.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            // Auto-submit después de 1 segundo de inactividad
            searchTimeout = setTimeout(() => {
                document.getElementById('filterFormCursos').submit();
            }, 1000);
        });
        
        // Limpiar con Escape
        searchInput.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                this.value = '';
                document.getElementById('filterFormCursos').submit();
            }
        });
    }
    
    // Tooltips para botones de acción
    const actionButtons = document.querySelectorAll('[title]');
    actionButtons.forEach(button => {
        button.addEventListener('mouseenter', function() {
            // Aquí podrías agregar tooltips personalizados si lo deseas
        });
    });
    
    // Efecto de carga suave para la página
    document.body.style.opacity = '0';
    setTimeout(() => {
        document.body.style.transition = 'opacity 0.5s ease-in-out';
        document.body.style.opacity = '1';
    }, 100);
});


</script>
@endpush
</file>

<file path="resources/views/admin/cursos/show.blade.php">
@extends('layouts.admin')

@section('title', 'Detalles del Curso: ' . $curso->nombre)
@section('page-title', 'Detalles del Curso')

@section('content')
    {{-- Bloque de Mensajes Flash --}}
    @if (session('success'))
        <div class="mb-6 px-4 py-3 rounded-lg relative bg-gradient-to-r from-green-50 to-green-100 border-l-4 border-green-400 text-green-800 shadow-sm animate-fadeIn" role="alert">
            <div class="flex items-center"><i class="bi bi-check-circle-fill text-green-500 mr-3"></i><div><strong class="font-semibold">¡Éxito!</strong> <p class="text-sm mt-1">{{ session('success') }}</p></div></div>
        </div>
    @endif
    @if (session('error'))
         <div class="mb-6 px-4 py-3 rounded-lg relative bg-gradient-to-r from-red-50 to-red-100 border-l-4 border-red-400 text-red-800 shadow-sm animate-fadeIn" role="alert">
            <div class="flex items-center"><i class="bi bi-exclamation-triangle-fill text-red-500 mr-3"></i><div><strong class="font-semibold">¡Atención!</strong> <p class="text-sm mt-1">{{ session('error') }}</p></div></div>
        </div>
    @endif

    <div class="bg-white p-6 md:p-8 rounded-xl shadow-lg border border-gray-200">
        {{-- Cabecera del Curso --}}
        <div class="mb-6 pb-6 border-b border-gray-200">
            <h2 class="text-3xl font-bold text-gray-900">{{ $curso->nombre }}</h2>
            <p class="text-md text-gray-600 mt-1">Código: {{ $curso->codigo ?? 'N/A' }}</p>
            @if($curso->profesor)
                <p class="text-sm text-gray-500 mt-1">
                    Impartido por:
                    <a href="{{ route('admin.profesores.show', $curso->profesor->id) }}" class="text-indigo-600 hover:underline">
                        {{ $curso->profesor->nombre }} {{ $curso->profesor->apellido1 }}
                    </a>
                </p>
            @else
                <p class="text-sm text-gray-500 mt-1">Profesor: No asignado</p>
            @endif
        </div>

        {{-- Detalles del Curso en Grid --}}
        <h3 class="text-xl font-semibold text-gray-800 mb-4">Información del Curso</h3>
        <dl class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-4 text-sm mb-8">
            <div class="bg-gray-50 p-3 rounded-lg">
                <dt class="font-medium text-gray-500">Descripción</dt>
                <dd class="mt-1 text-gray-900">{{ $curso->descripcion ?? 'No especificada' }}</dd>
            </div>
            <div class="bg-gray-50 p-3 rounded-lg">
                <dt class="font-medium text-gray-500">Modalidad</dt>
                <dd class="mt-1 text-gray-900">{{ $curso->modalidad ?? 'N/A' }}</dd>
            </div>
            <div class="bg-gray-50 p-3 rounded-lg">
                <dt class="font-medium text-gray-500">Nivel</dt>
                <dd class="mt-1 text-gray-900">{{ $curso->nivel ?? 'No especificado' }}</dd>
            </div>
            <div class="bg-gray-50 p-3 rounded-lg">
                <dt class="font-medium text-gray-500">Requisitos</dt>
                <dd class="mt-1 text-gray-900">{{ $curso->requisitos ?? 'No especificados' }}</dd>
            </div>
            <div class="bg-gray-50 p-3 rounded-lg">
                <dt class="font-medium text-gray-500">Fecha de Inicio</dt>
                <dd class="mt-1 text-gray-900">{{ $curso->fecha_inicio ? $curso->fecha_inicio->format('d/m/Y') : 'N/A' }}</dd>
            </div>
            <div class="bg-gray-50 p-3 rounded-lg">
                <dt class="font-medium text-gray-500">Fecha de Fin</dt>
                <dd class="mt-1 text-gray-900">{{ $curso->fecha_fin ? $curso->fecha_fin->format('d/m/Y') : 'N/A' }}</dd>
            </div>
            <div class="bg-gray-50 p-3 rounded-lg">
                <dt class="font-medium text-gray-500">Horas Totales</dt>
                <dd class="mt-1 text-gray-900">{{ $curso->horas_totales ?? 'N/A' }}</dd>
            </div>
            <div class="bg-gray-50 p-3 rounded-lg">
                <dt class="font-medium text-gray-500">Horario</dt>
                <dd class="mt-1 text-gray-900">{{ $curso->horario ?? 'No especificado' }}</dd>
            </div>
            <div class="bg-gray-50 p-3 rounded-lg">
                <dt class="font-medium text-gray-500">Centro(s)</dt>
                <dd class="mt-1 text-gray-900">{{ $curso->centros ?? 'No especificado' }}</dd>
            </div>
            <div class="bg-gray-50 p-3 rounded-lg">
                <dt class="font-medium text-gray-500">Plazas Máximas</dt>
                <dd class="mt-1 text-gray-900">{{ $curso->plazas_maximas }}</dd>
            </div>
            <div class="bg-gray-50 p-3 rounded-lg">
                <dt class="font-medium text-gray-500">Alumnos Inscritos</dt>
                <dd class="mt-1 text-gray-900 font-semibold">{{ $curso->alumnos->count() }} / {{ $curso->plazas_maximas }}</dd>
            </div>
        </dl>

        {{-- Sección de Alumnos Inscritos --}}
        <div class="mt-8 pt-6 border-t border-gray-200">
            <h3 class="text-xl font-semibold text-gray-800 mb-4">Alumnos Inscritos en este Curso</h3>
            @if ($curso->relationLoaded('alumnos') && $curso->alumnos->count() > 0)
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200 text-sm">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-4 py-2 text-left font-medium text-gray-500 uppercase tracking-wider">Nombre Alumno</th>
                                <th class="px-4 py-2 text-left font-medium text-gray-500 uppercase tracking-wider">Email</th>
                                <th class="px-4 py-2 text-left font-medium text-gray-500 uppercase tracking-wider">Fecha Inscripción</th>
                                <th class="px-4 py-2 text-left font-medium text-gray-500 uppercase tracking-wider">Estado</th>
                                <th class="px-4 py-2 text-left font-medium text-gray-500 uppercase tracking-wider">Nota</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-100">
                            @foreach ($curso->alumnos as $alumnoInscrito)
                                <tr>
                                    <td class="px-4 py-3 whitespace-nowrap">
                                        <a href="{{ route('admin.alumnos.show', $alumnoInscrito->id) }}" class="text-indigo-600 hover:underline">
                                            {{ $alumnoInscrito->nombre }} {{ $alumnoInscrito->apellido1 }}
                                        </a>
                                    </td>
                                    <td class="px-4 py-3 whitespace-nowrap text-gray-500">{{ $alumnoInscrito->email }}</td>
                                    <td class="px-4 py-3 whitespace-nowrap text-gray-500">{{ $alumnoInscrito->pivot->fecha_inscripcion ? \Carbon\Carbon::parse($alumnoInscrito->pivot->fecha_inscripcion)->format('d/m/Y') : 'N/A' }}</td>
                                    <td class="px-4 py-3 whitespace-nowrap">
                                        @php
                                            $estadoPivot = $alumnoInscrito->pivot->estado ?? 'Desconocido';
                                            $badgeColorPivot = 'bg-gray-100 text-gray-800';
                                            if ($estadoPivot === 'Inscrito') $badgeColorPivot = 'bg-blue-100 text-blue-800';
                                            elseif ($estadoPivot === 'Completado') $badgeColorPivot = 'bg-green-100 text-green-800';
                                            elseif ($estadoPivot === 'Pendiente') $badgeColorPivot = 'bg-yellow-100 text-yellow-800';
                                            elseif ($estadoPivot === 'Baja') $badgeColorPivot = 'bg-red-100 text-red-800';
                                        @endphp
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full {{ $badgeColorPivot }}">
                                            {{ $estadoPivot }}
                                        </span>
                                    </td>
                                    <td class="px-4 py-3 whitespace-nowrap text-gray-500">{{ $alumnoInscrito->pivot->nota ?? 'N/A' }}</td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
            @else
                 <p class="text-sm text-gray-500">No hay alumnos inscritos en este curso actualmente.</p>
            @endif
        </div>

        {{-- Botones de Acción --}}
        <div class="mt-8 pt-6 border-t border-gray-200 flex flex-col sm:flex-row justify-end gap-3">
            <a href="{{ route('admin.cursos.index') }}"
               class="px-6 py-2.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors text-center">
                Volver a la Lista
            </a>
            <a href="{{ route('admin.cursos.edit', $curso->id) }}"
               class="px-6 py-2.5 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-lg shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors text-center">
                Editar Curso
            </a>
        </div>
    </div>
@endsection

@push('scripts')
    {{-- No se necesitan scripts específicos para esta vista por ahora --}}
@endpush
</file>

<file path="resources/views/admin/preinscritos/create.blade.php">
@extends('layouts.admin')

@section('title', 'Añadir Nuevo Preinscrito')
@section('page-title', 'Añadir Nuevo Preinscrito')

@section('content')
<div class="max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
    @if ($errors->any())
        <div class="mb-6 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg shadow-sm">
            <strong class="font-bold">¡Atención! Por favor, corrige los errores:</strong>
            <ul class="mt-2 list-disc list-inside text-sm">
                @foreach ($errors->all() as $error)
                    <li>{{ $error }}</li>
                @endforeach
            </ul>
        </div>
    @endif

    <form method="POST" action="{{ route('admin.preinscritos.store') }}" class="space-y-8">
        @csrf

        {{-- Sección Información Personal --}}
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
            <div class="bg-gradient-to-r from-sky-50 to-cyan-50 px-6 py-4 border-b border-gray-200"><h2 class="text-lg font-semibold text-gray-900">Información Personal</h2></div>
            <div class="p-6 space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div class="space-y-1">
                        <label for="nombre" class="block text-sm font-medium text-gray-700">Nombre <span class="text-red-500">*</span></label>
                        <input type="text" name="nombre" id="nombre_pre" value="{{ old('nombre') }}" required class="form-input @error('nombre') form-input-error @enderror">
                        @error('nombre') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="space-y-1">
                        <label for="apellido1" class="block text-sm font-medium text-gray-700">Primer Apellido <span class="text-red-500">*</span></label>
                        <input type="text" name="apellido1" id="apellido1_pre" value="{{ old('apellido1') }}" required class="form-input @error('apellido1') form-input-error @enderror">
                        @error('apellido1') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="space-y-1">
                        <label for="apellido2" class="block text-sm font-medium text-gray-700">Segundo Apellido</label>
                        <input type="text" name="apellido2" id="apellido2_pre" value="{{ old('apellido2') }}" class="form-input @error('apellido2') form-input-error @enderror">
                        @error('apellido2') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div class="space-y-1">
                        <label for="dni" class="block text-sm font-medium text-gray-700">DNI/NIE <span class="text-red-500">*</span></label>
                        <input type="text" name="dni" id="dni_pre" value="{{ old('dni') }}" required class="form-input @error('dni') form-input-error @enderror">
                        @error('dni') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="space-y-1">
                        <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                        <input type="email" name="email" id="email_pre" value="{{ old('email') }}" class="form-input @error('email') form-input-error @enderror">
                        @error('email') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="space-y-1">
                        <label for="fecha_nacimiento" class="block text-sm font-medium text-gray-700">Fecha de Nacimiento</label>
                        <input type="date" name="fecha_nacimiento" id="fecha_nacimiento_pre" value="{{ old('fecha_nacimiento') }}" class="form-input @error('fecha_nacimiento') form-input-error @enderror">
                        @error('fecha_nacimiento') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                     <div class="space-y-1">
                        <label for="sexo" class="block text-sm font-medium text-gray-700">Sexo</label>
                        <select name="sexo" id="sexo_pre" class="form-select @error('sexo') form-input-error @enderror">
                            <option value="" {{ old('sexo') == '' ? 'selected' : '' }}>Seleccionar...</option>
                            <option value="Hombre" {{ old('sexo') == 'Hombre' ? 'selected' : '' }}>Hombre</option>
                            <option value="Mujer" {{ old('sexo') == 'Mujer' ? 'selected' : '' }}>Mujer</option>
                            <option value="Otro" {{ old('sexo') == 'Otro' ? 'selected' : '' }}>Otro</option>
                        </select>
                        @error('sexo') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="space-y-1">
                        <label for="telefono" class="block text-sm font-medium text-gray-700">Teléfono</label>
                        <input type="tel" name="telefono" id="telefono_pre" value="{{ old('telefono') }}" class="form-input @error('telefono') form-input-error @enderror">
                        @error('telefono') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="space-y-1">
                        <label for="num_seguridad_social" class="block text-sm font-medium text-gray-700">Nº Seguridad Social</label>
                        <input type="text" name="num_seguridad_social" id="num_seguridad_social_pre" value="{{ old('num_seguridad_social') }}" class="form-input @error('num_seguridad_social') form-input-error @enderror">
                        @error('num_seguridad_social') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                </div>
            </div>

            {{-- Información de Contacto --}}
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
                <div class="bg-gradient-to-r from-green-50 to-emerald-50 px-6 py-4 border-b border-gray-200"><h2 class="text-lg font-semibold text-gray-900">Información de Contacto</h2></div>
                <div class="p-6 space-y-6">
                    <div class="space-y-1">
                        <label for="direccion" class="block text-sm font-medium text-gray-700">Dirección</label>
                        <textarea name="direccion" id="direccion_pre" rows="3" class="form-input @error('direccion') form-input-error @enderror">{{ old('direccion') }}</textarea>
                        @error('direccion') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div class="space-y-1">
                            <label for="cp" class="block text-sm font-medium text-gray-700">Código Postal</label>
                            <input type="text" name="cp" id="cp_pre" value="{{ old('cp') }}" class="form-input @error('cp') form-input-error @enderror">
                            @error('cp') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="localidad" class="block text-sm font-medium text-gray-700">Localidad</label>
                            <input type="text" name="localidad" id="localidad_pre" value="{{ old('localidad') }}" class="form-input @error('localidad') form-input-error @enderror">
                            @error('localidad') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="provincia" class="block text-sm font-medium text-gray-700">Provincia</label>
                            <input type="text" name="provincia" id="provincia_pre" value="{{ old('provincia') }}" class="form-input @error('provincia') form-input-error @enderror">
                            @error('provincia') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                    </div>
                </div>
            </div>

            {{-- Información Académica y Laboral --}}
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
                <div class="bg-gradient-to-r from-purple-50 to-pink-50 px-6 py-4 border-b border-gray-200"><h2 class="text-lg font-semibold text-gray-900">Información Académica y Laboral</h2></div>
                <div class="p-6 space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div class="space-y-1">
                            <label for="nacionalidad" class="block text-sm font-medium text-gray-700">Nacionalidad</label>
                             <input type="text" name="nacionalidad" id="nacionalidad_pre" value="{{ old('nacionalidad') }}" class="form-input @error('nacionalidad') form-input-error @enderror">
                            @error('nacionalidad') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="nivel_formativo" class="block text-sm font-medium text-gray-700">Nivel Formativo</label>
                            <select name="nivel_formativo" id="nivel_formativo_pre" class="form-select @error('nivel_formativo') form-input-error @enderror">
                                <option value="" disabled {{ old('nivel_formativo') ? '' : 'selected' }}>Seleccionar...</option>
                                <option value="Sin estudios" {{ old('nivel_formativo') == 'Sin estudios' ? 'selected' : '' }}>Sin estudios</option>
                                <option value="ESO" {{ old('nivel_formativo') == 'ESO' ? 'selected' : '' }}>ESO</option>
                                <option value="Bachillerato" {{ old('nivel_formativo') == 'Bachillerato' ? 'selected' : '' }}>Bachillerato</option>
                                <option value="Grado Medio" {{ old('nivel_formativo') == 'Grado Medio' ? 'selected' : '' }}>Grado Medio</option>
                                <option value="Grado Superior" {{ old('nivel_formativo') == 'Grado Superior' ? 'selected' : '' }}>Grado Superior</option>
                                <option value="Grado Universitario" {{ old('nivel_formativo') == 'Grado Universitario' ? 'selected' : '' }}>Grado Universitario</option>
                                <option value="Máster" {{ old('nivel_formativo') == 'Máster' ? 'selected' : '' }}>Máster</option>
                                <option value="Doctorado" {{ old('nivel_formativo') == 'Doctorado' ? 'selected' : '' }}>Doctorado</option>
                            </select>
                            @error('nivel_formativo') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="situacion_laboral" class="block text-sm font-medium text-gray-700">Situación Laboral</label>
                            <select name="situacion_laboral" id="situacion_laboral_pre" class="form-select @error('situacion_laboral') form-input-error @enderror">
                                <option value="" disabled {{ old('situacion_laboral') ? '' : 'selected' }}>Seleccionar...</option>
                                <option value="Empleado a tiempo completo" {{ old('situacion_laboral') == 'Empleado a tiempo completo' ? 'selected' : '' }}>Empleado a tiempo completo</option>
                                <option value="Empleado a tiempo parcial" {{ old('situacion_laboral') == 'Empleado a tiempo parcial' ? 'selected' : '' }}>Empleado a tiempo parcial</option>
                                <option value="Desempleado" {{ old('situacion_laboral') == 'Desempleado' ? 'selected' : '' }}>Desempleado</option>
                                <option value="Estudiante" {{ old('situacion_laboral') == 'Estudiante' ? 'selected' : '' }}>Estudiante</option>
                                <option value="Jubilado" {{ old('situacion_laboral') == 'Jubilado' ? 'selected' : '' }}>Jubilado</option>
                                <option value="Autónomo" {{ old('situacion_laboral') == 'Autónomo' ? 'selected' : '' }}>Autónomo</option>
                            </select>

                             @error('situacion_laboral') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6"> {{-- Nueva fila para Estado y Fecha Importación --}}
                        <div class="space-y-1">
                            <label for="estado" class="block text-sm font-medium text-gray-700">Estado Preinscripción <span class="text-red-500">*</span></label>
                             <select name="estado" id="estado_pre" required class="form-select @error('estado') form-input-error @enderror">
                                {{-- <option value="" disabled {{ old('estado') ? '' : 'selected' }}>Seleccionar...</option> --}}
                                <option value="Pendiente" {{ old('estado', 'Pendiente') == 'Pendiente' ? 'selected' : '' }}>Pendiente</option>
                                <option value="Contactado" {{ old('estado') == 'Contactado' ? 'selected' : '' }}>Contactado</option>
                                <option value="Interesado" {{ old('estado') == 'Interesado' ? 'selected' : '' }}>Interesado</option>
                                <option value="Convertido" {{ old('estado') == 'Convertido' ? 'selected' : '' }}>Convertido</option>
                                <option value="Rechazado" {{ old('estado') == 'Rechazado' ? 'selected' : '' }}>Rechazado</option>
                            </select>
                             @error('estado') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="fecha_importacion" class="block text-sm font-medium text-gray-700">Fecha Importación</label>
                            <input type="datetime-local" name="fecha_importacion" id="fecha_importacion_pre" value="{{ old('fecha_importacion', now()->format('Y-m-d\TH:i')) }}"
                                   class="form-input @error('fecha_importacion') form-input-error @enderror">
                            @error('fecha_importacion') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                    </div>
                </div>
            </div>

            {{-- Botones de Acción --}}
            <div class="flex flex-col sm:flex-row justify-end gap-3 pt-4">
                <a href="{{ route('admin.preinscritos.index') }}" class="btn-secondary-tailwind text-center">Cancelar</a>
                <button type="submit" class="btn-indigo-tailwind">Guardar Preinscrito</button>
            </div>
        </form>
    </div>
</div>
@endsection

@push('scripts')
<script>
document.addEventListener('DOMContentLoaded', function() {
    const idsSuffix = '_pre';
    const dniInput = document.getElementById('dni' + idsSuffix);
    if (dniInput) { /* ... (código JS de formateo DNI) ... */ }

    const telefonoInput = document.getElementById('telefono' + idsSuffix);
    if (telefonoInput) { /* ... (código JS de formateo Teléfono) ... */ }

    const cpInput = document.getElementById('cp' + idsSuffix);
    if (cpInput) { /* ... (código JS de formateo CP) ... */ }

    const nussInput = document.getElementById('num_seguridad_social' + idsSuffix);
    if (nussInput) { /* ... (código JS de formateo NUSS) ... */ }
});
</script>
@endpush
</file>

<file path="resources/views/admin/preinscritos/edit.blade.php">
@extends('layouts.admin')

@section('title', 'Editar Preinscrito: ' . $preinscrito->nombre . ' ' . $preinscrito->apellido1)
@section('page-title', 'Editar Preinscrito')

@section('content')
<div class="max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
    {{-- Bloque para mostrar errores de validación generales --}}
    @if ($errors->any())
        <div class="mb-6 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg shadow-sm">
            <strong class="font-bold">¡Atención! Por favor, corrige los errores:</strong>
            <ul class="mt-2 list-disc list-inside text-sm">
                @foreach ($errors->all() as $error)
                    <li>{{ $error }}</li>
                @endforeach
            </ul>
        </div>
    @endif

    {{-- CAMBIOS: La acción apunta a 'update' y el método es 'PUT' --}}
    <form method="POST" action="{{ route('admin.preinscritos.update', $preinscrito->id) }}" class="space-y-8">
        @csrf
        @method('PUT')

        {{-- Sección Información Personal del Preinscrito --}}
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
            <div class="bg-gradient-to-r from-sky-50 to-cyan-50 px-6 py-4 border-b border-gray-200"><h2 class="text-lg font-semibold text-gray-900">Información del Preinscrito</h2></div>
            <div class="p-6 space-y-6">
                {{-- Nombre y Apellidos --}}
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div class="space-y-1">
                        <label for="nombre" class="block text-sm font-medium text-gray-700">Nombre <span class="text-red-500">*</span></label>
                        <input type="text" name="nombre" id="nombre_pre" value="{{ old('nombre', $preinscrito->nombre) }}" required class="form-input @error('nombre') form-input-error @enderror">
                        @error('nombre') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="space-y-1">
                        <label for="apellido1" class="block text-sm font-medium text-gray-700">Primer Apellido <span class="text-red-500">*</span></label>
                        <input type="text" name="apellido1" id="apellido1_pre" value="{{ old('apellido1', $preinscrito->apellido1) }}" required class="form-input @error('apellido1') form-input-error @enderror">
                        @error('apellido1') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="space-y-1">
                        <label for="apellido2" class="block text-sm font-medium text-gray-700">Segundo Apellido</label>
                        <input type="text" name="apellido2" id="apellido2_pre" value="{{ old('apellido2', $preinscrito->apellido2) }}" class="form-input @error('apellido2') form-input-error @enderror">
                        @error('apellido2') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                </div>
                {{-- DNI, Email, Teléfono --}}
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div class="space-y-1">
                        <label for="dni" class="block text-sm font-medium text-gray-700">DNI/NIE <span class="text-red-500">*</span></label>
                        <input type="text" name="dni" id="dni_pre" value="{{ old('dni', $preinscrito->dni) }}" required class="form-input @error('dni') form-input-error @enderror">
                        @error('dni') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="space-y-1">
                        <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                        <input type="email" name="email" id="email_pre" value="{{ old('email', $preinscrito->email) }}" class="form-input @error('email') form-input-error @enderror">
                        @error('email') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="space-y-1">
                        <label for="telefono" class="block text-sm font-medium text-gray-700">Teléfono</label>
                        <input type="tel" name="telefono" id="telefono_pre" value="{{ old('telefono', $preinscrito->telefono) }}" class="form-input @error('telefono') form-input-error @enderror">
                        @error('telefono') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                </div>
                {{-- Fecha Nacimiento, Nacionalidad, Sexo --}}
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                     <div class="space-y-1">
                        <label for="fecha_nacimiento" class="block text-sm font-medium text-gray-700">Fecha de Nacimiento</label>
                        <input type="date" name="fecha_nacimiento" id="fecha_nacimiento_pre" value="{{ old('fecha_nacimiento', $preinscrito->fecha_nacimiento ? $preinscrito->fecha_nacimiento->format('Y-m-d') : '') }}" class="form-input @error('fecha_nacimiento') form-input-error @enderror">
                        @error('fecha_nacimiento') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="space-y-1">
                        <label for="nacionalidad" class="block text-sm font-medium text-gray-700">Nacionalidad</label>
                        <input type="text" name="nacionalidad" id="nacionalidad_pre" value="{{ old('nacionalidad', $preinscrito->nacionalidad) }}" class="form-input @error('nacionalidad') form-input-error @enderror">
                        @error('nacionalidad') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="space-y-1">
                        <label for="sexo" class="block text-sm font-medium text-gray-700">Sexo</label>
                        <select name="sexo" id="sexo_pre" class="form-select @error('sexo') form-input-error @enderror">
                            <option value="" {{ old('sexo', $preinscrito->sexo) == '' ? 'selected' : '' }}>Seleccionar...</option>
                            <option value="Hombre" {{ old('sexo', $preinscrito->sexo) == 'Hombre' ? 'selected' : '' }}>Hombre</option>
                            <option value="Mujer" {{ old('sexo', $preinscrito->sexo) == 'Mujer' ? 'selected' : '' }}>Mujer</option>
                            <option value="Otro" {{ old('sexo', $preinscrito->sexo) == 'Otro' ? 'selected' : '' }}>Otro</option>
                        </select>
                        @error('sexo') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                </div>
            </div>

            {{-- Información de Contacto --}}
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
                <div class="bg-gradient-to-r from-green-50 to-emerald-50 px-6 py-4 border-b border-gray-200"><h2 class="text-lg font-semibold text-gray-900">Información de Contacto</h2></div>
                <div class="p-6 space-y-6">
                     <div class="space-y-1">
                        <label for="direccion" class="block text-sm font-medium text-gray-700">Dirección</label>
                        <textarea name="direccion" id="direccion_pre" rows="3" class="form-input @error('direccion') form-input-error @enderror">{{ old('direccion', $preinscrito->direccion) }}</textarea>
                        @error('direccion') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div class="space-y-1">
                            <label for="cp" class="block text-sm font-medium text-gray-700">Código Postal</label>
                            <input type="text" name="cp" id="cp_pre" value="{{ old('cp', $preinscrito->cp) }}" class="form-input @error('cp') form-input-error @enderror">
                            @error('cp') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="localidad" class="block text-sm font-medium text-gray-700">Localidad</label>
                            <input type="text" name="localidad" id="localidad_pre" value="{{ old('localidad', $preinscrito->localidad) }}" class="form-input @error('localidad') form-input-error @enderror">
                            @error('localidad') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="provincia" class="block text-sm font-medium text-gray-700">Provincia</label>
                            <input type="text" name="provincia" id="provincia_pre" value="{{ old('provincia', $preinscrito->provincia) }}" class="form-input @error('provincia') form-input-error @enderror">
                            @error('provincia') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                    </div>
                </div>
            </div>

            {{-- Información Académica y Laboral --}}
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
                <div class="bg-gradient-to-r from-purple-50 to-pink-50 px-6 py-4 border-b border-gray-200"><h2 class="text-lg font-semibold text-gray-900">Información Académica, Laboral y de Registro</h2></div>
                <div class="p-6 space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div class="space-y-1">
                            <label for="nivel_formativo" class="block text-sm font-medium text-gray-700">Nivel Formativo</label>
                            <select name="nivel_formativo" id="nivel_formativo_pre" class="form-select @error('nivel_formativo') form-input-error @enderror">
                                <option value="" disabled {{ old('nivel_formativo', $preinscrito->nivel_formativo) ? '' : 'selected' }}>Seleccionar...</option>
                                <option value="Sin estudios" {{ old('nivel_formativo', $preinscrito->nivel_formativo) == 'Sin estudios' ? 'selected' : '' }}>Sin estudios</option>
                                <option value="ESO" {{ old('nivel_formativo', $preinscrito->nivel_formativo) == 'ESO' ? 'selected' : '' }}>ESO</option>
                                <option value="Bachillerato" {{ old('nivel_formativo', $preinscrito->nivel_formativo) == 'Bachillerato' ? 'selected' : '' }}>Bachillerato</option>
                                <option value="Grado Medio" {{ old('nivel_formativo', $preinscrito->nivel_formativo) == 'Grado Medio' ? 'selected' : '' }}>Grado Medio</option>
                                <option value="Grado Superior" {{ old('nivel_formativo', $preinscrito->nivel_formativo) == 'Grado Superior' ? 'selected' : '' }}>Grado Superior</option>
                                <option value="Grado Universitario" {{ old('nivel_formativo', $preinscrito->nivel_formativo) == 'Grado Universitario' ? 'selected' : '' }}>Grado Universitario</option>
                                <option value="Máster" {{ old('nivel_formativo', $preinscrito->nivel_formativo) == 'Máster' ? 'selected' : '' }}>Máster</option>
                                <option value="Doctorado" {{ old('nivel_formativo', $preinscrito->nivel_formativo) == 'Doctorado' ? 'selected' : '' }}>Doctorado</option>
                            </select>
                            @error('nivel_formativo') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="situacion_laboral" class="block text-sm font-medium text-gray-700">Situación Laboral</label>
                            <select name="situacion_laboral" id="situacion_laboral_pre" class="form-select @error('situacion_laboral') form-input-error @enderror">
                               <option value="" disabled {{ old('situacion_laboral', $preinscrito->situacion_laboral) ? '' : 'selected' }}>Seleccionar...</option>
                               <option value="Empleado a tiempo completo" {{ old('situacion_laboral', $preinscrito->situacion_laboral) == 'Empleado a tiempo completo' ? 'selected' : '' }}>Empleado a tiempo completo</option>
                               <option value="Empleado a tiempo parcial" {{ old('situacion_laboral', $preinscrito->situacion_laboral) == 'Empleado a tiempo parcial' ? 'selected' : '' }}>Empleado a tiempo parcial</option>
                               <option value="Desempleado" {{ old('situacion_laboral', $preinscrito->situacion_laboral) == 'Desempleado' ? 'selected' : '' }}>Desempleado</option>
                               <option value="Estudiante" {{ old('situacion_laboral', $preinscrito->situacion_laboral) == 'Estudiante' ? 'selected' : '' }}>Estudiante</option>
                               <option value="Jubilado" {{ old('situacion_laboral', $preinscrito->situacion_laboral) == 'Jubilado' ? 'selected' : '' }}>Jubilado</option>
                               <option value="Autónomo" {{ old('situacion_laboral', $preinscrito->situacion_laboral) == 'Autónomo' ? 'selected' : '' }}>Autónomo</option>
                            </select>
                             @error('situacion_laboral') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="num_seguridad_social" class="block text-sm font-medium text-gray-700">Nº Seguridad Social</label>
                            <input type="text" name="num_seguridad_social" id="num_seguridad_social_pre" value="{{ old('num_seguridad_social', $preinscrito->num_seguridad_social) }}" class="form-input @error('num_seguridad_social') form-input-error @enderror">
                            @error('num_seguridad_social') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="space-y-1">
                            <label for="estado" class="block text-sm font-medium text-gray-700">Estado Preinscripción <span class="text-red-500">*</span></label>
                             <select name="estado" id="estado_pre" required class="form-select @error('estado') form-input-error @enderror">
                                <option value="" disabled>Seleccionar...</option>
                                <option value="Pendiente" {{ old('estado', $preinscrito->estado) == 'Pendiente' ? 'selected' : '' }}>Pendiente</option>
                                <option value="Contactado" {{ old('estado', $preinscrito->estado) == 'Contactado' ? 'selected' : '' }}>Contactado</option>
                                <option value="Interesado" {{ old('estado', $preinscrito->estado) == 'Interesado' ? 'selected' : '' }}>Interesado</option>
                                <option value="Convertido" {{ old('estado', $preinscrito->estado) == 'Convertido' ? 'selected' : '' }}>Convertido</option>
                                <option value="Rechazado" {{ old('estado', $preinscrito->estado) == 'Rechazado' ? 'selected' : '' }}>Rechazado</option>
                            </select>
                             @error('estado') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="fecha_importacion" class="block text-sm font-medium text-gray-700">Fecha Importación</label>
                            <input type="datetime-local" name="fecha_importacion" id="fecha_importacion_pre" value="{{ old('fecha_importacion', $preinscrito->fecha_importacion ? $preinscrito->fecha_importacion->format('Y-m-d\TH:i') : '') }}" class="form-input @error('fecha_importacion') form-input-error @enderror">
                            @error('fecha_importacion') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                    </div>
                </div>
            </div>

            {{-- Botones de Acción --}}
            <div class="flex flex-col sm:flex-row justify-end gap-3 pt-4">
                <a href="{{ route('admin.preinscritos.show', $preinscrito->id) }}" class="btn-secondary-tailwind text-center">Cancelar</a>
                <button type="submit" class="btn-indigo-tailwind">Actualizar Preinscrito</button>
            </div>
        </form>
    </div>
</div>
@endsection

@push('scripts')
{{-- Puedes incluir aquí el mismo JavaScript de formateo que usaste en create.blade.php si lo deseas --}}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const idsSuffix = '_pre';
    const dniInput = document.getElementById('dni' + idsSuffix);
    if (dniInput) { /* ... (código JS de formateo DNI) ... */ }

    const telefonoInput = document.getElementById('telefono' + idsSuffix);
    if (telefonoInput) { /* ... (código JS de formateo Teléfono) ... */ }

    const cpInput = document.getElementById('cp' + idsSuffix);
    if (cpInput) { /* ... (código JS de formateo CP) ... */ }

    const nussInput = document.getElementById('num_seguridad_social' + idsSuffix);
    if (nussInput) { /* ... (código JS de formateo NUSS) ... */ }
});
</script>
@endpush
</file>

<file path="resources/views/admin/preinscritos/index_error_placeholder.blade.php">
@extends('layouts.admin')
@section('title', 'Error Preinscritos')
@section('page-title', 'Error al Cargar Preinscritos')
@section('content')
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
        <strong class="font-bold">¡Error!</strong>
        <span class="block sm:inline">{{ $errorMessage ?? 'Ocurrió un error desconocido.' }}</span>
        <p class="text-xs mt-2">Revisa `storage/logs/laravel.log` para más detalles.</p>
    </div>
@endsection
</file>

<file path="resources/views/admin/preinscritos/index.blade.php">
@extends('layouts.admin')

@section('title', 'Gestión de Preinscritos')
@section('page-title', 'Lista de Preinscritos')

@section('content')
    {{-- Mensajes Flash --}}
    @if (session('success'))
        <div class="mb-6 px-4 py-3 rounded-lg relative bg-gradient-to-r from-green-50 to-green-100 border-l-4 border-green-400 text-green-800 shadow-sm animate-fadeIn" role="alert">
            <div class="flex items-center"><i class="bi bi-check-circle-fill text-green-500 mr-3"></i><div><strong class="font-semibold">¡Éxito!</strong> <p class="text-sm mt-1">{{ session('success') }}</p></div></div>
        </div>
    @endif
    @if (session('error'))
        <div class="mb-6 px-4 py-3 rounded-lg relative bg-gradient-to-r from-red-50 to-red-100 border-l-4 border-red-400 text-red-800 shadow-sm animate-fadeIn" role="alert">
            <div class="flex items-center"><i class="bi bi-exclamation-triangle-fill text-red-500 mr-3"></i><div><strong class="font-semibold">¡Atención!</strong> <p class="text-sm mt-1">{{ session('error') }}</p></div></div>
        </div>
    @endif

    <!-- KPIs para Preinscritos -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="bg-gradient-to-br from-white to-gray-50 p-6 rounded-xl shadow-sm border border-gray-100 hover:shadow-md transition-all group">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-xs font-semibold text-gray-600 uppercase tracking-wider mb-2">Total Preinscritos</p>
                    <p class="text-3xl font-bold text-gray-900">{{ $totalPreinscritos ?? $preinscritos->total() }}</p> {{-- Usar la variable específica si se pasa --}}
                </div>
                <div class="p-3 bg-sky-100 rounded-lg group-hover:bg-sky-200 transition-colors">
                    <i class="bi bi-person-lines-fill text-2xl text-sky-600"></i>
                </div>
            </div>
        </div>
        <div class="bg-gradient-to-br from-white to-gray-50 p-6 rounded-xl shadow-sm border border-gray-100 hover:shadow-md transition-all group">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-xs font-semibold text-gray-600 uppercase tracking-wider mb-2">Pendientes</p>
                    <p class="text-3xl font-bold text-gray-900">{{ $preinscritosPendientes ?? '0' }}</p>
                </div>
                 <div class="p-3 bg-yellow-100 rounded-lg group-hover:bg-yellow-200 transition-colors">
                    <i class="bi bi-hourglass-split text-2xl text-yellow-600"></i>
                </div>
            </div>
        </div>
        <div class="bg-gradient-to-br from-white to-gray-50 p-6 rounded-xl shadow-sm border border-gray-100 hover:shadow-md transition-all group">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-xs font-semibold text-gray-600 uppercase tracking-wider mb-2">Importados Hoy</p>
                    <p class="text-3xl font-bold text-gray-900">{{ $importadosHoy ?? '0' }}</p>
                </div>
                 <div class="p-3 bg-purple-100 rounded-lg group-hover:bg-purple-200 transition-colors">
                    <i class="bi bi-calendar-plus-fill text-2xl text-purple-600"></i>
                </div>
            </div>
        </div>
        <div class="bg-gradient-to-br from-white to-gray-50 p-6 rounded-xl shadow-sm border border-gray-100 hover:shadow-md transition-all group">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-xs font-semibold text-gray-600 uppercase tracking-wider mb-2">Convertidos a Alumno</p>
                    <p class="text-3xl font-bold text-gray-900">{{ $preinscritosConvertidos ?? '0' }}</p>
                </div>
                 <div class="p-3 bg-green-100 rounded-lg group-hover:bg-green-200 transition-colors">
                    <i class="bi bi-person-check-fill text-2xl text-green-600"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Filtros y Herramientas -->
    <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8">
        <form method="GET" action="{{ route('admin.preinscritos.index') }}" id="filterFormPreinscritos">
             <div class="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6">
                <div class="flex flex-col sm:flex-row items-stretch sm:items-center gap-4 w-full lg:w-auto">
                    <div class="relative group">
                        <div class="absolute inset-y-0 left-0 flex items-center pl-4 pointer-events-none"><i class="bi bi-search text-gray-400"></i></div>
                        <input type="text" name="search" id="searchPreinscritos"
                               class="block w-full sm:w-72 pl-11 pr-10 py-3 border border-gray-300 rounded-lg bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent focus:bg-white transition-all text-sm"
                               placeholder="Buscar por nombre, DNI o email..." value="{{ $searchTerm ?? '' }}" autocomplete="off">
                        @if($searchTerm ?? '') {{-- Añadida comprobación para $searchTerm --}}
                            <button type="button" onclick="document.getElementById('searchPreinscritos').value=''; document.getElementById('filterFormPreinscritos').submit();" class="absolute inset-y-0 right-0 flex items-center pr-4 text-gray-400 hover:text-gray-600"><i class="bi bi-x-lg"></i></button>
                        @endif
                    </div>

                    @if(isset($opcionesEstadoPre) && $opcionesEstadoPre->count() > 0) {{-- Solo mostrar si hay opciones --}}
                    <div class="relative">
                        <select name="estado_pre" id="estado_pre_filtro" onchange="this.form.submit()"
                                class="block w-full sm:w-auto rounded-lg border border-gray-300 bg-gray-50 px-4 py-3 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent focus:bg-white transition-all appearance-none cursor-pointer">
                            <option value="">Todos los Estados</option>
                            @foreach ($opcionesEstadoPre as $estado)
                                <option value="{{ $estado }}" {{ ($filtroEstadoPre ?? '') == $estado ? 'selected' : '' }}>{{ $estado }}</option>
                            @endforeach
                        </select>
                        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none"><i class="bi bi-chevron-down text-gray-400"></i></div>
                    </div>
                    @endif

                    @if( ($searchTerm ?? '') || ($filtroEstadoPre ?? '') )
                        <a href="{{ route('admin.preinscritos.index') }}" class="inline-flex items-center justify-center px-4 py-3 text-sm font-medium rounded-lg text-gray-500 bg-gray-100 hover:bg-gray-200" title="Limpiar filtros"><i class="bi bi-arrow-clockwise"></i></a>
                    @else
                        <button type="submit" class="px-6 py-3 text-sm font-medium text-white bg-gray-600 rounded-lg shadow-sm hover:bg-gray-700">Filtrar</button>
                    @endif
                </div>
                <div class="flex-shrink-0 w-full sm:w-auto">
                    <a href="{{ route('admin.preinscritos.create') }}" class="w-full sm:w-auto inline-flex items-center justify-center px-6 py-3 border border-transparent shadow-sm text-sm font-semibold rounded-lg text-white bg-indigo-600 hover:bg-indigo-700">
                        <i class="bi bi-plus-lg mr-2"></i> Nuevo Preinscrito
                    </a>
                </div>
            </div>
            @if($preinscritos->total() > 0)
                <div class="mt-4 pt-4 border-t border-gray-100"><p class="text-sm text-gray-600">Mostrando {{ $preinscritos->firstItem() }}-{{ $preinscritos->lastItem() }} de {{ $preinscritos->total() }} preinscritos.</p></div>
            @endif
        </form>
    </div>

    <!-- Tabla de Preinscritos -->
    <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre Completo</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">DNI</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Teléfono</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nivel Formativo</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha Importación</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
                        <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-100">
                    @forelse ($preinscritos as $preinscrito)
                        <tr class="hover:bg-gray-50">
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{{ $preinscrito->nombre }} {{ $preinscrito->apellido1 }} {{ $preinscrito->apellido2 ?? '' }}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{{ $preinscrito->dni }}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{{ $preinscrito->email ?? 'N/A' }}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{{ $preinscrito->telefono ?? 'N/A' }}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{{ $preinscrito->nivel_formativo ?? 'N/A' }}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {{ $preinscrito->fecha_importacion ? $preinscrito->fecha_importacion->format('d/m/Y H:i') : ($preinscrito->created_at ? $preinscrito->created_at->format('d/m/Y H:i') : 'N/A') }}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                @php
                                    $estadoPre = $preinscrito->estado ?? 'Pendiente'; // Valor por defecto
                                    $badgeColorPre = 'bg-gray-100 text-gray-800'; // Default
                                    if ($estadoPre === 'Pendiente') $badgeColorPre = 'bg-yellow-100 text-yellow-800';
                                    elseif ($estadoPre === 'Contactado') $badgeColorPre = 'bg-blue-100 text-blue-800';
                                    elseif ($estadoPre === 'Convertido') $badgeColorPre = 'bg-green-100 text-green-800';
                                    elseif ($estadoPre === 'Rechazado') $badgeColorPre = 'bg-red-100 text-red-800';
                                @endphp
                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full {{ $badgeColorPre }}">
                                    {{ $estadoPre }}
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-center text-sm">
                                <div class="flex items-center justify-center space-x-2">

                                    {{-- Mostrar solo si el preinscrito aún NO está convertido --}}
                                    @if(($preinscrito->estado ?? 'Pendiente') !== 'Convertido')
                                    {{-- Convertir a Alumno --}}
<button type="button"
        onclick="confirmConvert(
            '{{ route('admin.preinscritos.convertir', $preinscrito->id) }}',
            '{{ addslashes($preinscrito->nombre) }}'
        )"
        class="text-green-500 hover:text-green-700"
        title="Convertir a Alumno">
    <i class="bi bi-person-plus-fill"></i>
</button>

                                    @endif

                                    <a href="{{ route('admin.preinscritos.show', $preinscrito->id) }}" class="text-blue-500 hover:text-blue-700" title="Ver Detalles"><i class="bi bi-eye-fill"></i></a>
                                    <a href="{{ route('admin.preinscritos.edit', $preinscrito->id) }}" class="text-indigo-500 hover:text-indigo-700" title="Editar"><i class="bi bi-pencil-fill"></i></a>
                                    {{-- Botón para eliminar Preinscrito con modal --}}
                                    <button type="button"
                                            {{-- Pasamos la URL de la ruta destroy y el nombre del preinscrito --}}
                                            onclick="confirmDelete(
                                                '{{ route('admin.preinscritos.destroy', $preinscrito->id) }}',
                                                '{{ addslashes($preinscrito->nombre) }}'
                                            )"
                                            class="text-red-500 hover:text-red-700"
                                            title="Eliminar preinscrito">
                                        <i class="bi bi-trash-fill"></i>
                                    </button>

                                </div>
                            </td>
                        </tr>
                    @empty
                        <tr>
                            <td colspan="8" class="px-6 py-12 text-center text-sm text-gray-500">
                                <div class="flex flex-col items-center justify-center space-y-3">
                                <i class="bi bi-person-lines-fill text-4xl text-gray-400"></i>
                                <p class="font-semibold">No se encontraron preinscritos.</p>
                                 @if($searchTerm ?? '' || $filtroEstadoPre ?? '')
                                    <p class="text-xs">Prueba a cambiar tus términos de búsqueda o filtros.</p>
                                    <a href="{{ route('admin.preinscritos.index') }}" class="mt-2 inline-flex items-center px-3 py-1.5 border border-gray-300 text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">Limpiar filtros</a>
                                @else
                                    <p class="text-xs">Puedes añadir nuevos preinscritos usando el botón superior.</p>
                                @endif
                                </div>
                            </td>
                        </tr>
                    @endforelse
                </tbody>
            </table>
        </div>
    </div>

    @if ($preinscritos->hasPages())
        <div class="mt-8 px-6 py-4 bg-white rounded-xl shadow-sm">
            {{ $preinscritos->appends(request()->query())->links() }}
        </div>
    @endif
<!-- Modal de confirmación de eliminación -->
<x-convert-modal title="Convertir a Alumno"/>
<x-delete-modal title="Eliminar preinscrito" />
@endsection

@push('scripts')
<script>
    // Auto-submit para el filtro de estado si se descomenta el select
    // const estadoFiltroSelect = document.getElementById('estado_pre_filtro');
    // if(estadoFiltroSelect) {
    //     estadoFiltroSelect.addEventListener('change', function() {
    //         document.getElementById('filterFormPreinscritos').submit();
    //     });
    // }
    function confirmConvert(url, itemName) {
    // 1 – indicar al formulario la URL correcta
    document.getElementById('convertForm').action = url;

    // 2 – actualizar el texto del cuerpo con el nombre
    const body = document.querySelector('#convertModal .text-sm');
    if (body) {
        body.innerHTML =
            `¿Estás seguro de que quieres convertir <strong>${itemName}</strong> en alumno?<br>` +
            'Esta acción no se puede deshacer.';
    }

    // 3 – mostrar modal
    document.getElementById('convertModal').classList.remove('hidden');
}

function closeConvertModal() {
    document.getElementById('convertModal').classList.add('hidden');
}

</script>
@endpush
</file>

<file path="resources/views/admin/preinscritos/show.blade.php">
@extends('layouts.admin')

@section('title', 'Detalles del Preinscrito: ' . $preinscrito->nombre . ' ' . $preinscrito->apellido1)
@section('page-title', 'Detalles del Preinscrito')

@section('content')
    {{-- Bloque de Mensajes Flash --}}
    @if (session('success'))
        <div class="mb-6 px-4 py-3 rounded-lg relative bg-gradient-to-r from-green-50 to-green-100 border-l-4 border-green-400 text-green-800 shadow-sm animate-fadeIn" role="alert">
            <div class="flex items-center"><i class="bi bi-check-circle-fill text-green-500 mr-3"></i><div><strong class="font-semibold">¡Éxito!</strong> <p class="text-sm mt-1">{{ session('success') }}</p></div></div>
        </div>
    @endif
    @if (session('error'))
         <div class="mb-6 px-4 py-3 rounded-lg relative bg-gradient-to-r from-red-50 to-red-100 border-l-4 border-red-400 text-red-800 shadow-sm animate-fadeIn" role="alert">
            <div class="flex items-center"><i class="bi bi-exclamation-triangle-fill text-red-500 mr-3"></i><div><strong class="font-semibold">¡Atención!</strong> <p class="text-sm mt-1">{{ session('error') }}</p></div></div>
        </div>
    @endif

    <div class="bg-white p-6 md:p-8 rounded-xl shadow-lg border border-gray-200">
        {{-- Cabecera con Nombre e Info Principal --}}
        <div class="flex flex-col md:flex-row items-center md:items-start mb-6 pb-6 border-b border-gray-200">
            <div class="flex-shrink-0 mb-4 md:mb-0 md:mr-8">
                @php
                    $inicialNombre = (!empty($preinscrito->nombre)) ? $preinscrito->nombre[0] : '';
                    $inicialApellido = (!empty($preinscrito->apellido1)) ? $preinscrito->apellido1[0] : '';
                    $nombreParaAvatar = trim($inicialNombre . $inicialApellido);
                    if (empty($nombreParaAvatar)) { $nombreParaAvatar = 'P'; } // Preinscrito
                @endphp
                <img class="h-32 w-32 rounded-full object-cover shadow-md ring-2 ring-sky-200"
                     src="https://ui-avatars.com/api/?name={{ urlencode($nombreParaAvatar) }}&size=128&background=0EA5E9&color=FFFFFF&bold=true"
                     alt="Avatar de {{ $preinscrito->nombre ?? 'Preinscrito' }}">
            </div>
            <div class="text-center md:text-left">
                <h2 class="text-3xl font-bold text-gray-900">{{ $preinscrito->nombre }} {{ $preinscrito->apellido1 }} {{ $preinscrito->apellido2 ?? '' }}</h2>
                <p class="text-md text-gray-600 mt-1">DNI/NIE: {{ $preinscrito->dni ?? 'N/A' }}</p>
                <p class="text-sm text-gray-500 mt-1">{{ $preinscrito->email ?? 'Email no especificado' }}</p>
                 @if($preinscrito->estado)
                    @php
                        $estadoPre = $preinscrito->estado;
                        $badgeColorPre = 'bg-gray-100 text-gray-800'; // Default
                        if ($estadoPre === 'Pendiente') $badgeColorPre = 'bg-yellow-100 text-yellow-800';
                        elseif ($estadoPre === 'Contactado') $badgeColorPre = 'bg-blue-100 text-blue-800';
                        elseif ($estadoPre === 'Interesado') $badgeColorPre = 'bg-teal-100 text-teal-800'; // Ejemplo
                        elseif ($estadoPre === 'Convertido') $badgeColorPre = 'bg-green-100 text-green-800';
                        elseif ($estadoPre === 'Rechazado') $badgeColorPre = 'bg-red-100 text-red-800';
                    @endphp
                    <div class="mt-2">
                        <span class="px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full {{ $badgeColorPre }}">
                            Estado: {{ $estadoPre }}
                        </span>
                    </div>
                @endif
            </div>
        </div>

        {{-- Detalles Adicionales en Grid --}}
        <h3 class="text-xl font-semibold text-gray-800 mb-4 mt-6">Información Detallada</h3>
        <dl class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-4 text-sm">
            <div class="bg-gray-50 p-3 rounded-lg"><dt class="font-medium text-gray-500">Teléfono</dt><dd class="mt-1 text-gray-900">{{ $preinscrito->telefono ?? 'No especificado' }}</dd></div>
            <div class="bg-gray-50 p-3 rounded-lg"><dt class="font-medium text-gray-500">Fecha de Nacimiento</dt><dd class="mt-1 text-gray-900">{{ $preinscrito->fecha_nacimiento ? $preinscrito->fecha_nacimiento->format('d/m/Y') : 'No especificada' }}</dd></div>
            <div class="bg-gray-50 p-3 rounded-lg"><dt class="font-medium text-gray-500">Nacionalidad</dt><dd class="mt-1 text-gray-900">{{ $preinscrito->nacionalidad ?? 'No especificada' }}</dd></div>
            <div class="bg-gray-50 p-3 rounded-lg"><dt class="font-medium text-gray-500">Nivel Formativo</dt><dd class="mt-1 text-gray-900">{{ $preinscrito->nivel_formativo ?? 'No especificado' }}</dd></div>
            <div class="bg-gray-50 p-3 rounded-lg"><dt class="font-medium text-gray-500">Situación Laboral</dt><dd class="mt-1 text-gray-900">{{ $preinscrito->situacion_laboral ?? 'No especificada' }}</dd></div>
            <div class="bg-gray-50 p-3 rounded-lg"><dt class="font-medium text-gray-500">Fecha de Importación/Registro</dt><dd class="mt-1 text-gray-900">{{ $preinscrito->fecha_importacion ? $preinscrito->fecha_importacion->format('d/m/Y H:i') : ($preinscrito->created_at ? $preinscrito->created_at->format('d/m/Y H:i') : 'N/A') }}</dd></div>
            <div class="bg-gray-50 p-3 rounded-lg md:col-span-3"><dt class="font-medium text-gray-500">Dirección</dt><dd class="mt-1 text-gray-900">{{ $preinscrito->direccion ?? 'No especificada' }}</dd></div>
            <div class="bg-gray-50 p-3 rounded-lg"><dt class="font-medium text-gray-500">Código Postal</dt><dd class="mt-1 text-gray-900">{{ $preinscrito->cp ?? 'No especificado' }}</dd></div>
            <div class="bg-gray-50 p-3 rounded-lg"><dt class="font-medium text-gray-500">Localidad</dt><dd class="mt-1 text-gray-900">{{ $preinscrito->localidad ?? 'No especificada' }}</dd></div>
            <div class="bg-gray-50 p-3 rounded-lg"><dt class="font-medium text-gray-500">Provincia</dt><dd class="mt-1 text-gray-900">{{ $preinscrito->provincia ?? 'No especificada' }}</dd></div>
            {{-- Si tenías num_seguridad_social para preinscritos, añadirlo aquí --}}
            {{-- <div class="bg-gray-50 p-3 rounded-lg"><dt class="font-medium text-gray-500">Nº Seg. Social</dt><dd class="mt-1 text-gray-900">{{ $preinscrito->num_seguridad_social ?? 'N/A' }}</dd></div> --}}
        </dl>

        {{-- Botones de Acción --}}
        <div class="mt-8 pt-6 border-t border-gray-200 flex flex-col sm:flex-row justify-end gap-4">
            {{-- Botón Convertir a Alumno --}}
            <form action="{{ route('admin.preinscritos.convertir', $preinscrito->id) }}" method="POST" onsubmit="return confirm('¿Estás seguro de convertir este preinscrito en un alumno formal?');" class="w-full sm:w-auto">
                @csrf
                <button type="submit"
                        class="w-full px-6 py-2.5 text-sm font-medium text-white bg-green-600 border border-transparent rounded-lg shadow-sm hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors">
                    <i class="bi bi-person-plus-fill mr-2"></i>Convertir a Alumno
                </button>
            </form>

            <a href="{{ route('admin.preinscritos.index') }}"
               class="px-6 py-2.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors text-center">
                Volver a la Lista
            </a>
            <a href="{{ route('admin.preinscritos.edit', $preinscrito->id) }}"
               class="px-6 py-2.5 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-lg shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors text-center">
                Editar Preinscrito
            </a>
            {{-- Botón de Eliminar (si quieres tenerlo también en la vista de detalles) --}}
            {{-- <form action="{{ route('admin.preinscritos.destroy', $preinscrito->id) }}" method="POST" class="inline" onsubmit="return confirm('¿Seguro que quieres eliminar este preinscrito?');">
                @csrf @method('DELETE')
                <button type="submit" class="px-6 py-2.5 text-sm font-medium text-white bg-red-600 hover:bg-red-700 rounded-lg shadow-sm">Eliminar</button>
            </form> --}}
        </div>
    </div>
@endsection

@push('scripts')
    {{-- No se necesitan scripts específicos para esta vista por ahora --}}
@endpush
</file>

<file path="resources/views/admin/profesores/create.blade.php">
@extends('layouts.admin')

@section('title', 'Añadir Nuevo Profesor')
@section('page-title', 'Añadir Nuevo Profesor')

@section('content')
<div class="max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
    {{-- Mostrar Errores de Validación Generales (Opcional) --}}
    @if ($errors->any())
        <div class="mb-6 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg shadow-sm">
            <strong class="font-bold">¡Atención! Por favor, corrige los errores:</strong>
            <ul class="mt-2 list-disc list-inside text-sm">
                @foreach ($errors->all() as $error)
                    <li>{{ $error }}</li>
                @endforeach
            </ul>
        </div>
    @endif

    <form method="POST" action="{{ route('admin.profesores.store') }}" class="space-y-8">
        @csrf

        {{-- Información Personal --}}
<div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
    <div class="bg-gradient-to-r from-blue-50 to-indigo-50 px-6 py-4 border-b border-gray-200">
        <div class="flex items-center space-x-3">
            <div class="p-2 bg-blue-100 rounded-lg">
                <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path></svg>
            </div>
            <h2 class="text-lg font-semibold text-gray-900">Información Personal</h2>
        </div>
    </div>
    
    <div class="p-6 space-y-6">
        {{-- Nombre y Apellidos --}}
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div class="space-y-1">
                <label for="nombre" class="block text-sm font-medium text-gray-700">Nombre <span class="text-red-500">*</span></label>
                <input type="text" name="nombre" id="nombre" value="{{ old('nombre') }}" required
                       class="w-full px-4 py-2.5 border {{ $errors->has('nombre') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                @error('nombre') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
            </div>
            <div class="space-y-1">
                <label for="apellido1" class="block text-sm font-medium text-gray-700">Primer Apellido <span class="text-red-500">*</span></label>
                <input type="text" name="apellido1" id="apellido1" value="{{ old('apellido1') }}" required
                       class="w-full px-4 py-2.5 border {{ $errors->has('apellido1') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                @error('apellido1') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
            </div>
            <div class="space-y-1">
                <label for="apellido2" class="block text-sm font-medium text-gray-700">Segundo Apellido</label>
                <input type="text" name="apellido2" id="apellido2" value="{{ old('apellido2') }}"
                       class="w-full px-4 py-2.5 border {{ $errors->has('apellido2') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                @error('apellido2') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
            </div>
        </div>

        {{-- DNI, Email, Fecha Nacimiento --}}
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div class="space-y-1">
                <label for="dni" class="block text-sm font-medium text-gray-700">DNI/NIE <span class="text-red-500">*</span></label>
                <input type="text" name="dni" id="dni" value="{{ old('dni') }}" required
                       class="w-full px-4 py-2.5 border {{ $errors->has('dni') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                @error('dni') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
            </div>
            <div class="space-y-1">
                <label for="email" class="block text-sm font-medium text-gray-700">Email <span class="text-red-500">*</span></label>
                <input type="email" name="email" id="email" value="{{ old('email') }}" required
                       class="w-full px-4 py-2.5 border {{ $errors->has('email') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                @error('email') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
            </div>
            <div class="space-y-1">
                <label for="fecha_nacimiento" class="block text-sm font-medium text-gray-700">Fecha de Nacimiento</label>
                <input type="date" name="fecha_nacimiento" id="fecha_nacimiento" value="{{ old('fecha_nacimiento') }}"
                       class="w-full px-4 py-2.5 border {{ $errors->has('fecha_nacimiento') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                @error('fecha_nacimiento') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
            </div>
        </div>

        {{-- Sexo, Teléfono y Número Seguridad Social --}}
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div class="space-y-1">
                <label for="sexo" class="block text-sm font-medium text-gray-700">Sexo</label>
                <select name="sexo" id="sexo"
                        class="w-full px-4 py-2.5 border {{ $errors->has('sexo') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                    <option value="" {{ old('sexo') ? '' : 'selected' }}>Seleccionar...</option>
                    <option value="Hombre" {{ old('sexo') == 'Hombre' ? 'selected' : '' }}>Hombre</option>
                    <option value="Mujer" {{ old('sexo') == 'Mujer' ? 'selected' : '' }}>Mujer</option>
                    <option value="Otro" {{ old('sexo') == 'Otro' ? 'selected' : '' }}>Otro</option>
                </select>
                @error('sexo') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
            </div>
            <div class="space-y-1">
                <label for="telefono" class="block text-sm font-medium text-gray-700">Teléfono</label>
                <input type="tel" name="telefono" id="telefono" value="{{ old('telefono') }}"
                       class="w-full px-4 py-2.5 border {{ $errors->has('telefono') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors"
                       placeholder="Ej: 600123456">
                @error('telefono') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
            </div>
            <div class="space-y-1">
                <label for="num_seguridad_social" class="block text-sm font-medium text-gray-700">Nº Seguridad Social</label>
                <input type="text" name="num_seguridad_social" id="num_seguridad_social" value="{{ old('num_seguridad_social') }}"
                       class="w-full px-4 py-2.5 border {{ $errors->has('num_seguridad_social') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors"
                       placeholder="Ej: 12/34567890/12">
                @error('num_seguridad_social') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
            </div>
        </div>

        {{-- Dirección --}}
        <div class="space-y-1">
            <label for="direccion" class="block text-sm font-medium text-gray-700">Dirección</label>
            <textarea name="direccion" id="direccion" rows="3"
                      class="w-full px-4 py-2.5 border {{ $errors->has('direccion') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors resize-none"
                      placeholder="Calle, número, piso, puerta...">{{ old('direccion') }}</textarea>
            @error('direccion') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
        </div>
    </div>
</div>

        {{-- Sección Información Profesional --}}
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
            <div class="bg-gradient-to-r from-green-50 to-emerald-50 px-6 py-4 border-b border-gray-200">
                 <h2 class="text-lg font-semibold text-gray-900">Información Profesional</h2>
            </div>
            <div class="p-6 space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="space-y-1">
                        <label for="titulacion_academica" class="block text-sm font-medium text-gray-700">Titulación Académica</label>
                        {{-- Para Titulación --}}
<select name="titulacion_academica" id="titulacion_academica" class="...">
    <option value="">Seleccionar titulación...</option>
    @foreach($opcionesTitulacion as $opcion)
        <option value="{{ $opcion }}" {{ old('titulacion_academica', $profesor->titulacion_academica ?? '') == $opcion ? 'selected' : '' }}>
            {{ $opcion }}
        </option>
    @endforeach
</select>
                    </div>
                    <div class="space-y-1">
                        <label for="especialidad" class="block text-sm font-medium text-gray-700">Especialidad</label>
                        <select name="especialidad" id="especialidad" class="...">
    <option value="">Seleccionar especialidadión...</option>
    @foreach($opcionesEspecialidad as $opcion)
        <option value="{{ $opcion }}" {{ old('especialidad', $profesor->especialidad ?? '') == $opcion ? 'selected' : '' }}>
            {{ $opcion }}
        </option>
    @endforeach
</select>
                    </div>
                </div>
            </div>
        </div>

        {{-- Botones de Acción --}}
        <div class="flex flex-col sm:flex-row justify-end gap-3 pt-4">
            <a href="{{ route('admin.profesores.index') }}"
               class="px-6 py-2.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors text-center">
                Cancelar
            </a>
            <button type="submit"
                    class="px-6 py-2.5 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-lg shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors">
                Guardar Profesor
            </button>
        </div>
    </form>
</div>
</div>
@endsection

@push('scripts')
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Formateo y validación básica para DNI/NIE
    const dniInput = document.getElementById('dni');
    if (dniInput) {
        dniInput.addEventListener('input', function() {
            let value = this.value.toUpperCase();
            // Permitir solo números y letras, máximo 9 caracteres
            value = value.replace(/[^A-Z0-9]/g, '').substring(0, 9);
            this.value = value;

            // Validación básica de formato (opcional, para feedback visual inmediato)
            // La validación principal se hará en el backend
            const dniRegex = /^[0-9]{8}[A-Z]$/;
            const nieRegex = /^[XYZ][0-9]{7}[A-Z]$/;
            const parentDiv = this.closest('.space-y-1'); // Para el mensaje de error si lo hubiera

            if (value && !dniRegex.test(value) && !nieRegex.test(value)) {
                this.classList.add('border-red-500', 'focus:ring-red-500', 'focus:border-red-500');
                this.classList.remove('border-gray-300', 'focus:ring-indigo-500', 'focus:border-indigo-500');
                // Opcional: Añadir un mensaje de error de formato en JS
                // if (parentDiv) {
                //     let errorMsg = parentDiv.querySelector('.js-format-error');
                //     if (!errorMsg) {
                //         errorMsg = document.createElement('p');
                //         errorMsg.className = 'text-orange-500 text-xs mt-1 js-format-error';
                //         parentDiv.appendChild(errorMsg);
                //     }
                //     errorMsg.textContent = 'Formato DNI/NIE inválido.';
                // }
            } else {
                this.classList.remove('border-red-500', 'focus:ring-red-500', 'focus:border-red-500');
                this.classList.add('border-gray-300', 'focus:ring-indigo-500', 'focus:border-indigo-500');
                // if (parentDiv) {
                //     const errorMsg = parentDiv.querySelector('.js-format-error');
                //     if (errorMsg) errorMsg.remove();
                // }
            }
        });
    }

    // Formateo automático para número de seguridad social (NUSS)
    const nussInput = document.getElementById('num_seguridad_social'); // Asegúrate que el ID del input es 'num_seguridad_social'
    if (nussInput) {
        nussInput.addEventListener('input', function() {
            let value = this.value.replace(/\D/g, ''); // Eliminar no dígitos
            let formattedValue = '';

            if (value.length > 0) {
                formattedValue = value.substring(0, 2); // Primeros 2 dígitos
                if (value.length > 2) {
                    // Siguientes 8 dígitos (o menos si no hay tantos)
                    formattedValue += '/' + value.substring(2, 10);
                    if (value.length > 10) {
                        // Últimos 2 dígitos (o menos)
                        formattedValue += '/' + value.substring(10, 12);
                    }
                }
            }
            this.value = formattedValue;
        });
    }

    // Formateo para teléfono (solo números, máximo 9 o el que definas)
    const telefonoInput = document.getElementById('telefono'); // Asegúrate que el ID del input es 'telefono'
    if (telefonoInput) {
        telefonoInput.addEventListener('input', function() {
            this.value = this.value.replace(/\D/g, '').substring(0, 9); // Permitir máximo 9 dígitos
        });
    }

    // Puedes añadir aquí formateo para otros campos si es necesario, como CP, etc.
    // Ejemplo para Código Postal (si lo tuvieras como input 'cp_profesor'):
    /*
    const cpInput = document.getElementById('cp_profesor');
    if (cpInput) {
        cpInput.addEventListener('input', function() {
            this.value = this.value.replace(/\D/g, '').substring(0, 5);
        });
    }
    */
});
</script>
@endpush
</file>

<file path="resources/views/admin/profesores/edit.blade.php">
@extends('layouts.admin')

@section('title', 'Editar Profesor: ' . $profesore->nombre . ' ' . $profesore->apellido1) {{-- CAMBIO: Título dinámico --}}
@section('page-title', 'Editar Profesor') {{-- CAMBIO: Título en el header --}}

@section('content')
<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        {{-- Header --}}
        <div class="mb-8">
            <div class="flex items-center space-x-3">
                <div class="p-3 bg-indigo-100 rounded-lg">
                    {{-- Icono para editar --}}
                    <svg class="w-8 h-8 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                    </svg>
                </div>
                <div>
                    <h1 class="text-3xl font-bold text-gray-900">Editar Profesor</h1>
                    <p class="text-gray-600 mt-1">Modifique los campos necesarios para <strong class="font-semibold">{{ $profesore->nombre }} {{ $profesore->apellido1 }}</strong>.</p>
                </div>
            </div>
        </div>

        {{-- Mostrar Errores de Validación Generales (Opcional) --}}
        @if ($errors->any())
            <div class="mb-6 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg shadow-sm">
                <strong class="font-bold">¡Atención! Por favor, corrige los errores:</strong>
                <ul class="mt-2 list-disc list-inside text-sm">
                    @foreach ($errors->all() as $error)
                        <li>{{ $error }}</li>
                    @endforeach
                </ul>
            </div>
        @endif

        {{-- CAMBIO: La acción apunta a 'update' y pasamos $profesore --}}
        <form method="POST" action="{{ route('admin.profesores.update', $profesore) }}" class="space-y-8">
            @csrf
            @method('PUT') {{-- <--- CAMBIO: Directiva para simular el método HTTP PUT --}}

            {{-- Información Personal --}}
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
                <div class="bg-gradient-to-r from-blue-50 to-indigo-50 px-6 py-4 border-b border-gray-200">
                    <h2 class="text-lg font-semibold text-gray-900">Información Personal</h2>
                </div>
                <div class="p-6 space-y-6">
                    {{-- Nombre y Apellidos --}}
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div class="space-y-1">
                            <label for="nombre" class="block text-sm font-medium text-gray-700">Nombre <span class="text-red-500">*</span></label>
                            {{-- CAMBIO: old() ahora tiene $profesore->nombre como segundo argumento --}}
                            <input type="text" name="nombre" id="nombre" value="{{ old('nombre', $profesore->nombre) }}" required
                                   class="w-full px-4 py-2.5 border {{ $errors->has('nombre') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                            @error('nombre') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="apellido1" class="block text-sm font-medium text-gray-700">Primer Apellido <span class="text-red-500">*</span></label>
                            <input type="text" name="apellido1" id="apellido1" value="{{ old('apellido1', $profesore->apellido1) }}" required
                                   class="w-full px-4 py-2.5 border {{ $errors->has('apellido1') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                            @error('apellido1') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="apellido2" class="block text-sm font-medium text-gray-700">Segundo Apellido</label>
                            <input type="text" name="apellido2" id="apellido2" value="{{ old('apellido2', $profesore->apellido2) }}"
                                   class="w-full px-4 py-2.5 border {{ $errors->has('apellido2') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                            @error('apellido2') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                    </div>

                    {{-- DNI, Email, Fecha Nacimiento (Repetir el patrón de value="{{ old('campo', $profesore->campo) }}" para todos) --}}
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div class="space-y-1">
                            <label for="dni" class="block text-sm font-medium text-gray-700">DNI/NIE <span class="text-red-500">*</span></label>
                            <input type="text" name="dni" id="dni" value="{{ old('dni', $profesore->dni) }}" required
                                   class="w-full px-4 py-2.5 border {{ $errors->has('dni') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                            @error('dni') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="email" class="block text-sm font-medium text-gray-700">Email <span class="text-red-500">*</span></label>
                            <input type="email" name="email" id="email" value="{{ old('email', $profesore->email) }}" required
                                   class="w-full px-4 py-2.5 border {{ $errors->has('email') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                            @error('email') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="fecha_nacimiento" class="block text-sm font-medium text-gray-700">Fecha de Nacimiento</label>
                            <input type="date" name="fecha_nacimiento" id="fecha_nacimiento" value="{{ old('fecha_nacimiento', $profesore->fecha_nacimiento) }}"
                                   class="w-full px-4 py-2.5 border {{ $errors->has('fecha_nacimiento') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                            @error('fecha_nacimiento') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                    </div>

                    {{-- Sexo, Teléfono y Número Seguridad Social (Repetir patrón old) --}}
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div class="space-y-1">
                            <label for="sexo" class="block text-sm font-medium text-gray-700">Sexo</label>
                            <select name="sexo" id="sexo"
                                    class="w-full px-4 py-2.5 border {{ $errors->has('sexo') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                                <option value="" >Seleccionar...</option>
                                <option value="Hombre" {{ old('sexo', $profesore->sexo) == 'Hombre' ? 'selected' : '' }}>Hombre</option>
                                <option value="Mujer" {{ old('sexo', $profesore->sexo) == 'Mujer' ? 'selected' : '' }}>Mujer</option>
                                <option value="Otro" {{ old('sexo', $profesore->sexo) == 'Otro' ? 'selected' : '' }}>Otro</option>
                            </select>
                            @error('sexo') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="telefono" class="block text-sm font-medium text-gray-700">Teléfono</label>
                            <input type="tel" name="telefono" id="telefono" value="{{ old('telefono', $profesore->telefono) }}"
                                   class="w-full px-4 py-2.5 border {{ $errors->has('telefono') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors"
                                   placeholder="Ej: 600123456">
                            @error('telefono') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                         <div class="space-y-1">
                            <label for="num_seguridad_social" class="block text-sm font-medium text-gray-700">Nº Seguridad Social</label>
                            <input type="text" name="num_seguridad_social" id="num_seguridad_social" value="{{ old('num_seguridad_social', $profesore->num_seguridad_social) }}"
                                   class="w-full px-4 py-2.5 border {{ $errors->has('num_seguridad_social') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors" placeholder="Ej: 12/34567890/12">
                            @error('num_seguridad_social') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                    </div>

                    <div class="space-y-1">
                        <label for="direccion" class="block text-sm font-medium text-gray-700">Dirección</label>
                        <textarea name="direccion" id="direccion" rows="3"
                                  class="w-full px-4 py-2.5 border {{ $errors->has('direccion') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors resize-none"
                                  placeholder="Calle, número, piso, puerta...">{{ old('direccion', $profesore->direccion) }}</textarea>
                        @error('direccion') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                    </div>
                </div>
            </div>

            {{-- Información Profesional (Repetir patrón old) --}}
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
                <div class="bg-gradient-to-r from-green-50 to-emerald-50 px-6 py-4 border-b border-gray-200">
                    <h2 class="text-lg font-semibold text-gray-900">Información Profesional</h2>
                </div>
                <div class="p-6 space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="space-y-1">
                            <label for="titulacion_academica" class="block text-sm font-medium text-gray-700">Titulación Académica</label>
                             <select name="titulacion_academica" id="titulacion_academica"
                                    class="w-full px-4 py-2.5 border {{ $errors->has('titulacion_academica') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                                <option value="">Seleccionar titulación...</option>
                                @foreach(App\Models\Profesor::TITULACIONES_VALIDAS as $opcion) {{-- Asumiendo constante en modelo --}}
                                    <option value="{{ $opcion }}" {{ old('titulacion_academica', $profesore->titulacion_academica) == $opcion ? 'selected' : '' }}>
                                        {{ $opcion }}
                                    </option>
                                @endforeach
                            </select>
                            @error('titulacion_academica') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                        <div class="space-y-1">
                            <label for="especialidad" class="block text-sm font-medium text-gray-700">Especialidad</label>
                            <select name="especialidad" id="especialidad"
                                    class="w-full px-4 py-2.5 border {{ $errors->has('especialidad') ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500' }} rounded-lg shadow-sm transition-colors">
                                <option value="">Seleccionar especialidad...</option>
                                 @foreach(App\Models\Profesor::ESPECIALIDADES_VALIDAS as $opcion) {{-- Asumiendo constante en modelo --}}
                                    <option value="{{ $opcion }}" {{ old('especialidad', $profesore->especialidad) == $opcion ? 'selected' : '' }}>
                                        {{ $opcion }}
                                    </option>
                                @endforeach
                            </select>
                            @error('especialidad') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                        </div>
                    </div>
                </div>
            </div>

            {{-- Botones de Acción --}}
            <div class="flex flex-col sm:flex-row justify-end gap-3 pt-4">
                <a href="{{ route('admin.profesores.show', $profesore->id) }}" {{-- CAMBIO: Enlaza a la vista de detalles del profesor actual --}}
                   class="px-6 py-2.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors text-center">
                    Cancelar
                </a>
                <button type="submit"
                        class="px-6 py-2.5 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-lg shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors">
                    Actualizar Profesor {{-- CAMBIO: Texto del botón --}}
                </button>
            </div>
        </form>
    </div>
</div>
@endsection
@push('scripts')
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Formateo y validación básica para DNI/NIE
    const dniInput = document.getElementById('dni');
    if (dniInput) {
        dniInput.addEventListener('input', function() {
            let value = this.value.toUpperCase();
            value = value.replace(/[^A-Z0-9]/g, '').substring(0, 9);
            this.value = value;

            const dniRegex = /^[0-9]{8}[A-Z]$/;
            const nieRegex = /^[XYZ][0-9]{7}[A-Z]$/;
            const parentDiv = this.closest('.space-y-1');
            let errorMsg = parentDiv ? parentDiv.querySelector('.js-dni-format-error') : null;

            if (value && value.length === 9 && !dniRegex.test(value) && !nieRegex.test(value)) {
                this.classList.add('border-red-500', 'focus:ring-red-500', 'focus:border-red-500');
                this.classList.remove('border-gray-300', 'focus:ring-indigo-500', 'focus:border-indigo-500');
                if (parentDiv && !errorMsg) {
                    errorMsg = document.createElement('p');
                    errorMsg.className = 'text-orange-600 text-xs mt-1 js-dni-format-error';
                    parentDiv.appendChild(errorMsg);
                }
                if (errorMsg) errorMsg.textContent = 'Formato DNI/NIE (8N+L o X/Y/Z+7N+L).';
            } else {
                if (! {{ $errors->has('dni') ? 'true' : 'false' }} ) {
                    this.classList.remove('border-red-500', 'focus:ring-red-500', 'focus:border-red-500');
                    this.classList.add('border-gray-300', 'focus:ring-indigo-500', 'focus:border-indigo-500');
                }
                if (errorMsg) errorMsg.remove();
            }
        });
    }

    // Formateo automático para número de seguridad social (NUSS)
    const nussInput = document.getElementById('num_seguridad_social');
    if (nussInput) {
        nussInput.addEventListener('input', function() {
            let value = this.value.replace(/\D/g, '');
            let formattedValue = '';
            if (value.length > 0) {
                formattedValue = value.substring(0, 2);
                if (value.length > 2) {
                    formattedValue += '/' + value.substring(2, 10);
                    if (value.length > 10) {
                        formattedValue += '/' + value.substring(10, 12);
                    }
                }
            }
            this.value = formattedValue;
        });
    }

    // Formateo para teléfono
    const telefonoInput = document.getElementById('telefono');
    if (telefonoInput) {
        telefonoInput.addEventListener('input', function() {
            this.value = this.value.replace(/\D/g, '').substring(0, 9);
        });
    }
});
</script>
@endpush
</file>

<file path="resources/views/admin/profesores/index.blade.php">
@extends('layouts.admin')

@section('title', 'Gestión de Profesores')
@section('page-title', 'Gestión de Profesores')

@section('content')
    {{-- Mensajes Flash de Sesión - Diseño mejorado --}}
    @if (session('success'))
        <div class="mb-6 px-4 py-3 rounded-lg relative bg-gradient-to-r from-green-50 to-green-100 border-l-4 border-green-400 text-green-800 shadow-sm animate-fadeIn" role="alert">
            <div class="flex items-center">
                <i class="bi bi-check-circle-fill text-green-500 mr-3"></i>
                <div>
                    <strong class="font-semibold">¡Éxito!</strong>
                    <p class="text-sm mt-1">{{ session('success') }}</p>
                </div>
            </div>
        </div>
    @endif
    @if (session('error'))
        <div class="mb-6 px-4 py-3 rounded-lg relative bg-gradient-to-r from-red-50 to-red-100 border-l-4 border-red-400 text-red-800 shadow-sm animate-fadeIn" role="alert">
            <div class="flex items-center">
                <i class="bi bi-exclamation-triangle-fill text-red-500 mr-3"></i>
                <div>
                    <strong class="font-semibold">¡Atención!</strong>
                    <p class="text-sm mt-1">{{ session('error') }}</p>
                </div>
            </div>
        </div>
    @endif

    <!-- KPIs / Tarjetas de Resumen - Diseño mejorado -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="bg-gradient-to-br from-white to-gray-50 p-6 rounded-xl shadow-sm border border-gray-100 hover:shadow-md transition-all duration-200 group">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-xs font-semibold text-gray-600 uppercase tracking-wider mb-2">Total Profesores</p>
                    <p class="text-3xl font-bold text-gray-900">{{ $totalProfesores ?? '0' }}</p>
                </div>
                <div class="p-3 bg-blue-100 rounded-lg group-hover:bg-blue-200 transition-colors duration-200">
                    <i class="bi bi-people-fill text-2xl text-blue-600"></i>
                </div>
            </div>
        </div>
        
        <div class="bg-gradient-to-br from-white to-gray-50 p-6 rounded-xl shadow-sm border border-gray-100 hover:shadow-md transition-all duration-200 group">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-xs font-semibold text-gray-600 uppercase tracking-wider mb-2">Media Cursos/Profesor</p>
                    <p class="text-3xl font-bold text-gray-900">{{ number_format($mediaCursosPorProfesor ?? 0, 1) }}</p>
                </div>
                <div class="p-3 bg-green-100 rounded-lg group-hover:bg-green-200 transition-colors duration-200">
                    <i class="bi bi-graph-up text-2xl text-green-600"></i>
                </div>
            </div>
        </div>
        
        <div class="bg-gradient-to-br from-white to-gray-50 p-6 rounded-xl shadow-sm border border-gray-100 hover:shadow-md transition-all duration-200 group">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-xs font-semibold text-gray-600 uppercase tracking-wider mb-2">Especialidades</p>
                    <p class="text-3xl font-bold text-gray-900">{{ count($opcionesEspecialidad ?? []) }}</p>
                </div>
                <div class="p-3 bg-purple-100 rounded-lg group-hover:bg-purple-200 transition-colors duration-200">
                    <i class="bi bi-mortarboard-fill text-2xl text-purple-600"></i>
                </div>
            </div>
        </div>
        
        <div class="bg-gradient-to-br from-white to-gray-50 p-6 rounded-xl shadow-sm border border-gray-100 hover:shadow-md transition-all duration-200 group">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-xs font-semibold text-gray-600 uppercase tracking-wider mb-2">Activos Este Mes</p>
                    <p class="text-3xl font-bold text-gray-900">{{ $totalProfesores ?? '0' }}</p>
                </div>
                <div class="p-3 bg-orange-100 rounded-lg group-hover:bg-orange-200 transition-colors duration-200">
                    <i class="bi bi-activity text-2xl text-orange-600"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Filtros y Herramientas - Diseño mejorado -->
    <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8">
        <form method="GET" action="{{ route('admin.profesores.index') }}" id="filterForm">
            <div class="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6">
                <div class="flex flex-col sm:flex-row items-stretch sm:items-center gap-4 w-full lg:w-auto">
                    <!-- Buscador mejorado -->
                    <div class="relative group">
                        <div class="absolute inset-y-0 left-0 flex items-center pl-4">
                            <i class="bi bi-search text-gray-400 group-focus-within:text-indigo-500 transition-colors duration-200"></i>
                        </div>
                        <input type="text" 
                               name="search" 
                               id="search" 
                               class="block w-full sm:w-80 pl-11 pr-4 py-3 border border-gray-300 rounded-lg bg-gray-50 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent focus:bg-white transition-all duration-200 text-sm"
                               placeholder="Buscar por nombre, DNI o email..." 
                               value="{{ $searchTerm ?? '' }}"
                               autocomplete="off">
                        @if($searchTerm)
                            <button type="button" 
                                    onclick="clearSearch()" 
                                    class="absolute inset-y-0 right-0 flex items-center pr-4 text-gray-400 hover:text-gray-600">
                                <i class="bi bi-x-lg"></i>
                            </button>
                        @endif
                    </div>
                    
                    <!-- Filtro de especialidad mejorado -->
                    <div class="relative">
                        <select name="especialidad" 
                                id="especialidad_filtro" 
                                class="block w-full sm:w-60 rounded-lg border border-gray-300 bg-gray-50 px-4 py-3 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent focus:bg-white transition-all duration-200 appearance-none cursor-pointer">
                            <option value="">📚 Todas las Especialidades</option>
                            @foreach ($opcionesEspecialidad as $especialidad)
                                <option value="{{ $especialidad }}" {{ ($filtroEspecialidad == $especialidad) ? 'selected' : '' }}>
                                    {{ $especialidad }}
                                </option>
                            @endforeach
                        </select>
                    </div>
                    
                    <!-- Botones de acción -->
                    <div class="flex gap-2">
                        <button type="submit" 
                                class="inline-flex items-center justify-center px-6 py-3 border border-gray-300 shadow-sm text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 hover:border-gray-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-200">
                            <i class="bi bi-funnel mr-2"></i>
                            Aplicar
                        </button>
                        @if($searchTerm || $filtroEspecialidad)
                            <a href="{{ route('admin.profesores.index') }}" 
                               class="inline-flex items-center justify-center px-4 py-3 text-sm font-medium rounded-lg text-gray-500 bg-gray-100 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition-all duration-200"
                               title="Limpiar filtros">
                                <i class="bi bi-arrow-clockwise"></i>
                            </a>
                        @endif
                    </div>
                </div>
                
                <!-- Botón principal mejorado -->
                <div class="flex-shrink-0 w-full sm:w-auto">
                    <a href="{{ route('admin.profesores.create') }}" 
                       class="w-full sm:w-auto inline-flex items-center justify-center px-6 py-3 border border-transparent shadow-sm text-sm font-semibold rounded-lg text-white bg-gradient-to-r from-indigo-600 to-indigo-700 hover:from-indigo-700 hover:to-indigo-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-200 transform hover:scale-105">
                        <i class="bi bi-plus-lg mr-2"></i> 
                        Nuevo Profesor
                    </a>
                </div>
            </div>
            
            <!-- Información de resultados -->
            @if($profesores->total() > 0)
                <div class="mt-4 pt-4 border-t border-gray-100">
                    <p class="text-sm text-gray-600">
                        <i class="bi bi-info-circle mr-1"></i>
                        Mostrando {{ $profesores->firstItem() }}-{{ $profesores->lastItem() }} de {{ $profesores->total() }} profesores
                        @if($searchTerm || $filtroEspecialidad)
                            <span class="ml-2 px-2 py-1 bg-indigo-100 text-indigo-800 rounded-full text-xs font-medium">
                                Filtros activos
                            </span>
                        @endif
                    </p>
                </div>
            @endif
        </form>
    </div>

    <!-- Tabla de Profesores - Diseño mejorado -->
    <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gradient-to-r from-gray-50 to-gray-100">
                    <tr>
                        <th scope="col" class="px-6 py-4 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">
                            <div class="flex items-center space-x-1">
                                <i class="bi bi-person-fill"></i>
                                <span>Profesor</span>
                            </div>
                        </th>
                        <th scope="col" class="px-6 py-4 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">
                            <div class="flex items-center space-x-1">
                                <i class="bi bi-card-text"></i>
                                <span>DNI</span>
                            </div>
                        </th>
                        <th scope="col" class="px-6 py-4 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">
                            <div class="flex items-center space-x-1">
                                <i class="bi bi-envelope"></i>
                                <span>Email</span>
                            </div>
                        </th>
                        <th scope="col" class="px-6 py-4 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">
                            <div class="flex items-center space-x-1">
                                <i class="bi bi-mortarboard"></i>
                                <span>Especialidad</span>
                            </div>
                        </th>
                        <th scope="col" class="px-6 py-4 text-center text-xs font-bold text-gray-600 uppercase tracking-wider">
                            <div class="flex items-center justify-center space-x-1">
                                <i class="bi bi-book"></i>
                                <span>Cursos</span>
                            </div>
                        </th>
                        <th scope="col" class="px-6 py-4 text-center text-xs font-bold text-gray-600 uppercase tracking-wider">
                            Acciones
                        </th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-100">
                    @forelse ($profesores as $profesor)
                        <tr class="hover:bg-gray-50 transition-colors duration-150 group">
                            <td class="px-6 py-5 whitespace-nowrap">
                                <div class="flex items-center">
                                    <div class="flex-shrink-0 h-12 w-12">
                                        <img class="h-12 w-12 rounded-full ring-2 ring-gray-200 group-hover:ring-indigo-300 transition-all duration-200" 
                                             src="https://ui-avatars.com/api/?name={{ urlencode($profesor->nombre . ' ' . $profesor->apellido1) }}&color=7F9CF5&background=EBF4FF&font-size=0.33" 
                                             alt="Avatar de {{ $profesor->nombre }}">
                                    </div>
                                    <div class="ml-4">
                                        <div class="text-sm font-semibold text-gray-900 group-hover:text-indigo-600 transition-colors duration-200">
                                            {{ $profesor->nombre }} {{ $profesor->apellido1 }} {{ $profesor->apellido2 }}
                                        </div>
                                        <div class="text-xs text-gray-500 mt-1 flex items-center">
                                            <i class="bi bi-mortarboard mr-1"></i>
                                            {{ $profesor->titulacion_academica ?? 'Titulación no especificada' }}
                                        </div>
                                    </div>
                                </div>
                            </td>
                            <td class="px-6 py-5 whitespace-nowrap">
                                <div class="text-sm text-gray-900 font-mono">{{ $profesor->dni }}</div>
                            </td>
                            <td class="px-6 py-5 whitespace-nowrap">
                                <div class="text-sm text-gray-700">
                                    <a href="mailto:{{ $profesor->email }}" 
                                       class="hover:text-indigo-600 transition-colors duration-200 flex items-center">
                                        <i class="bi bi-envelope-fill mr-1 text-xs"></i>
                                        {{ $profesor->email }}
                                    </a>
                                </div>
                            </td>
                            <td class="px-6 py-5 whitespace-nowrap">
                                @if($profesor->especialidad)
                                    <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                        {{ $profesor->especialidad }}
                                    </span>
                                @else
                                    <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-600">
                                        Sin especialidad
                                    </span>
                                @endif
                            </td>
                            <td class="px-6 py-5 whitespace-nowrap text-center">
                                <div class="flex items-center justify-center">
                                    <span class="inline-flex items-center justify-center h-8 w-8 rounded-full text-sm font-semibold
                                        {{ $profesor->cursos_count > 0 ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-600' }}">
                                        {{ $profesor->cursos_count }}
                                    </span>
                                </div>
                            </td>
                            <td class="px-6 py-5 whitespace-nowrap text-center">
                                <div class="flex items-center justify-center space-x-2">
                                <a href="{{ route('admin.profesores.show', ['profesore' => $profesor]) }}" class="inline-flex items-center justify-center h-8 w-8 rounded-lg text-gray-400 hover:text-blue-600 hover:bg-blue-50 transition-all duration-200 group/btn"
                                    title="Ver detalles">
                                    <i class="bi bi-eye-fill group-hover/btn:scale-110 transition-transform duration-200"></i>
                                </a>
                                    <a href="{{ route('admin.profesores.edit', ['profesore' => $profesor]) }}" 
                                       class="inline-flex items-center justify-center h-8 w-8 rounded-lg text-gray-400 hover:text-indigo-600 hover:bg-indigo-50 transition-all duration-200 group/btn"
                                       title="Editar información">
                                        <i class="bi bi-pencil-fill group-hover/btn:scale-110 transition-transform duration-200"></i>
                                    </a>
                                    <button type="button"
                                            onclick="confirmDelete('{{ route('admin.profesores.destroy', $profesor->id) }}', '{{ addslashes($profesor->nombre . ' ' . $profesor->apellido1) }}')"
                                            class="inline-flex items-center justify-center h-8 w-8 rounded-lg text-gray-400 hover:text-red-600 hover:bg-red-50 transition-all duration-200 group/btn"
                                            title="Eliminar profesor">
                                        <i class="bi bi-trash-fill group-hover/btn:scale-110 transition-transform duration-200"></i>
                                    </button>

                                    
                                </div>
                            </td>
                        </tr>
                    @empty
                        <tr>
                            <td colspan="6" class="px-6 py-12 text-center">
                                <div class="flex flex-col items-center justify-center space-y-4">
                                    <div class="p-4 bg-gray-100 rounded-full">
                                        <i class="bi bi-people text-4xl text-gray-400"></i>
                                    </div>
                                    <div class="text-center">
                                        <h3 class="text-lg font-medium text-gray-900 mb-2">No hay profesores</h3>
                                        <p class="text-sm text-gray-500 mb-4">
                                            @if($searchTerm || $filtroEspecialidad)
                                                No se encontraron profesores que coincidan con los criterios de búsqueda.
                                            @else
                                                Aún no has agregado ningún profesor al sistema.
                                            @endif
                                        </p>
                                        @if(!$searchTerm && !$filtroEspecialidad)
                                            <a href="{{ route('admin.profesores.create') }}" 
                                               class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-indigo-600 hover:bg-indigo-700 transition-colors duration-200">
                                                <i class="bi bi-plus-lg mr-2"></i>
                                                Agregar primer profesor
                                            </a>
                                        @else
                                            <button type="button" 
                                                    onclick="clearFilters()" 
                                                    class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-200">
                                                <i class="bi bi-arrow-clockwise mr-2"></i>
                                                Limpiar filtros
                                            </button>
                                        @endif
                                    </div>
                                </div>
                            </td>
                        </tr>
                    @endforelse
                </tbody>
            </table>
        </div>
    </div>

    <!-- Paginación mejorada -->
    @if ($profesores->hasPages())
        <div class="mt-8 px-6 py-4 bg-white rounded-xl shadow-sm border border-gray-200">
            <div class="flex items-center justify-between">
                <div class="text-sm text-gray-600">
                    Página {{ $profesores->currentPage() }} de {{ $profesores->lastPage() }}
                </div>
                <div class="pagination-wrapper">
                    {{ $profesores->appends(request()->query())->links() }}
                </div>
            </div>
        </div>
    @endif

    <!-- Modal de confirmación de eliminación -->
    <!-- <div id="deleteModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 hidden">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-xl bg-white">
            <div class="mt-3 text-center">
                <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4">
                    <i class="bi bi-exclamation-triangle text-red-600 text-xl"></i>
                </div>
                <h3 class="text-lg font-semibold text-gray-900 mb-2">Eliminar Profesor</h3>
                <p class="text-sm text-gray-500 mb-4">
                    ¿Estás seguro de que quieres eliminar a <strong id="profesorName"></strong>?
                    Esta acción no se puede deshacer.
                </p>
                <div class="flex justify-center space-x-3">
                    <button type="button"
                            onclick="closeDeleteModal()"
                            class="px-4 py-2 bg-gray-300 text-gray-800 text-sm font-medium rounded-lg hover:bg-gray-400 transition-colors duration-200">
                        Cancelar
                    </button>
                    <form id="deleteForm" method="POST"> {{-- La action se establece con JS --}}
                        @csrf
                        @method('DELETE')
                        <button type="submit"
                                class="px-4 py-2 bg-red-600 text-white text-sm font-medium rounded-lg hover:bg-red-700 transition-colors duration-200">
                            Eliminar
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div> -->

<!-- Modal de confirmación de eliminación -->
<x-delete-modal title="Eliminar profesor" />
@endsection

@push('styles')
<style>
    .animate-fadeIn {
        animation: fadeIn 0.5s ease-in-out;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .pagination-wrapper .pagination {
        display: flex;
        list-style: none;
        border-radius: 0.5rem;
        padding: 0;
        margin: 0;
    }
    
    .pagination-wrapper .pagination li {
        margin: 0 2px;
    }
    
    .pagination-wrapper .pagination li a,
    .pagination-wrapper .pagination li span {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0.5rem 0.75rem;
        text-decoration: none;
        color: #6b7280;
        background-color: white;
        border: 1px solid #d1d5db;
        border-radius: 0.375rem;
        transition: all 0.2s;
        font-size: 0.875rem;
    }
    
    .pagination-wrapper .pagination li a:hover {
        background-color: #f3f4f6;
        color: #374151;
    }
    
    .pagination-wrapper .pagination li.active span {
        background-color: #4f46e5;
        color: white;
        border-color: #4f46e5;
    }
</style>
@endpush

@push('scripts')
<script>
    // Función para limpiar búsqueda
    function clearSearch() {
        document.getElementById('search').value = '';
        document.getElementById('filterForm').submit();
    }
    
    // Función para limpiar todos los filtros
    function clearFilters() {
        window.location.href = '{{ route("admin.profesores.index") }}';
    }
    
    // Función para confirmar eliminación
     /* function confirmDelete(profesorId, profesorName) {
        document.getElementById('profesorName').textContent = profesorName;
        document.getElementById('deleteForm').action = '{{ route("admin.profesores.destroy", ["profesore" => ":id"]) }}'.replace(':id', profesorId);
        document.getElementById('deleteModal').classList.remove('hidden');
    }
    
    // Función para cerrar modal de eliminación
    function closeDeleteModal() {
        document.getElementById('deleteModal').classList.add('hidden');
    }
    
    // Cerrar modal con ESC
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            closeDeleteModal();
        }
    });
    
    // Cerrar modal clickeando fuera
    document.getElementById('deleteModal').addEventListener('click', function(event) {
        if (event.target === this) {
            closeDeleteModal();
        }
    }); */
    
    // Auto-submit en cambio de filtro
    document.getElementById('especialidad_filtro').addEventListener('change', function() {
        document.getElementById('filterForm').submit();
    });
    
    // Feedback visual al enviar formulario
    document.getElementById('filterForm').addEventListener('submit', function() {
        const submitBtn = this.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<i class="bi bi-arrow-clockwise animate-spin mr-2"></i>Aplicando...';
        submitBtn.disabled = true;
        
        setTimeout(() => {
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        }, 2000);
    });
</script>
@endpush
</file>

<file path="resources/views/admin/profesores/show.blade.php">
@extends('layouts.admin')

@section('title', 'Detalles del Profesor: ' . $profesore->nombre . ' ' . $profesore->apellido1)
@section('page-title', 'Detalles del Profesor')

@section('content')
    {{-- Bloque de Mensajes Flash --}}
    @if (session('success'))
        <div class="mb-6 px-4 py-3 rounded-lg relative bg-gradient-to-r from-green-50 to-green-100 border-l-4 border-green-400 text-green-800 shadow-sm animate-fadeIn" role="alert">
            <div class="flex items-center">
                <i class="bi bi-check-circle-fill text-green-500 mr-3"></i>
                <div><strong class="font-semibold">¡Éxito!</strong> <p class="text-sm mt-1">{{ session('success') }}</p></div>
            </div>
        </div>
    @endif
    @if (session('error'))
         <div class="mb-6 px-4 py-3 rounded-lg relative bg-gradient-to-r from-red-50 to-red-100 border-l-4 border-red-400 text-red-800 shadow-sm animate-fadeIn" role="alert">
            <div class="flex items-center">
                <i class="bi bi-exclamation-triangle-fill text-red-500 mr-3"></i>
                <div><strong class="font-semibold">¡Atención!</strong> <p class="text-sm mt-1">{{ session('error') }}</p></div>
            </div>
        </div>
    @endif

    <div class="bg-white p-6 md:p-8 rounded-xl shadow-lg border border-gray-200">
        {{-- Cabecera con Avatar e Info Principal --}}
        <div class="flex flex-col md:flex-row items-center md:items-start mb-6 pb-6 border-b border-gray-200">
            <div class="flex-shrink-0 mb-4 md:mb-0 md:mr-8">
            {{-- DESPUÉS (con comprobaciones): --}}
@php
    $inicialNombre = (!empty($profesore->nombre)) ? $profesore->nombre[0] : '';
    $inicialApellido = (!empty($profesore->apellido1)) ? $profesore->apellido1[0] : '';
    $nombreParaAvatar = trim($inicialNombre . $inicialApellido);
    // Si después de todo no hay iniciales (ej: nombres vacíos), ponemos un placeholder para el avatar
    if (empty($nombreParaAvatar)) {
        $nombreParaAvatar = 'N A'; // O simplemente "P" de Profesor
    }
@endphp
<img class="h-32 w-32 rounded-full object-cover shadow-md ring-2 ring-indigo-200"
     src="https://ui-avatars.com/api/?name={{ urlencode($nombreParaAvatar) }}&size=128&background=6366F1&color=FFFFFF&bold=true"
     alt="Avatar de {{ $profesore->nombre ?? 'Profesor' }}">
            </div>
            <div class="text-center md:text-left">
                <h2 class="text-3xl font-bold text-gray-900">{{ $profesore->nombre }} {{ $profesore->apellido1 }} {{ $profesore->apellido2 ?? '' }}</h2>
                <p class="text-md text-gray-600 mt-1">ID Profesor (DNI): {{ $profesore->dni ?? 'N/A' }}</p>
                <p class="text-sm text-gray-500 mt-1">{{ $profesore->email ?? 'Email no especificado' }}</p>
            </div>
        </div>

        {{-- Detalles Adicionales en Grid --}}
        <h3 class="text-xl font-semibold text-gray-800 mb-4 mt-6">Información Detallada</h3>
        <dl class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-4 text-sm">
            <div class="bg-gray-50 p-3 rounded-lg">
                <dt class="font-medium text-gray-500">Fecha de Nacimiento</dt>
                <dd class="mt-1 text-gray-900">{{ $profesore->fecha_nacimiento ? \Carbon\Carbon::parse($profesore->fecha_nacimiento)->format('d/m/Y') : 'No especificada' }}</dd>
            </div>
            <div class="bg-gray-50 p-3 rounded-lg">
                <dt class="font-medium text-gray-500">Sexo</dt>
                <dd class="mt-1 text-gray-900">{{ $profesore->sexo ?? 'No especificado' }}</dd>
            </div>
            <div class="bg-gray-50 p-3 rounded-lg">
                <dt class="font-medium text-gray-500">Teléfono</dt>
                <dd class="mt-1 text-gray-900">{{ $profesore->telefono ?? 'No especificado' }}</dd>
            </div>
            <div class="bg-gray-50 p-3 rounded-lg md:col-span-2 lg:col-span-3"> {{-- Dirección ocupa más espacio --}}
                <dt class="font-medium text-gray-500">Dirección</dt>
                <dd class="mt-1 text-gray-900">{{ $profesore->direccion ?? 'No especificada' }}</dd>
            </div>
            <div class="bg-gray-50 p-3 rounded-lg">
                <dt class="font-medium text-gray-500">Nº Seguridad Social</dt>
                <dd class="mt-1 text-gray-900">{{ $profesore->num_seguridad_social ?? 'No especificado' }}</dd>
            </div>
            <div class="bg-gray-50 p-3 rounded-lg">
                <dt class="font-medium text-gray-500">Titulación Académica</dt>
                <dd class="mt-1 text-gray-900">{{ $profesore->titulacion_academica ?? 'No especificada' }}</dd>
            </div>
            <div class="bg-gray-50 p-3 rounded-lg">
                <dt class="font-medium text-gray-500">Especialidad</dt>
                <dd class="mt-1 text-gray-900">{{ $profesore->especialidad ?? 'No especificada' }}</dd>
            </div>
        </dl>

        {{-- Sección de Cursos Impartidos --}}
        <div class="mt-8 pt-6 border-t border-gray-200">
            <h3 class="text-xl font-semibold text-gray-800 mb-4">Cursos Impartidos</h3>
            @if ($profesore->relationLoaded('cursos') && $profesore->cursos->count() > 0)
                <ul class="divide-y divide-gray-100">
                    @foreach ($profesore->cursos as $curso)
                        <li class="py-3">
                            <a href="{{ route('admin.cursos.show', $curso->id) }}" class="font-medium text-indigo-600 hover:text-indigo-800 hover:underline">
                                {{ $curso->nombre }}
                            </a>
                            <span class="text-xs text-gray-500 ml-2">({{ $curso->codigo }})</span>
                            <p class="text-xs text-gray-500">
                                Del {{ $curso->fecha_inicio ? \Carbon\Carbon::parse($curso->fecha_inicio)->format('d/m/Y') : 'N/A' }}
                                al {{ $curso->fecha_fin ? \Carbon\Carbon::parse($curso->fecha_fin)->format('d/m/Y') : 'N/A' }}
                            </p>
                        </li>
                    @endforeach
                </ul>
            @else
                 <p class="text-sm text-gray-500">Este profesor no tiene cursos asignados actualmente.</p>
            @endif
        </div>

        {{-- Botones de Acción --}}
        <div class="mt-8 pt-6 border-t border-gray-200 flex flex-col sm:flex-row justify-end gap-3">
            <a href="{{ route('admin.profesores.index') }}"
               class="px-6 py-2.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors text-center">
                Volver a la Lista
            </a>
            <a href="{{ route('admin.profesores.edit', ['profesore' => $profesore]) }}" class="px-6 py-2.5 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-lg shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors text-center">
            Editar Profesor
            </a>
            
        </div>
    </div>
@endsection

@push('scripts')
    {{-- No se necesitan scripts específicos para esta vista por ahora --}}
@endpush
</file>

<file path="resources/views/admin/schedules/create.blade.php">
{{-- resources/views/admin/schedules/create.blade.php --}}
@extends('layouts.admin')

@section('title', 'Nuevo Horario')

@section('content')
    <h1 class="text-2xl font-semibold mb-4">Crear Nuevo Horario</h1>

    <div class="bg-white p-6 rounded-lg shadow">
        <form action="{{ route('admin.schedules.store') }}" method="POST">
            @csrf

            {{-- ================================================ --}}
            {{-- INICIO DEL BLOQUE DE ERRORES --}}
            {{-- ================================================ --}}
            @if ($errors->any())
                <div x-data="{ show: true }" x-show="show" class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
                    <strong class="font-bold">¡Error de validación!</strong>
                    <span class="block sm:inline">Por favor, corrige los siguientes problemas:</span>
                    <ul class="mt-2 list-disc list-inside">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                    <span @click="show = false" class="absolute top-0 bottom-0 right-0 px-4 py-3 cursor-pointer">
                        <svg class="fill-current h-6 w-6 text-red-500" role="button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><title>Cerrar</title><path d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z"/></svg>
                    </span>
                </div>
            @endif
            {{-- ================================================ --}}
            {{-- FIN DEL BLOQUE DE ERRORES --}}
            {{-- ================================================ --}}


            {{-- Selector de Curso --}}
            <div class="mb-4">
                <label for="curso_id" class="block text-sm font-medium text-gray-700">Curso</label>
                <select name="curso_id" id="curso_id" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                    <option value="">Seleccione un curso</option>
                    @foreach($cursos as $id => $nombre)
                        <option value="{{ $id }}" {{ old('curso_id') == $id ? 'selected' : '' }}>{{ $nombre }}</option>
                    @endforeach
                </select>
                @error('curso_id') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
            </div>

            {{-- Selector de Profesor --}}
            <div class="mb-4">
                <label for="profesor_id" class="block text-sm font-medium text-gray-700">Profesor</label>
                <select name="profesor_id" id="profesor_id" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                    <option value="">Seleccione un profesor</option>
                    @foreach($profesores as $id => $nombre)
                        <option value="{{ $id }}" {{ old('profesor_id') == $id ? 'selected' : '' }}>{{ $nombre }}</option>
                    @endforeach
                </select>
                @error('profesor_id') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
            </div>

            <hr class="my-6">

            {{-- NUEVOS CAMPOS --}}
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {{-- Día de la semana --}}
                <div>
                    <label for="weekday" class="block text-sm font-medium text-gray-700">Día de la semana</label>
                    <select name="weekday" id="weekday" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                        <option value="">Seleccione un día</option>
                        @foreach(['Dom', 'Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb'] as $index => $dia)
                            <option value="{{ $index }}" {{ old('weekday') == $index ? 'selected' : '' }}>{{ $dia }}</option>
                        @endforeach
                    </select>
                    @error('weekday') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                </div>

                {{-- Hora de Inicio --}}
                <div>
                    <label for="start_time" class="block text-sm font-medium text-gray-700">Hora de Inicio</label>
                    <input type="time" name="start_time" id="start_time" value="{{ old('start_time') }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                    @error('start_time') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                </div>

                {{-- Hora de Fin --}}
                <div>
                    <label for="end_time" class="block text-sm font-medium text-gray-700">Hora de Fin</label>
                    <input type="time" name="end_time" id="end_time" value="{{ old('end_time') }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                    @error('end_time') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                </div>

                {{-- Aula --}}
                <div>
                    <label for="room" class="block text-sm font-medium text-gray-700">Aula</label>
                    <input type="text" name="room" id="room" value="{{ old('room') }}" placeholder="Ej: Aula 101" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                    @error('room') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
                </div>
            </div>

            <div class="flex items-center justify-end mt-6">
                <a href="{{ route('admin.schedules.index') }}" class="text-gray-600 hover:text-gray-900 mr-4">Cancelar</a>
                <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                    Guardar Horario
                </button>
            </div>
        </form>
    </div>
@endsection
</file>

<file path="resources/views/admin/schedules/edit.blade.php">
{{-- resources/views/admin/schedules/edit.blade.php --}}
@extends('layouts.admin')

@section('title', 'Editar Horario')

@section('content')
    <h1 class="text-2xl font-semibold mb-4">Editar Horario</h1>

    <div class="bg-white p-6 rounded-lg shadow">
        <form action="{{ route('admin.schedules.update', $schedule) }}" method="POST">
            @csrf
            @method('PUT')

            {{-- Bloque de Errores (si los hay) --}}
            @if ($errors->any())
                <div x-data="{ show: true }" x-show="show" class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
                    <strong class="font-bold">¡Error de validación!</strong>
                    {{-- ... contenido del bloque de errores ... --}}
                </div>
            @endif

            {{-- Bloque de Información del Curso (No editable) --}}
            <div class="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                <h3 class="font-bold text-lg text-blue-800 mb-2">Resumen del Curso: {{ $schedule->curso->nombre }}</h3>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                    {{-- ... el contenido del bloque de resumen que ya tienes ... --}}
                </div>
                {{-- Es importante pasar el curso_id de forma oculta para que la validación siga funcionando --}}
                <input type="hidden" name="curso_id" value="{{ $schedule->curso_id }}">
            </div>

            {{-- CAMPO ELIMINADO: Ya no mostramos el selector de Curso --}}

            {{-- Selector de Profesor (Editable) --}}
            <div class="mb-4">
                <label for="profesor_id" class="block text-sm font-medium text-gray-700">Profesor</label>
                <select name="profesor_id" id="profesor_id" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                    @foreach($profesores as $id => $nombre)
                        <option value="{{ $id }}" @selected(old('profesor_id', $schedule->profesor_id) == $id)>{{ $nombre }}</option>
                    @endforeach
                </select>
                @error('profesor_id') <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror
            </div>

            <hr class="my-6">

            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {{-- Campos de Día, Hora y Aula (Editables) --}}
                {{-- ... aquí va el resto de tu formulario (weekday, start_time, end_time, room) ... --}}
            </div>

            <div class="flex items-center justify-end mt-6">
                <a href="{{ route('admin.schedules.index') }}" class="text-gray-600 hover:text-gray-900 mr-4">Cancelar</a>
                <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-hover:bg-blue-700">
                    Actualizar Horario
                </button>
            </div>
        </form>
    </div>
@endsection
</file>

<file path="resources/views/admin/schedules/index.blade.php">
@extends('layouts.admin')

@section('title', 'Gestión de Horarios')
@section('page-title', 'Calendario de Horarios')

@push('styles')
    {{-- Estilos para el contenido extra en los eventos --}}
    <style>
        .fc-event-profesor, .fc-event-aula {
            font-size: 0.8em;
            margin-top: 2px;
        }
        .fc-event-profesor i, .fc-event-aula i {
            margin-right: 4px;
        }
    </style>
@endpush

@section('content')
    <div class="bg-white rounded-3xl shadow-2xl shadow-gray-200/50 border border-gray-200/100 p-6">
        <div id="calendar"></div>
    </div>
@endsection

@push('scripts')
    {{-- La única línea necesaria. Vite se encargará de inyectar todo el JS y CSS requerido. --}}
    @vite(['resources/js/schedules.js', 'node_modules/@fullcalendar/core/main.css'])
@endpush
</file>

<file path="resources/views/admin/dashboard.blade.php">
@extends('layouts.admin')

@section('title', 'Dashboard Overview')
@section('page-title', 'Dashboard Overview')

@section('content')
    
    
    <div class="flex flex-wrap justify-between items-center mb-6">
        <h1 class="text-2xl font-semibold text-gray-700">Dashboard Overview</h1>
    </div>
    
    

    <!-- Tarjetas resumen (KPIs) -->
<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">

{{-- Tarjeta 1: Total Students (se mantiene igual) --}}
<div class="bg-white p-6 rounded-lg shadow-lg flex items-center justify-between">
    <div>
        <p class="text-xs font-medium text-gray-500 uppercase tracking-wider">Total Students</p>
        {{-- Usar la variable correcta del controlador --}}
        <p class="text-3xl font-semibold text-gray-800 mt-1">{{ $totalStudents ?? '0' }}</p>
    </div>
    <div class="bg-blue-100 rounded-full p-3">
        <i class="bi bi-people-fill text-blue-600 text-2xl"></i>
    </div>
</div>

{{-- Tarjeta 2: Total Courses (NUEVA) --}}
<div class="bg-white p-6 rounded-lg shadow-lg flex items-center justify-between">
    <div>
        <p class="text-xs font-medium text-gray-500 uppercase tracking-wider">Total Courses</p>
        <p class="text-3xl font-semibold text-gray-800 mt-1">{{ $totalCourses ?? '0' }}</p>
    </div>
    <div class="bg-green-100 rounded-full p-3">
        <i class="bi bi-journal-bookmark-fill text-green-600 text-2xl"></i>
    </div>
</div>

{{-- Tarjeta 3: Available Teachers (se mantiene igual) --}}
<div class="bg-white p-6 rounded-lg shadow-lg flex items-center justify-between">
    <div>
        <p class="text-xs font-medium text-gray-500 uppercase tracking-wider">Available Teachers</p>
        {{-- Usar la variable correcta del controlador --}}
        <p class="text-3xl font-semibold text-gray-800 mt-1">{{ $availableTeachers ?? '0' }}</p>
    </div>
    <div class="bg-indigo-100 rounded-full p-3">
         <i class="bi bi-person-video3 text-indigo-600 text-2xl"></i>
    </div>
</div>

{{-- Tarjeta 4: Inactive Courses (NUEVA) --}}
<div class="bg-white p-6 rounded-lg shadow-lg flex items-center justify-between">
     <div>
        <p class="text-xs font-medium text-gray-500 uppercase tracking-wider">Inactive Courses</p>
        <p class="text-3xl font-semibold text-gray-800 mt-1">{{ $inactiveCourses ?? '0' }}</p>
    </div>
    <div class="bg-orange-100 rounded-full p-3">
        {{-- Icono de ejemplo: un archivo archivado o un ojo tachado --}}
        <i class="bi bi-archive-fill text-orange-500 text-2xl"></i>
    </div>
</div>

</div> <!-- Fin Grid Tarjetas -->


    <div class="grid grid-cols-1 lg:grid-cols-5 gap-6 mb-6">
        <div class="lg:col-span-3 bg-white p-4 sm:p-6 rounded-lg shadow-lg">
            <h3 class="text-lg font-semibold text-gray-700 mb-4">Enrollment Trends (Last 6 Months)</h3>
            <div class="h-[250px] sm:h-[300px]">
                <canvas id="enrollmentChart"></canvas>
            </div>
        </div>
        <div class="lg:col-span-2 bg-white p-4 sm:p-6 rounded-lg shadow-lg">
            <h3 class="text-lg font-semibold text-gray-700 mb-4">Pre-enrollment Status</h3>
             <div class="mx-auto h-[250px] sm:h-[300px] flex items-center justify-center">
                <canvas id="preenrollmentStatusChart"></canvas>
             </div>
             <div class="flex justify-center gap-4 mt-4 text-xs text-gray-500">
                <span><i class="bi bi-circle-fill text-yellow-400"></i> Pending</span>
                <span><i class="bi bi-circle-fill text-teal-500"></i> Approved</span>
                <span><i class="bi bi-circle-fill text-red-500"></i> Rejected</span>
             </div>
        </div>
    </div>

     <div class="mb-6">
        <div class="bg-white p-4 sm:p-6 rounded-lg shadow-lg">
            <h3 class="text-lg font-semibold text-gray-700 mb-4">Students per Course</h3>
            <div class="h-[300px] sm:h-[350px]">
                <canvas id="studentsPerCourseChart"></canvas>
            </div>
        </div>
    </div>

    <div class="bg-white p-4 sm:p-6 rounded-lg shadow-lg">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold text-gray-700">Recent Pre-enrollment Applications</h3>
            <a href="#" class="text-sm text-blue-600 hover:underline font-medium">See All →</a>
        </div>
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Student Name</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Course</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                {{-- En admin/dashboard.blade.php, dentro de la tabla --}}
<tbody class="bg-white divide-y divide-gray-200">
    @forelse ($recentPreEnrollments as $preinscrito)
    <tr>
        {{-- STUDENT NAME --}}
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
            <div class="flex items-center">
                <div class="flex-shrink-0 h-8 w-8">
                    @php
                        $inicialNombre = (!empty($preinscrito->nombre)) ? $preinscrito->nombre[0] : '';
                        $inicialApellido = (!empty($preinscrito->apellido1)) ? $preinscrito->apellido1[0] : '';
                    @endphp
                    <img class="h-8 w-8 rounded-full" src="https://ui-avatars.com/api/?name={{ urlencode($inicialNombre.$inicialApellido) }}&color=7F9CF5&background=EBF4FF" alt="">
                </div>
                <div class="ml-3">
                    {{ $preinscrito->nombre }} {{ $preinscrito->apellido1 }}
                </div>
            </div>
        </td>
        {{-- COURSE --}}
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            {{-- Un preinscrito no está ligado a un curso todavía, mostramos su nivel --}}
            {{ $preinscrito->nivel_formativo ?? 'N/A' }}
        </td>
        {{-- DATE --}}
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            {{ $preinscrito->created_at->format('M d, Y') }}
        </td>
        {{-- STATUS --}}
        <td class="px-6 py-4 whitespace-nowrap">
            @php
                $estadoPre = $preinscrito->estado ?? 'Pendiente';
                $badgeColorPre = 'bg-yellow-100 text-yellow-800'; // Default a Pendiente
                if ($estadoPre === 'Convertido') $badgeColorPre = 'bg-green-100 text-green-800';
                elseif ($estadoPre === 'Rechazado' || $estadoPre === 'Baja') $badgeColorPre = 'bg-red-100 text-red-800';
                elseif ($estadoPre === 'Contactado' || $estadoPre === 'Interesado') $badgeColorPre = 'bg-blue-100 text-blue-800';
            @endphp
            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full {{ $badgeColorPre }}">
                {{ $estadoPre }}
            </span>
        </td>
        {{-- ACTIONS --}}
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-400">
            <a href="{{ route('admin.preinscritos.show', $preinscrito->id) }}" class="hover:text-indigo-600" title="Ver"><i class="bi bi-eye-fill"></i></a>
            <a href="{{ route('admin.preinscritos.edit', $preinscrito->id) }}" class="ml-2 hover:text-indigo-600" title="Editar"><i class="bi bi-pencil-fill"></i></a>
        </td>
    </tr>
    @empty
    <tr>
        <td colspan="5" class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">
            No hay aplicaciones de preinscripción recientes.
        </td>
    </tr>
    @endforelse
</tbody>
            </table>
        </div>
    </div>
@endsection

@push('scripts')
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            {{--
                El bloque @php aquí puede ser útil para definir valores por defecto
                para TODAS las variables, pero vamos a confiar en que el controlador
                siempre las pasa. Si alguna vez el controlador no pasara una,
                recibirías un error de "Undefined variable", lo cual es bueno
                para detectar problemas.
            --}}

            // --- Gráfico Enrollment Trends (Líneas) ---
            const ctxEnrollment = document.getElementById('enrollmentChart');
            if (ctxEnrollment) {
                 const enrollmentConfig = {
                     type: 'line',
                     data: {
                         // Usar directamente las variables del controlador
                         labels: @json($enrollmentLabels ?? []),
                         datasets: [{
                             label: 'Nuevos Alumnos',
                             // Usar directamente las variables del controlador
                             data: @json($enrollmentData ?? []),
                             borderColor: 'rgb(59, 130, 246)',
                             tension: 0.3, // Un poco más suave
                             fill: true,
                             backgroundColor: 'rgba(59, 130, 246, 0.1)'
                         }]
                     },
                     options: {
                         responsive: true,
                         maintainAspectRatio: false,
                         scales: { y: { beginAtZero: false } },
                         plugins: { legend: { display: false } }
                     }
                 };
                 new Chart(ctxEnrollment, enrollmentConfig);
            } else {
                console.warn("Canvas 'enrollmentChart' no encontrado.");
            }

            // --- Gráfico Pre-enrollment Status (Doughnut) ---
            const ctxPreenrollmentStatus = document.getElementById('preenrollmentStatusChart');
            if (ctxPreenrollmentStatus) {
                const preenrollmentConfig = {
                    type: 'doughnut',
                    data: {
                        labels: ['Pending', 'Approved', 'Rejected'],
                        datasets: [{
                            data: [
                                {{ $preEnrollmentStatusData['pending'] ?? 0 }},
                                {{ $preEnrollmentStatusData['approved'] ?? 0 }},
                                {{ $preEnrollmentStatusData['rejected'] ?? 0 }}
                            ],
                            backgroundColor: ['rgb(251, 191, 36)', 'rgb(16, 185, 129)', 'rgb(239, 68, 68)'],
                            hoverOffset: 4
                        }]
                    },
                    options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: false } } }
                };
                new Chart(ctxPreenrollmentStatus, preenrollmentConfig);
            }

            // --- Gráfico Students per Course (Barras) ---
            const ctxStudentsPerCourse = document.getElementById('studentsPerCourseChart');
            if (ctxStudentsPerCourse) {
                const studentsConfig = {
                    type: 'bar',
                    data: {
                        labels: @json($studentsPerCourseLabels ?? []),
                        datasets: [{
                            label: 'Número de Estudiantes',
                            data: @json($studentsPerCourseData ?? []),
                            backgroundColor: 'rgb(20, 184, 166)',
                            borderColor: 'rgb(13, 148, 136)',
                            borderWidth: 1
                        }]
                    },
                    options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true } }, plugins: { legend: { display: false } } }
                };
                new Chart(ctxStudentsPerCourse, studentsConfig);
            }

        });
    </script>
@endpush
</file>

<file path="resources/views/auth/confirm-password.blade.php">
<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600">
        {{ __('This is a secure area of the application. Please confirm your password before continuing.') }}
    </div>

    <form method="POST" action="{{ route('password.confirm') }}">
        @csrf

        <!-- Password -->
        <div>
            <x-input-label for="password" :value="__('Password')" />

            <x-text-input id="password" class="block mt-1 w-full"
                            type="password"
                            name="password"
                            required autocomplete="current-password" />

            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <div class="flex justify-end mt-4">
            <x-primary-button>
                {{ __('Confirm') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>
</file>

<file path="resources/views/auth/forgot-password.blade.php">
<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600">
        {{ __('Forgot your password? No problem. Just let us know your email address and we will email you a password reset link that will allow you to choose a new one.') }}
    </div>

    <!-- Session Status -->
    <x-auth-session-status class="mb-4" :status="session('status')" />

    <form method="POST" action="{{ route('password.email') }}">
        @csrf

        <!-- Email Address -->
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email')" required autofocus />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <div class="flex items-center justify-end mt-4">
            <x-primary-button>
                {{ __('Email Password Reset Link') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>
</file>

<file path="resources/views/auth/login.blade.php">
<x-guest-layout>
    <x-auth-session-status class="mb-4 py-2 px-3 bg-blue-900/60 text-blue-200 rounded-md text-sm" :status="session('status')" />
    
    <p class="text-gray-300 text-center mb-6">
        Bienvenido al sistema de gestión. Accede para administrar cursos, alumnos y profesores de manera eficiente e intuitiva.
    </p>

    <form method="POST" action="{{ route('login') }}" class="space-y-5">
        @csrf
        
        <div class="w-full">
            <x-input-label for="email" :value="__('Correo Electrónico')" class="input-label mb-1.5 block" />
            <div class="input-group">
                <i class="fas fa-envelope input-icon"></i>
                <x-text-input id="email" class="input-field block w-full rounded-lg shadow-sm" 
                    type="email" name="email" :value="old('email')" required autofocus autocomplete="username" />
            </div>
            <x-input-error :messages="$errors->get('email')" class="mt-2 text-rose-400 text-sm" />
        </div>
        
        <div class="w-full">
            <x-input-label for="password" :value="__('Contraseña')" class="input-label mb-1.5 block" />
            <div class="input-group">
                <i class="fas fa-lock input-icon"></i>
                <x-text-input id="password" class="input-field block w-full rounded-lg shadow-sm" 
                    type="password" name="password" required autocomplete="current-password" />
            </div>
            <x-input-error :messages="$errors->get('password')" class="mt-2 text-rose-400 text-sm" />
        </div>
        
        <div class="flex items-center justify-between">
            <div class="block">
                <label for="remember_me" class="inline-flex items-center">
                    <input id="remember_me" type="checkbox" class="checkbox-custom rounded border-gray-600 bg-gray-700 text-blue-500 shadow-sm focus:ring-blue-500" name="remember">
                    <span class="ml-2 text-sm text-gray-300">{{ __('Recordarme') }}</span>
                </label>
            </div>
            
            @if (Route::has('password.request'))
                <a class="forgot-link text-sm rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" href="{{ route('password.request') }}">
                    {{ __('¿Olvidaste tu contraseña?') }}
                </a>
            @endif
        </div>
        
        <div class="mt-6">
            <x-primary-button class="login-btn w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-base font-medium text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                <i class="fas fa-sign-in-alt mr-2"></i> {{ __('Iniciar Sesión') }}
            </x-primary-button>
        </div>
        
        <div class="flex justify-center space-x-4 mt-6">
            <a href="#" class="text-gray-400 hover:text-white transition"><i class="fas fa-key text-lg"></i></a>
            <a href="#" class="text-gray-400 hover:text-white transition"><i class="fas fa-book text-lg"></i></a>
            <a href="#" class="text-gray-400 hover:text-white transition"><i class="fas fa-users text-lg"></i></a>
            <a href="#" class="text-gray-400 hover:text-white transition"><i class="fas fa-chalkboard-teacher text-lg"></i></a>
        </div>
    </form>
</x-guest-layout>
</file>

<file path="resources/views/auth/register.blade.php">
<x-guest-layout>
    <form method="POST" action="{{ route('register') }}">
        @csrf

        <!-- Name -->
        <div>
            <x-input-label for="name" :value="__('Name')" />
            <x-text-input id="name" class="block mt-1 w-full" type="text" name="name" :value="old('name')" required autofocus autocomplete="name" />
            <x-input-error :messages="$errors->get('name')" class="mt-2" />
        </div>

        <!-- Email Address -->
        <div class="mt-4">
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email')" required autocomplete="username" />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <!-- Password -->
        <div class="mt-4">
            <x-input-label for="password" :value="__('Password')" />

            <x-text-input id="password" class="block mt-1 w-full"
                            type="password"
                            name="password"
                            required autocomplete="new-password" />

            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <!-- Confirm Password -->
        <div class="mt-4">
            <x-input-label for="password_confirmation" :value="__('Confirm Password')" />

            <x-text-input id="password_confirmation" class="block mt-1 w-full"
                            type="password"
                            name="password_confirmation" required autocomplete="new-password" />

            <x-input-error :messages="$errors->get('password_confirmation')" class="mt-2" />
        </div>

        <div class="flex items-center justify-end mt-4">
            <a class="underline text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" href="{{ route('login') }}">
                {{ __('Already registered?') }}
            </a>

            <x-primary-button class="ms-4">
                {{ __('Register') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>
</file>

<file path="resources/views/auth/reset-password.blade.php">
<x-guest-layout>
    <form method="POST" action="{{ route('password.store') }}">
        @csrf

        <!-- Password Reset Token -->
        <input type="hidden" name="token" value="{{ $request->route('token') }}">

        <!-- Email Address -->
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email', $request->email)" required autofocus autocomplete="username" />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <!-- Password -->
        <div class="mt-4">
            <x-input-label for="password" :value="__('Password')" />
            <x-text-input id="password" class="block mt-1 w-full" type="password" name="password" required autocomplete="new-password" />
            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <!-- Confirm Password -->
        <div class="mt-4">
            <x-input-label for="password_confirmation" :value="__('Confirm Password')" />

            <x-text-input id="password_confirmation" class="block mt-1 w-full"
                                type="password"
                                name="password_confirmation" required autocomplete="new-password" />

            <x-input-error :messages="$errors->get('password_confirmation')" class="mt-2" />
        </div>

        <div class="flex items-center justify-end mt-4">
            <x-primary-button>
                {{ __('Reset Password') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>
</file>

<file path="resources/views/auth/verify-email.blade.php">
<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600">
        {{ __('Thanks for signing up! Before getting started, could you verify your email address by clicking on the link we just emailed to you? If you didn\'t receive the email, we will gladly send you another.') }}
    </div>

    @if (session('status') == 'verification-link-sent')
        <div class="mb-4 font-medium text-sm text-green-600">
            {{ __('A new verification link has been sent to the email address you provided during registration.') }}
        </div>
    @endif

    <div class="mt-4 flex items-center justify-between">
        <form method="POST" action="{{ route('verification.send') }}">
            @csrf

            <div>
                <x-primary-button>
                    {{ __('Resend Verification Email') }}
                </x-primary-button>
            </div>
        </form>

        <form method="POST" action="{{ route('logout') }}">
            @csrf

            <button type="submit" class="underline text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                {{ __('Log Out') }}
            </button>
        </form>
    </div>
</x-guest-layout>
</file>

<file path="resources/views/components/application-logo.blade.php">
<svg viewBox="0 0 316 316" xmlns="http://www.w3.org/2000/svg" {{ $attributes }}>
    <path d="M305.8 81.125C305.77 80.995 305.69 80.885 305.65 80.755C305.56 80.525 305.49 80.285 305.37 80.075C305.29 79.935 305.17 79.815 305.07 79.685C304.94 79.515 304.83 79.325 304.68 79.175C304.55 79.045 304.39 78.955 304.25 78.845C304.09 78.715 303.95 78.575 303.77 78.475L251.32 48.275C249.97 47.495 248.31 47.495 246.96 48.275L194.51 78.475C194.33 78.575 194.19 78.725 194.03 78.845C193.89 78.955 193.73 79.045 193.6 79.175C193.45 79.325 193.34 79.515 193.21 79.685C193.11 79.815 192.99 79.935 192.91 80.075C192.79 80.285 192.71 80.525 192.63 80.755C192.58 80.875 192.51 80.995 192.48 81.125C192.38 81.495 192.33 81.875 192.33 82.265V139.625L148.62 164.795V52.575C148.62 52.185 148.57 51.805 148.47 51.435C148.44 51.305 148.36 51.195 148.32 51.065C148.23 50.835 148.16 50.595 148.04 50.385C147.96 50.245 147.84 50.125 147.74 49.995C147.61 49.825 147.5 49.635 147.35 49.485C147.22 49.355 147.06 49.265 146.92 49.155C146.76 49.025 146.62 48.885 146.44 48.785L93.99 18.585C92.64 17.805 90.98 17.805 89.63 18.585L37.18 48.785C37 48.885 36.86 49.035 36.7 49.155C36.56 49.265 36.4 49.355 36.27 49.485C36.12 49.635 36.01 49.825 35.88 49.995C35.78 50.125 35.66 50.245 35.58 50.385C35.46 50.595 35.38 50.835 35.3 51.065C35.25 51.185 35.18 51.305 35.15 51.435C35.05 51.805 35 52.185 35 52.575V232.235C35 233.795 35.84 235.245 37.19 236.025L142.1 296.425C142.33 296.555 142.58 296.635 142.82 296.725C142.93 296.765 143.04 296.835 143.16 296.865C143.53 296.965 143.9 297.015 144.28 297.015C144.66 297.015 145.03 296.965 145.4 296.865C145.5 296.835 145.59 296.775 145.69 296.745C145.95 296.655 146.21 296.565 146.45 296.435L251.36 236.035C252.72 235.255 253.55 233.815 253.55 232.245V174.885L303.81 145.945C305.17 145.165 306 143.725 306 142.155V82.265C305.95 81.875 305.89 81.495 305.8 81.125ZM144.2 227.205L100.57 202.515L146.39 176.135L196.66 147.195L240.33 172.335L208.29 190.625L144.2 227.205ZM244.75 114.995V164.795L226.39 154.225L201.03 139.625V89.825L219.39 100.395L244.75 114.995ZM249.12 57.105L292.81 82.265L249.12 107.425L205.43 82.265L249.12 57.105ZM114.49 184.425L96.13 194.995V85.305L121.49 70.705L139.85 60.135V169.815L114.49 184.425ZM91.76 27.425L135.45 52.585L91.76 77.745L48.07 52.585L91.76 27.425ZM43.67 60.135L62.03 70.705L87.39 85.305V202.545V202.555V202.565C87.39 202.735 87.44 202.895 87.46 203.055C87.49 203.265 87.49 203.485 87.55 203.695V203.705C87.6 203.875 87.69 204.035 87.76 204.195C87.84 204.375 87.89 204.575 87.99 204.745C87.99 204.745 87.99 204.755 88 204.755C88.09 204.905 88.22 205.035 88.33 205.175C88.45 205.335 88.55 205.495 88.69 205.635L88.7 205.645C88.82 205.765 88.98 205.855 89.12 205.965C89.28 206.085 89.42 206.225 89.59 206.325C89.6 206.325 89.6 206.325 89.61 206.335C89.62 206.335 89.62 206.345 89.63 206.345L139.87 234.775V285.065L43.67 229.705V60.135ZM244.75 229.705L148.58 285.075V234.775L219.8 194.115L244.75 179.875V229.705ZM297.2 139.625L253.49 164.795V114.995L278.85 100.395L297.21 89.825V139.625H297.2Z"/>
</svg>
</file>

<file path="resources/views/components/auth-session-status.blade.php">
@props(['status'])

@if ($status)
    <div {{ $attributes->merge(['class' => 'font-medium text-sm text-green-600']) }}>
        {{ $status }}
    </div>
@endif
</file>

<file path="resources/views/components/convert-modal.blade.php">
{{-- Modal de confirmación para convertir un preinscrito en alumno --}}
@props([
    'title' => 'Convertir Preinscrito',
    'body'  => '¿Estás seguro de que quieres convertir este preinscrito en alumno? Esta acción no se puede deshacer.'
])

<div id="convertModal"
     class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 hidden">
    <div class="relative top-20 mx-auto p-6 border w-full max-w-md shadow-lg rounded-xl bg-white">
        <div class="mt-3 text-center">
            <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100 mb-4">
                <i class="bi bi-person-plus-fill text-green-600 text-xl"></i>
            </div>

            <h3 class="text-lg font-semibold text-gray-900 mb-2">{{ $title }}</h3>

            <div class="text-sm text-gray-500 mb-4">
                {!! $body !!}
            </div>

            <div class="flex justify-center space-x-4">
                {{-- Botón cancelar --}}
                <button type="button"
                        onclick="closeConvertModal()"
                        class="px-4 py-2 bg-gray-200 text-gray-800 text-sm font-medium rounded-lg
                               hover:bg-gray-300 transition-colors duration-200 focus:outline-none
                               focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
                    Cancelar
                </button>

                {{-- Formulario que enviará el POST de conversión --}}
                <form id="convertForm" method="POST">
                    @csrf
                    <button type="submit"
                            class="px-4 py-2 bg-green-600 text-white text-sm font-medium rounded-lg
                                   hover:bg-green-700 transition-colors duration-200 focus:outline-none
                                   focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                        Sí, Convertir
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>
</file>

<file path="resources/views/components/danger-button.blade.php">
<button {{ $attributes->merge(['type' => 'submit', 'class' => 'inline-flex items-center px-4 py-2 bg-red-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-red-500 active:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>
</file>

<file path="resources/views/components/delete-modal.blade.php">
{{-- resources/views/components/delete-modal.blade.php --}}

@props(['title' => 'Eliminar Registro', 'body' => '¿Estás seguro de que quieres eliminar este registro? Esta acción no se puede deshacer.'])

<div id="deleteModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 hidden">
    <div class="relative top-20 mx-auto p-6 border w-full max-w-md shadow-lg rounded-xl bg-white">
        <div class="mt-3 text-center">
            <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4">
                <i class="bi bi-exclamation-triangle text-red-600 text-xl"></i>
            </div>
            <h3 class="text-lg font-semibold text-gray-900 mb-2">{{ $title }}</h3>
            <div class="text-sm text-gray-500 mb-4">
                {!! $body !!} {{-- Usamos !!} para permitir HTML en el body si es necesario --}}
            </div>
            <div class="flex justify-center space-x-4">
                <button type="button"
                        onclick="closeDeleteModal()"
                        class="px-4 py-2 bg-gray-200 text-gray-800 text-sm font-medium rounded-lg hover:bg-gray-300 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
                    Cancelar
                </button>
                {{-- El formulario para enviar la petición DELETE --}}
                <form id="deleteForm" method="POST">
                    @csrf
                    @method('DELETE')
                    <button type="submit"
                            class="px-4 py-2 bg-red-600 text-white text-sm font-medium rounded-lg hover:bg-red-700 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                        Sí, Eliminar
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>
</file>

<file path="resources/views/components/desinscribir-modal.blade.php">
{{-- Componente <x-desinscribir-modal>
     Props:
     • id         => identificador único del modal (default: desinscribir-modal)
     • title      => título que se muestra en el encabezado
     • form       => id del <form> que se enviará al confirmar
     • confirmText|cancelText => textos de los botones
--}}
@props([
    'id'          => 'desinscribir-modal',
    'title'       => 'Desinscribir del curso',
    'form'        => null,            //  <── id del formulario oculto a disparar
    'confirmText' => 'Sí, desinscribir',
    'cancelText'  => 'Cancelar',
])

<div x-cloak
     x-data="{ open:false }"
     {{-- Escuchamos el evento global que abrirá el modal --}}
     @keydown.escape.window="open = false"
     x-on:open-modal.window="if ($event.detail === '{{ $id }}') open = true"
     x-on:close.window="open = false"
>
    <!-- FONDO OSCURO -------------------------------------------------------->
    <div x-show="open"
         class="fixed inset-0 z-40 bg-black/50"
         x-transition:enter="transition-opacity ease-out duration-200"
         x-transition:enter-start="opacity-0"
         x-transition:enter-end="opacity-100"
         x-transition:leave="transition-opacity ease-in duration-150"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0">
    </div>

    <!-- DIALOGO ------------------------------------------------------------->
    <div x-show="open"
         class="fixed inset-0 z-50 flex items-center justify-center p-4"
         role="dialog" aria-modal="true" aria-labelledby="{{ $id }}-title"
         x-transition:enter="transition ease-out duration-200"
         x-transition:enter-start="opacity-0 scale-95"
         x-transition:enter-end="opacity-100 scale-100"
         x-transition:leave="transition ease-in duration-150"
         x-transition:leave-start="opacity-100 scale-100"
         x-transition:leave-end="opacity-0 scale-95">

        <div class="w-full max-w-lg rounded-lg bg-white shadow-xl dark:bg-gray-800">
            <!-- CABECERA -->
            <div class="flex items-start justify-between px-6 py-4 border-b border-gray-200">
                <h3 id="{{ $id }}-title" class="text-lg font-medium text-gray-900 dark:text-white">
                    {{ $title }}
                </h3>

                <button type="button"
                        class="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300"
                        @click="open = false">
                    <span class="sr-only">Cerrar</span>
                    <svg class="w-6 h-6" viewBox="0 0 24 24" fill="none"
                         stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>

            <!-- CONTENIDO -->
            <div class="px-6 py-5">
                {{ $slot }}
            </div>

            <!-- PIE -->
            <div class="flex flex-row-reverse space-x-reverse space-x-3 px-6 py-4 bg-gray-50 dark:bg-gray-700">
                <!-- CONFIRMAR -->
                <button type="button"
                        class="inline-flex justify-center rounded-md bg-red-600 px-4 py-2 text-sm
                               font-medium text-white shadow-sm hover:bg-red-700
                               focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2"
                        @click="
                            @if($form)
                                document.getElementById('{{ $form }}').submit()
                            @else
                                $dispatch('confirm-desinscribir')
                            @endif
                            open = false
                        ">
                    {{ $confirmText }}
                </button>

                <!-- CANCELAR -->
                <button type="button"
                        class="inline-flex justify-center rounded-md bg-white px-4 py-2 text-sm
                               font-medium text-gray-700 shadow-sm hover:bg-gray-50 ring-1 ring-inset ring-gray-300
                               focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        @click="open = false">
                    {{ $cancelText }}
                </button>
            </div>
        </div>
    </div>
</div>
</file>

<file path="resources/views/components/dropdown-link.blade.php">
<a {{ $attributes->merge(['class' => 'block w-full px-4 py-2 text-start text-sm leading-5 text-gray-700 hover:bg-gray-100 focus:outline-none focus:bg-gray-100 transition duration-150 ease-in-out']) }}>{{ $slot }}</a>
</file>

<file path="resources/views/components/dropdown.blade.php">
@props(['align' => 'right', 'width' => '48', 'contentClasses' => 'py-1 bg-white'])

@php
$alignmentClasses = match ($align) {
    'left' => 'ltr:origin-top-left rtl:origin-top-right start-0',
    'top' => 'origin-top',
    default => 'ltr:origin-top-right rtl:origin-top-left end-0',
};

$width = match ($width) {
    '48' => 'w-48',
    default => $width,
};
@endphp

<div class="relative" x-data="{ open: false }" @click.outside="open = false" @close.stop="open = false">
    <div @click="open = ! open">
        {{ $trigger }}
    </div>

    <div x-show="open"
            x-transition:enter="transition ease-out duration-200"
            x-transition:enter-start="opacity-0 scale-95"
            x-transition:enter-end="opacity-100 scale-100"
            x-transition:leave="transition ease-in duration-75"
            x-transition:leave-start="opacity-100 scale-100"
            x-transition:leave-end="opacity-0 scale-95"
            class="absolute z-50 mt-2 {{ $width }} rounded-md shadow-lg {{ $alignmentClasses }}"
            style="display: none;"
            @click="open = false">
        <div class="rounded-md ring-1 ring-black ring-opacity-5 {{ $contentClasses }}">
            {{ $content }}
        </div>
    </div>
</div>
</file>

<file path="resources/views/components/input-error.blade.php">
@props(['messages'])

@if ($messages)
    <ul {{ $attributes->merge(['class' => 'text-sm text-red-600 space-y-1']) }}>
        @foreach ((array) $messages as $message)
            <li>{{ $message }}</li>
        @endforeach
    </ul>
@endif
</file>

<file path="resources/views/components/input-label.blade.php">
@props(['value'])

<label {{ $attributes->merge(['class' => 'block font-medium text-sm text-gray-700']) }}>
    {{ $value ?? $slot }}
</label>
</file>

<file path="resources/views/components/modal.blade.php">
@props([
    'name',
    'show' => false,
    'maxWidth' => '2xl'
])

@php
$maxWidth = [
    'sm' => 'sm:max-w-sm',
    'md' => 'sm:max-w-md',
    'lg' => 'sm:max-w-lg',
    'xl' => 'sm:max-w-xl',
    '2xl' => 'sm:max-w-2xl',
][$maxWidth];
@endphp

<div
    x-data="{
        show: @js($show),
        focusables() {
            // All focusable element types...
            let selector = 'a, button, input:not([type=\'hidden\']), textarea, select, details, [tabindex]:not([tabindex=\'-1\'])'
            return [...$el.querySelectorAll(selector)]
                // All non-disabled elements...
                .filter(el => ! el.hasAttribute('disabled'))
        },
        firstFocusable() { return this.focusables()[0] },
        lastFocusable() { return this.focusables().slice(-1)[0] },
        nextFocusable() { return this.focusables()[this.nextFocusableIndex()] || this.firstFocusable() },
        prevFocusable() { return this.focusables()[this.prevFocusableIndex()] || this.lastFocusable() },
        nextFocusableIndex() { return (this.focusables().indexOf(document.activeElement) + 1) % (this.focusables().length + 1) },
        prevFocusableIndex() { return Math.max(0, this.focusables().indexOf(document.activeElement)) -1 },
    }"
    x-init="$watch('show', value => {
        if (value) {
            document.body.classList.add('overflow-y-hidden');
            {{ $attributes->has('focusable') ? 'setTimeout(() => firstFocusable().focus(), 100)' : '' }}
        } else {
            document.body.classList.remove('overflow-y-hidden');
        }
    })"
    x-on:open-modal.window="$event.detail == '{{ $name }}' ? show = true : null"
    x-on:close-modal.window="$event.detail == '{{ $name }}' ? show = false : null"
    x-on:close.stop="show = false"
    x-on:keydown.escape.window="show = false"
    x-on:keydown.tab.prevent="$event.shiftKey || nextFocusable().focus()"
    x-on:keydown.shift.tab.prevent="prevFocusable().focus()"
    x-show="show"
    class="fixed inset-0 overflow-y-auto px-4 py-6 sm:px-0 z-50"
    style="display: {{ $show ? 'block' : 'none' }};"
>
    <div
        x-show="show"
        class="fixed inset-0 transform transition-all"
        x-on:click="show = false"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
    >
        <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
    </div>

    <div
        x-show="show"
        class="mb-6 bg-white rounded-lg overflow-hidden shadow-xl transform transition-all sm:w-full {{ $maxWidth }} sm:mx-auto"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
        x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
    >
        {{ $slot }}
    </div>
</div>
</file>

<file path="resources/views/components/nav-link.blade.php">
@props(['active'])

@php
$classes = ($active ?? false)
            ? 'inline-flex items-center px-1 pt-1 border-b-2 border-indigo-400 text-sm font-medium leading-5 text-gray-900 focus:outline-none focus:border-indigo-700 transition duration-150 ease-in-out'
            : 'inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium leading-5 text-gray-500 hover:text-gray-700 hover:border-gray-300 focus:outline-none focus:text-gray-700 focus:border-gray-300 transition duration-150 ease-in-out';
@endphp

<a {{ $attributes->merge(['class' => $classes]) }}>
    {{ $slot }}
</a>
</file>

<file path="resources/views/components/primary-button.blade.php">
<button {{ $attributes->merge(['type' => 'submit', 'class' => 'inline-flex items-center px-4 py-2 bg-gray-800 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-gray-700 focus:bg-gray-700 active:bg-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>
</file>

<file path="resources/views/components/responsive-nav-link.blade.php">
@props(['active'])

@php
$classes = ($active ?? false)
            ? 'block w-full ps-3 pe-4 py-2 border-l-4 border-indigo-400 text-start text-base font-medium text-indigo-700 bg-indigo-50 focus:outline-none focus:text-indigo-800 focus:bg-indigo-100 focus:border-indigo-700 transition duration-150 ease-in-out'
            : 'block w-full ps-3 pe-4 py-2 border-l-4 border-transparent text-start text-base font-medium text-gray-600 hover:text-gray-800 hover:bg-gray-50 hover:border-gray-300 focus:outline-none focus:text-gray-800 focus:bg-gray-50 focus:border-gray-300 transition duration-150 ease-in-out';
@endphp

<a {{ $attributes->merge(['class' => $classes]) }}>
    {{ $slot }}
</a>
</file>

<file path="resources/views/components/secondary-button.blade.php">
<button {{ $attributes->merge(['type' => 'button', 'class' => 'inline-flex items-center px-4 py-2 bg-white border border-gray-300 rounded-md font-semibold text-xs text-gray-700 uppercase tracking-widest shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-25 transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>
</file>

<file path="resources/views/components/text-input.blade.php">
@props(['disabled' => false])

<input @disabled($disabled) {{ $attributes->merge(['class' => 'border-gray-300 focus:border-indigo-500 focus:ring-indigo-500 rounded-md shadow-sm']) }}>
</file>

<file path="resources/views/layouts/admin.blade.php">
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>@yield('title', 'Admin Panel') - {{ config('app.name', 'Laravel') }}</title>

    <link rel="preconnect" href="https://fonts.bunny.net">
    <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

    @vite(['resources/css/app.css', 'resources/js/app.js'])
    {{-- Si tienes un admin.css específico, impórtalo aquí también --}}
    {{-- @vite(['resources/css/admin.css']) --}}

    @stack('styles')

    
</head>

<body class="font-sans antialiased">

    <div class="admin-layout-wrapper"> {{-- Nuevo contenedor --}}

        <!-- ======================= Sidebar ======================= -->
        <nav id="sidebarMenu" class="sidebar">
            <div class="sidebar-header">
                 <a class="text-decoration-none" href="{{ route('admin.dashboard') }}">
                     {{-- Puedes usar un <img> si tienes un logo gráfico --}}
                     {{-- <img src="{{ asset('images/logo-east-bridge.png') }}" alt="East Bridge Logo" class="h-8 w-auto mb-1"> --}}
                     <span class="app-name">EAST BRIDGE</span>
                     <span class="app-subtitle block">High School Dashboard</span>
                 </a>
            </div>

            <div class="sidebar-nav">
                <ul class="nav flex-column">
                    <li class="nav-item">
                        <a class="nav-link {{ request()->routeIs('admin.dashboard') ? 'active' : '' }}" href="{{ route('admin.dashboard') }}">
                            <i class="bi bi-grid-1x2-fill"></i>Dashboard
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link {{ request()->routeIs('admin.alumnos.*') ? 'active' : '' }}" href="{{ route('admin.alumnos.index') }}">
                            <i class="bi bi-people-fill"></i>Students
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link {{ request()->routeIs('admin.profesores.*') ? 'active' : '' }}" href="{{ route('admin.profesores.index') }}">
                            <i class="bi bi-person-video3"></i>Teachers
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link {{ request()->routeIs('admin.cursos.*') ? 'active' : '' }}" href="{{ route('admin.cursos.index') }}">
                            <i class="bi bi-collection-fill"></i>Courses
                        </a>
                    </li>
                    <li class="nav-item">
                        {{-- Necesitarás crear la ruta admin.preinscritos.index --}}
                        <a class="nav-link {{ request()->routeIs('admin.preinscritos.*') ? 'active' : '' }}" href="{{ route('admin.preinscritos.index') }}">
                            <i class="bi bi-person-check-fill"></i>Preinscritos
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link {{ request()->routeIs('admin.schedules.*') ? 'active' : '' }}"
                        href="{{ route('admin.schedules.index') }}">
                            <i class="bi bi-calendar3-week-fill"></i> Schedule
                        </a>
                    </li>

                    <li class="nav-item">
                        <a class="nav-link {{ request()->routeIs('admin.reportes.*') ? 'active' : '' }}" href="{{ route('admin.reportes.index') }}">
                            <i class="bi bi-file-earmark-bar-graph-fill"></i>Reports
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link {{ request()->routeIs('admin.configuracion.*') ? 'active' : '' }}" href="{{ route('admin.configuracion.index') }}">
                            <i class="bi bi-gear-fill"></i>Settings
                        </a>
                    </li>
                    {{-- Aquí puedes añadir los otros enlaces que faltan como Events, Messages, Announcements --}}
                    {{-- Y el enlace de Logout si quieres que esté en la sidebar --}}
                </ul>
            </div>
        </nav>

        <!-- ===================== Contenido Principal ===================== -->
        <main class="main-content">

            <!-- Header Interno (Título de la página, Búsqueda Opcional, Notificaciones, Usuario) -->
            <header class="content-header">
               {{-- Título de la página actual (puede venir de @yield('header-title') o de la vista) --}}
               {{-- Para el dashboard: "Dashboard Overview" ya está en la vista dashboard.blade.php --}}
               <div>
                   {{-- Placeholder si quisieras un título dinámico aquí --}}
                   {{-- <h1 class="text-xl font-semibold text-gray-700">@yield('header-title', 'Page Title')</h1> --}}
               </div>

               {{-- Iconos y Avatar/Dropdown de Usuario (Ejemplo similar al de Breeze) --}}
               <div class="flex items-center"> {{-- ms-auto para empujar a la derecha --}}
                   {{-- Icono de Notificaciones (Ejemplo) --}}
                   <a href="#" class="text-gray-500 hover:text-gray-700 me-4 position-relative">
                       <i class="bi bi-bell-fill fs-5"></i>
                       <span class="position-absolute top-0 start-100 translate-middle p-1 bg-danger border border-light rounded-circle" style="font-size: 0.5rem;">
                            <span class="visually-hidden">Nuevas alertas</span>
                       </span>
                   </a>

                   {{-- Dropdown de Usuario --}}
       @auth
       {{-- En layouts/admin.blade.php, dentro del @auth --}}
<div x-data="{ open: false }" class="relative"> {{-- <--- ¡AÑADIDO X-DATA AQUÍ! --}}
    {{-- Botón que activa el dropdown --}}
    <button @click="open = !open" class="flex items-center text-sm font-medium text-gray-700 hover:text-gray-900 focus:outline-none transition duration-150 ease-in-out">
        <i class="bi bi-person-circle text-2xl mr-2"></i>
        <div class="text-left">
            <span class="block">{{ Auth::user()->name }}</span>
            <span class="block text-xs text-gray-500">System Administrator</span>
        </div>
        <svg class="ml-2 -mr-0.5 h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
    </button>

    {{-- Menú del Dropdown --}}
    <div x-show="open"
         x-transition:enter="transition ease-out duration-100"
         x-transition:enter-start="transform opacity-0 scale-95"
         x-transition:enter-end="transform opacity-100 scale-100"
         x-transition:leave="transition ease-in duration-75"
         x-transition:leave-start="transform opacity-100 scale-100"
         x-transition:leave-end="transform opacity-0 scale-95"
         class="absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-50"
         style="display: none;" {{-- Alpine maneja esto, display:none es fallback --}}
         @click.away="open = false">
        <a href="{{ route('profile.edit') }}" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Mi Perfil</a>
        <a href="{{ route('admin.configuracion.index') }}" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Configuración</a>
        <div class="border-t border-gray-100 my-1"></div> {{-- Ajustado my-1 para un pequeño margen --}}
        <form method="POST" action="{{ route('logout') }}">
            @csrf
            <button type="submit" class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                Salir
            </button>
        </form>
    </div>
</div>
                    @else
                        <a href="{{ route('login') }}" class="text-sm text-gray-700 underline">Log in</a>
                    @endauth
               </div>
            </header>

            <!-- Contenido específico de la página actual -->
            <div class="mt-0"> {{-- Eliminado margen superior si el header ya tiene inferior --}}
                @yield('content')
            </div>

             <footer class="pt-4 mt-4 text-muted border-top small">
                © {{ date('Y') }} {{ config('app.name', 'Centro Formación') }}
            </footer>

        </main>
    </div>

    @stack('scripts')
    
    {{-- ... otros scripts que puedas tener ... --}}
    <script>
        // Función para ABRIR el modal y configurar su contenido
    function confirmDelete(actionUrl, itemName) {
        const deleteForm = document.getElementById('deleteForm');
        const deleteModal = document.getElementById('deleteModal');
        const modalBody = deleteModal.querySelector('.text-sm.text-gray-500'); // Selector más específico para el cuerpo del mensaje

        if(deleteForm && deleteModal && modalBody) {
            // Establecer la acción del formulario
            deleteForm.action = actionUrl;
            // Construir el cuerpo del mensaje dinámicamente
            modalBody.innerHTML = `¿Estás seguro de que quieres eliminar a <strong class="font-semibold text-gray-700">${itemName}</strong>? <br> Esta acción no se puede deshacer.`;
            // Mostrar el modal
            deleteModal.classList.remove('hidden');
        } else {
            console.error('Elementos del modal de eliminación no encontrados.');
        }
    }

    // Función para CERRAR el modal
    function closeDeleteModal() {
        const deleteModal = document.getElementById('deleteModal');
        if (deleteModal) {
            deleteModal.classList.add('hidden');
        }
    }

    // (Opcional) Cerrar modal con la tecla ESC
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape' && !document.getElementById('deleteModal').classList.contains('hidden')) {
            closeDeleteModal();
        }
    });
    </script>
</body>


</html>
</file>

<file path="resources/views/layouts/app.blade.php">
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta name="csrf-token" content="{{ csrf_token() }}">

        <title>{{ config('app.name', 'Laravel') }}</title>

        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.bunny.net">
        <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

        <!-- Scripts -->
        @vite(['resources/css/app.css', 'resources/js/app.js'])
    </head>
    <body class="font-sans antialiased">
        <div class="min-h-screen bg-gray-100">
            @include('layouts.navigation')

            <!-- Page Heading -->
            @isset($header)
                <header class="bg-white shadow">
                    <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
                        {{ $header }}
                    </div>
                </header>
            @endisset

            <!-- Page Content -->
            <main>
                {{ $slot }}
            </main>
        </div>
    </body>
</html>
</file>

<file path="resources/views/layouts/guest.blade.php">
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">

    <title>{{ config('app.name', 'Laravel') }}</title>

    <link rel="preconnect" href="https://fonts.bunny.net">
    <link href="https://fonts.bunny.net/css?family=Nunito+Sans:wght@400;500;600;700&display=swap" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">

     <!-- Importar estilos y scripts con Vite -->
     @vite(['resources/css/app.css', 'resources/css/login.css', 'resources/js/app.js', 'resources/js/particles-config.js'])
    
    
</head>
<body class="font-sans antialiased">
    <!-- Particles.js Container -->
    <div id="particles-js"></div>

    <div class="content-wrapper min-h-screen flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
        <div class="sm:mx-auto sm:w-full sm:max-w-md mb-6 flex flex-col items-center">
            <img src="{{ asset('images/centro-formacion-logo.png') }}" alt="Centro de Formación" class="logo-image mb-5">
            <h1 class="text-2xl font-bold text-white" style="text-shadow: 0 0 10px rgba(0, 225, 255, 0.6);">Centro de Formación</h1>
        </div>

        <div class="form-container w-full sm:max-w-md overflow-hidden">
            <div class="px-6 py-8 sm:px-10 sm:py-10">
                {{ $slot }}
            </div>
        </div>
        
        <div class="mt-6 text-center footer-text">
            © 2025 Centro de Formación · 
            <a href="#">Ayuda</a> · 
            <a href="#">Contacto</a>
        </div>
    </div>

    <!-- Particles.js -->
    <script src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>
    
</body>
</html>
</file>

<file path="resources/views/layouts/navigation.blade.php">
<nav x-data="{ open: false }" class="bg-white border-b border-gray-100">
    <!-- Primary Navigation Menu -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
            <div class="flex">
                <!-- Logo -->
                <div class="shrink-0 flex items-center">
                    {{-- CAMBIO: El logo ahora debería apuntar a la ruta 'welcome' o a 'admin.dashboard' si el usuario está logueado --}}
                    <a href="{{ Auth::check() ? route('admin.dashboard') : route('welcome') }}">
                        <x-application-logo class="block h-9 w-auto fill-current text-gray-800" />
                    </a>
                </div>

                <!-- Navigation Links -->
                <div class="hidden space-x-8 sm:-my-px sm:ms-10 sm:flex">
                    <x-nav-link :href="route('admin.dashboard')" :active="request()->routeIs('admin.dashboard')">
                        {{ __('Dashboard') }}
                    </x-nav-link>
                    {{-- Puedes añadir aquí otros enlaces principales si son para usuarios logueados --}}
                    {{-- Si tienes una parte pública con otras rutas principales, este no es el lugar --}}
                </div>
            </div>

            <!-- Settings Dropdown / Login & Register Links -->
            <div class="hidden sm:flex sm:items-center sm:ms-6">
                @auth {{-- <--- INICIO BLOQUE @auth --}}
                    <x-dropdown align="right" width="48">
                        <x-slot name="trigger">
                            <button class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-gray-500 bg-white hover:text-gray-700 focus:outline-none transition ease-in-out duration-150">
                                <div>{{ Auth::user()->name }}</div>
                                <div class="ms-1">
                                    <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                    </svg>
                                </div>
                            </button>
                        </x-slot>
                        <x-slot name="content">
                            <x-dropdown-link :href="route('profile.edit')">
                                {{ __('Profile') }}
                            </x-dropdown-link>
                            <form method="POST" action="{{ route('logout') }}">
                                @csrf
                                <x-dropdown-link :href="route('logout')"
                                        onclick="event.preventDefault(); this.closest('form').submit();">
                                    {{ __('Log Out') }}
                                </x-dropdown-link>
                            </form>
                        </x-slot>
                    </x-dropdown>
                @else {{-- <--- INICIO BLOQUE @else / @guest --}}
                    <a href="{{ route('login') }}" class="font-semibold text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Log in</a>
                    @if (Route::has('register'))
                        <a href="{{ route('register') }}" class="ms-4 font-semibold text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Register</a>
                    @endif
                @endauth {{-- <--- FIN BLOQUE @auth --}}
            </div>

            <!-- Hamburger -->
            <div class="-me-2 flex items-center sm:hidden">
                <button @click="open = ! open" class="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:bg-gray-100 focus:text-gray-500 transition duration-150 ease-in-out">
                    <svg class="h-6 w-6" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                        <path :class="{'hidden': open, 'inline-flex': ! open }" class="inline-flex" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                        <path :class="{'hidden': ! open, 'inline-flex': open }" class="hidden" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <!-- Responsive Navigation Menu -->
    <div :class="{'block': open, 'hidden': ! open}" class="hidden sm:hidden">
        <div class="pt-2 pb-3 space-y-1">
            <x-responsive-nav-link :href="route('admin.dashboard')" :active="request()->routeIs('admin.dashboard')">
                {{ __('Dashboard') }}
            </x-responsive-nav-link>
            {{-- Añade aquí otros enlaces responsivos si los tienes --}}
        </div>

        <!-- Responsive Settings Options -->
        @auth {{-- <--- INICIO BLOQUE @auth para opciones responsivas --}}
            <div class="pt-4 pb-1 border-t border-gray-200">
                <div class="px-4">
                    <div class="font-medium text-base text-gray-800">{{ Auth::user()->name }}</div>
                    <div class="font-medium text-sm text-gray-500">{{ Auth::user()->email }}</div>
                </div>
                <div class="mt-3 space-y-1">
                    <x-responsive-nav-link :href="route('profile.edit')">
                        {{ __('Profile') }}
                    </x-responsive-nav-link>
                    <form method="POST" action="{{ route('logout') }}">
                        @csrf
                        <x-responsive-nav-link :href="route('logout')"
                                onclick="event.preventDefault(); this.closest('form').submit();">
                            {{ __('Log Out') }}
                        </x-responsive-nav-link>
                    </form>
                </div>
            </div>
        @else {{-- <--- INICIO BLOQUE @else / @guest para responsivo --}}
            <div class="pt-4 pb-1 border-t border-gray-200">
                <x-responsive-nav-link :href="route('login')">
                    {{ __('Log in') }}
                </x-responsive-nav-link>
                @if (Route::has('register'))
                    <x-responsive-nav-link :href="route('register')">
                        {{ __('Register') }}
                    </x-responsive-nav-link>
                @endif
            </div>
        @endauth {{-- <--- FIN BLOQUE @auth para responsivo --}}
    </div>
</nav>
</file>

<file path="resources/views/profile/partials/delete-user-form.blade.php">
<section class="space-y-6">
    <header>
        <h2 class="text-lg font-medium text-gray-900">
            {{ __('Delete Account') }}
        </h2>

        <p class="mt-1 text-sm text-gray-600">
            {{ __('Once your account is deleted, all of its resources and data will be permanently deleted. Before deleting your account, please download any data or information that you wish to retain.') }}
        </p>
    </header>

    <x-danger-button
        x-data=""
        x-on:click.prevent="$dispatch('open-modal', 'confirm-user-deletion')"
    >{{ __('Delete Account') }}</x-danger-button>

    <x-modal name="confirm-user-deletion" :show="$errors->userDeletion->isNotEmpty()" focusable>
        <form method="post" action="{{ route('profile.destroy') }}" class="p-6">
            @csrf
            @method('delete')

            <h2 class="text-lg font-medium text-gray-900">
                {{ __('Are you sure you want to delete your account?') }}
            </h2>

            <p class="mt-1 text-sm text-gray-600">
                {{ __('Once your account is deleted, all of its resources and data will be permanently deleted. Please enter your password to confirm you would like to permanently delete your account.') }}
            </p>

            <div class="mt-6">
                <x-input-label for="password" value="{{ __('Password') }}" class="sr-only" />

                <x-text-input
                    id="password"
                    name="password"
                    type="password"
                    class="mt-1 block w-3/4"
                    placeholder="{{ __('Password') }}"
                />

                <x-input-error :messages="$errors->userDeletion->get('password')" class="mt-2" />
            </div>

            <div class="mt-6 flex justify-end">
                <x-secondary-button x-on:click="$dispatch('close')">
                    {{ __('Cancel') }}
                </x-secondary-button>

                <x-danger-button class="ms-3">
                    {{ __('Delete Account') }}
                </x-danger-button>
            </div>
        </form>
    </x-modal>
</section>
</file>

<file path="resources/views/profile/partials/update-password-form.blade.php">
<section>
    <header>
        <h2 class="text-lg font-medium text-gray-900">
            {{ __('Update Password') }}
        </h2>

        <p class="mt-1 text-sm text-gray-600">
            {{ __('Ensure your account is using a long, random password to stay secure.') }}
        </p>
    </header>

    <form method="post" action="{{ route('password.update') }}" class="mt-6 space-y-6">
        @csrf
        @method('put')

        <div>
            <x-input-label for="update_password_current_password" :value="__('Current Password')" />
            <x-text-input id="update_password_current_password" name="current_password" type="password" class="mt-1 block w-full" autocomplete="current-password" />
            <x-input-error :messages="$errors->updatePassword->get('current_password')" class="mt-2" />
        </div>

        <div>
            <x-input-label for="update_password_password" :value="__('New Password')" />
            <x-text-input id="update_password_password" name="password" type="password" class="mt-1 block w-full" autocomplete="new-password" />
            <x-input-error :messages="$errors->updatePassword->get('password')" class="mt-2" />
        </div>

        <div>
            <x-input-label for="update_password_password_confirmation" :value="__('Confirm Password')" />
            <x-text-input id="update_password_password_confirmation" name="password_confirmation" type="password" class="mt-1 block w-full" autocomplete="new-password" />
            <x-input-error :messages="$errors->updatePassword->get('password_confirmation')" class="mt-2" />
        </div>

        <div class="flex items-center gap-4">
            <x-primary-button>{{ __('Save') }}</x-primary-button>

            @if (session('status') === 'password-updated')
                <p
                    x-data="{ show: true }"
                    x-show="show"
                    x-transition
                    x-init="setTimeout(() => show = false, 2000)"
                    class="text-sm text-gray-600"
                >{{ __('Saved.') }}</p>
            @endif
        </div>
    </form>
</section>
</file>

<file path="resources/views/profile/partials/update-profile-information-form.blade.php">
<section>
    <header>
        <h2 class="text-lg font-medium text-gray-900">
            {{ __('Profile Information') }}
        </h2>

        <p class="mt-1 text-sm text-gray-600">
            {{ __("Update your account's profile information and email address.") }}
        </p>
    </header>

    <form id="send-verification" method="post" action="{{ route('verification.send') }}">
        @csrf
    </form>

    <form method="post" action="{{ route('profile.update') }}" class="mt-6 space-y-6">
        @csrf
        @method('patch')

        <div>
            <x-input-label for="name" :value="__('Name')" />
            <x-text-input id="name" name="name" type="text" class="mt-1 block w-full" :value="old('name', $user->name)" required autofocus autocomplete="name" />
            <x-input-error class="mt-2" :messages="$errors->get('name')" />
        </div>

        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" name="email" type="email" class="mt-1 block w-full" :value="old('email', $user->email)" required autocomplete="username" />
            <x-input-error class="mt-2" :messages="$errors->get('email')" />

            @if ($user instanceof \Illuminate\Contracts\Auth\MustVerifyEmail && ! $user->hasVerifiedEmail())
                <div>
                    <p class="text-sm mt-2 text-gray-800">
                        {{ __('Your email address is unverified.') }}

                        <button form="send-verification" class="underline text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            {{ __('Click here to re-send the verification email.') }}
                        </button>
                    </p>

                    @if (session('status') === 'verification-link-sent')
                        <p class="mt-2 font-medium text-sm text-green-600">
                            {{ __('A new verification link has been sent to your email address.') }}
                        </p>
                    @endif
                </div>
            @endif
        </div>

        <div class="flex items-center gap-4">
            <x-primary-button>{{ __('Save') }}</x-primary-button>

            @if (session('status') === 'profile-updated')
                <p
                    x-data="{ show: true }"
                    x-show="show"
                    x-transition
                    x-init="setTimeout(() => show = false, 2000)"
                    class="text-sm text-gray-600"
                >{{ __('Saved.') }}</p>
            @endif
        </div>
    </form>
</section>
</file>

<file path="resources/views/profile/edit.blade.php">
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Profile') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 space-y-6">
            <div class="p-4 sm:p-8 bg-white shadow sm:rounded-lg">
                <div class="max-w-xl">
                    @include('profile.partials.update-profile-information-form')
                </div>
            </div>

            <div class="p-4 sm:p-8 bg-white shadow sm:rounded-lg">
                <div class="max-w-xl">
                    @include('profile.partials.update-password-form')
                </div>
            </div>

            <div class="p-4 sm:p-8 bg-white shadow sm:rounded-lg">
                <div class="max-w-xl">
                    @include('profile.partials.delete-user-form')
                </div>
            </div>
        </div>
    </div>
</x-app-layout>
</file>

<file path="resources/views/vendor/pagination/bootstrap-4.blade.php">
@if ($paginator->hasPages())
    <nav>
        <ul class="pagination">
            {{-- Previous Page Link --}}
            @if ($paginator->onFirstPage())
                <li class="page-item disabled" aria-disabled="true" aria-label="@lang('pagination.previous')">
                    <span class="page-link" aria-hidden="true">&lsaquo;</span>
                </li>
            @else
                <li class="page-item">
                    <a class="page-link" href="{{ $paginator->previousPageUrl() }}" rel="prev" aria-label="@lang('pagination.previous')">&lsaquo;</a>
                </li>
            @endif

            {{-- Pagination Elements --}}
            @foreach ($elements as $element)
                {{-- "Three Dots" Separator --}}
                @if (is_string($element))
                    <li class="page-item disabled" aria-disabled="true"><span class="page-link">{{ $element }}</span></li>
                @endif

                {{-- Array Of Links --}}
                @if (is_array($element))
                    @foreach ($element as $page => $url)
                        @if ($page == $paginator->currentPage())
                            <li class="page-item active" aria-current="page"><span class="page-link">{{ $page }}</span></li>
                        @else
                            <li class="page-item"><a class="page-link" href="{{ $url }}">{{ $page }}</a></li>
                        @endif
                    @endforeach
                @endif
            @endforeach

            {{-- Next Page Link --}}
            @if ($paginator->hasMorePages())
                <li class="page-item">
                    <a class="page-link" href="{{ $paginator->nextPageUrl() }}" rel="next" aria-label="@lang('pagination.next')">&rsaquo;</a>
                </li>
            @else
                <li class="page-item disabled" aria-disabled="true" aria-label="@lang('pagination.next')">
                    <span class="page-link" aria-hidden="true">&rsaquo;</span>
                </li>
            @endif
        </ul>
    </nav>
@endif
</file>

<file path="resources/views/vendor/pagination/bootstrap-5.blade.php">
@if ($paginator->hasPages())
    <nav class="d-flex justify-items-center justify-content-between">
        <div class="d-flex justify-content-between flex-fill d-sm-none">
            <ul class="pagination">
                {{-- Previous Page Link --}}
                @if ($paginator->onFirstPage())
                    <li class="page-item disabled" aria-disabled="true">
                        <span class="page-link">@lang('pagination.previous')</span>
                    </li>
                @else
                    <li class="page-item">
                        <a class="page-link" href="{{ $paginator->previousPageUrl() }}" rel="prev">@lang('pagination.previous')</a>
                    </li>
                @endif

                {{-- Next Page Link --}}
                @if ($paginator->hasMorePages())
                    <li class="page-item">
                        <a class="page-link" href="{{ $paginator->nextPageUrl() }}" rel="next">@lang('pagination.next')</a>
                    </li>
                @else
                    <li class="page-item disabled" aria-disabled="true">
                        <span class="page-link">@lang('pagination.next')</span>
                    </li>
                @endif
            </ul>
        </div>

        <div class="d-none flex-sm-fill d-sm-flex align-items-sm-center justify-content-sm-between">
            <div>
                <p class="small text-muted">
                    {!! __('Showing') !!}
                    <span class="fw-semibold">{{ $paginator->firstItem() }}</span>
                    {!! __('to') !!}
                    <span class="fw-semibold">{{ $paginator->lastItem() }}</span>
                    {!! __('of') !!}
                    <span class="fw-semibold">{{ $paginator->total() }}</span>
                    {!! __('results') !!}
                </p>
            </div>

            <div>
                <ul class="pagination">
                    {{-- Previous Page Link --}}
                    @if ($paginator->onFirstPage())
                        <li class="page-item disabled" aria-disabled="true" aria-label="@lang('pagination.previous')">
                            <span class="page-link" aria-hidden="true">&lsaquo;</span>
                        </li>
                    @else
                        <li class="page-item">
                            <a class="page-link" href="{{ $paginator->previousPageUrl() }}" rel="prev" aria-label="@lang('pagination.previous')">&lsaquo;</a>
                        </li>
                    @endif

                    {{-- Pagination Elements --}}
                    @foreach ($elements as $element)
                        {{-- "Three Dots" Separator --}}
                        @if (is_string($element))
                            <li class="page-item disabled" aria-disabled="true"><span class="page-link">{{ $element }}</span></li>
                        @endif

                        {{-- Array Of Links --}}
                        @if (is_array($element))
                            @foreach ($element as $page => $url)
                                @if ($page == $paginator->currentPage())
                                    <li class="page-item active" aria-current="page"><span class="page-link">{{ $page }}</span></li>
                                @else
                                    <li class="page-item"><a class="page-link" href="{{ $url }}">{{ $page }}</a></li>
                                @endif
                            @endforeach
                        @endif
                    @endforeach

                    {{-- Next Page Link --}}
                    @if ($paginator->hasMorePages())
                        <li class="page-item">
                            <a class="page-link" href="{{ $paginator->nextPageUrl() }}" rel="next" aria-label="@lang('pagination.next')">&rsaquo;</a>
                        </li>
                    @else
                        <li class="page-item disabled" aria-disabled="true" aria-label="@lang('pagination.next')">
                            <span class="page-link" aria-hidden="true">&rsaquo;</span>
                        </li>
                    @endif
                </ul>
            </div>
        </div>
    </nav>
@endif
</file>

<file path="resources/views/vendor/pagination/default.blade.php">
@if ($paginator->hasPages())
    <nav>
        <ul class="pagination">
            {{-- Previous Page Link --}}
            @if ($paginator->onFirstPage())
                <li class="disabled" aria-disabled="true" aria-label="@lang('pagination.previous')">
                    <span aria-hidden="true">&lsaquo;</span>
                </li>
            @else
                <li>
                    <a href="{{ $paginator->previousPageUrl() }}" rel="prev" aria-label="@lang('pagination.previous')">&lsaquo;</a>
                </li>
            @endif

            {{-- Pagination Elements --}}
            @foreach ($elements as $element)
                {{-- "Three Dots" Separator --}}
                @if (is_string($element))
                    <li class="disabled" aria-disabled="true"><span>{{ $element }}</span></li>
                @endif

                {{-- Array Of Links --}}
                @if (is_array($element))
                    @foreach ($element as $page => $url)
                        @if ($page == $paginator->currentPage())
                            <li class="active" aria-current="page"><span>{{ $page }}</span></li>
                        @else
                            <li><a href="{{ $url }}">{{ $page }}</a></li>
                        @endif
                    @endforeach
                @endif
            @endforeach

            {{-- Next Page Link --}}
            @if ($paginator->hasMorePages())
                <li>
                    <a href="{{ $paginator->nextPageUrl() }}" rel="next" aria-label="@lang('pagination.next')">&rsaquo;</a>
                </li>
            @else
                <li class="disabled" aria-disabled="true" aria-label="@lang('pagination.next')">
                    <span aria-hidden="true">&rsaquo;</span>
                </li>
            @endif
        </ul>
    </nav>
@endif
</file>

<file path="resources/views/vendor/pagination/semantic-ui.blade.php">
@if ($paginator->hasPages())
    <div class="ui pagination menu" role="navigation">
        {{-- Previous Page Link --}}
        @if ($paginator->onFirstPage())
            <a class="icon item disabled" aria-disabled="true" aria-label="@lang('pagination.previous')"> <i class="left chevron icon"></i> </a>
        @else
            <a class="icon item" href="{{ $paginator->previousPageUrl() }}" rel="prev" aria-label="@lang('pagination.previous')"> <i class="left chevron icon"></i> </a>
        @endif

        {{-- Pagination Elements --}}
        @foreach ($elements as $element)
            {{-- "Three Dots" Separator --}}
            @if (is_string($element))
                <a class="icon item disabled" aria-disabled="true">{{ $element }}</a>
            @endif

            {{-- Array Of Links --}}
            @if (is_array($element))
                @foreach ($element as $page => $url)
                    @if ($page == $paginator->currentPage())
                        <a class="item active" href="{{ $url }}" aria-current="page">{{ $page }}</a>
                    @else
                        <a class="item" href="{{ $url }}">{{ $page }}</a>
                    @endif
                @endforeach
            @endif
        @endforeach

        {{-- Next Page Link --}}
        @if ($paginator->hasMorePages())
            <a class="icon item" href="{{ $paginator->nextPageUrl() }}" rel="next" aria-label="@lang('pagination.next')"> <i class="right chevron icon"></i> </a>
        @else
            <a class="icon item disabled" aria-disabled="true" aria-label="@lang('pagination.next')"> <i class="right chevron icon"></i> </a>
        @endif
    </div>
@endif
</file>

<file path="resources/views/vendor/pagination/simple-bootstrap-4.blade.php">
@if ($paginator->hasPages())
    <nav>
        <ul class="pagination">
            {{-- Previous Page Link --}}
            @if ($paginator->onFirstPage())
                <li class="page-item disabled" aria-disabled="true">
                    <span class="page-link">@lang('pagination.previous')</span>
                </li>
            @else
                <li class="page-item">
                    <a class="page-link" href="{{ $paginator->previousPageUrl() }}" rel="prev">@lang('pagination.previous')</a>
                </li>
            @endif

            {{-- Next Page Link --}}
            @if ($paginator->hasMorePages())
                <li class="page-item">
                    <a class="page-link" href="{{ $paginator->nextPageUrl() }}" rel="next">@lang('pagination.next')</a>
                </li>
            @else
                <li class="page-item disabled" aria-disabled="true">
                    <span class="page-link">@lang('pagination.next')</span>
                </li>
            @endif
        </ul>
    </nav>
@endif
</file>

<file path="resources/views/vendor/pagination/simple-bootstrap-5.blade.php">
@if ($paginator->hasPages())
    <nav role="navigation" aria-label="Pagination Navigation">
        <ul class="pagination">
            {{-- Previous Page Link --}}
            @if ($paginator->onFirstPage())
                <li class="page-item disabled" aria-disabled="true">
                    <span class="page-link">{!! __('pagination.previous') !!}</span>
                </li>
            @else
                <li class="page-item">
                    <a class="page-link" href="{{ $paginator->previousPageUrl() }}" rel="prev">
                        {!! __('pagination.previous') !!}
                    </a>
                </li>
            @endif

            {{-- Next Page Link --}}
            @if ($paginator->hasMorePages())
                <li class="page-item">
                    <a class="page-link" href="{{ $paginator->nextPageUrl() }}" rel="next">{!! __('pagination.next') !!}</a>
                </li>
            @else
                <li class="page-item disabled" aria-disabled="true">
                    <span class="page-link">{!! __('pagination.next') !!}</span>
                </li>
            @endif
        </ul>
    </nav>
@endif
</file>

<file path="resources/views/vendor/pagination/simple-default.blade.php">
@if ($paginator->hasPages())
    <nav>
        <ul class="pagination">
            {{-- Previous Page Link --}}
            @if ($paginator->onFirstPage())
                <li class="disabled" aria-disabled="true"><span>@lang('pagination.previous')</span></li>
            @else
                <li><a href="{{ $paginator->previousPageUrl() }}" rel="prev">@lang('pagination.previous')</a></li>
            @endif

            {{-- Next Page Link --}}
            @if ($paginator->hasMorePages())
                <li><a href="{{ $paginator->nextPageUrl() }}" rel="next">@lang('pagination.next')</a></li>
            @else
                <li class="disabled" aria-disabled="true"><span>@lang('pagination.next')</span></li>
            @endif
        </ul>
    </nav>
@endif
</file>

<file path="resources/views/vendor/pagination/simple-tailwind.blade.php">
@if ($paginator->hasPages())
    <nav role="navigation" aria-label="Pagination Navigation" class="flex justify-between">
        {{-- Previous Page Link --}}
        @if ($paginator->onFirstPage())
            <span class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 cursor-default leading-5 rounded-md dark:text-gray-600 dark:bg-gray-800 dark:border-gray-600">
                {!! __('pagination.previous') !!}
            </span>
        @else
            <a href="{{ $paginator->previousPageUrl() }}" rel="prev" class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 leading-5 rounded-md hover:text-gray-500 focus:outline-none focus:ring ring-gray-300 focus:border-blue-300 active:bg-gray-100 active:text-gray-700 transition ease-in-out duration-150 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:focus:border-blue-700 dark:active:bg-gray-700 dark:active:text-gray-300">
                {!! __('pagination.previous') !!}
            </a>
        @endif

        {{-- Next Page Link --}}
        @if ($paginator->hasMorePages())
            <a href="{{ $paginator->nextPageUrl() }}" rel="next" class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 leading-5 rounded-md hover:text-gray-500 focus:outline-none focus:ring ring-gray-300 focus:border-blue-300 active:bg-gray-100 active:text-gray-700 transition ease-in-out duration-150 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:focus:border-blue-700 dark:active:bg-gray-700 dark:active:text-gray-300">
                {!! __('pagination.next') !!}
            </a>
        @else
            <span class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 cursor-default leading-5 rounded-md dark:text-gray-600 dark:bg-gray-800 dark:border-gray-600">
                {!! __('pagination.next') !!}
            </span>
        @endif
    </nav>
@endif
</file>

<file path="resources/views/vendor/pagination/tailwind.blade.php">
@if ($paginator->hasPages())
    <nav role="navigation" aria-label="{{ __('Pagination Navigation') }}" class="flex items-center justify-between">
        <div class="flex justify-between flex-1 sm:hidden">
            @if ($paginator->onFirstPage())
                <span class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 cursor-default leading-5 rounded-md dark:text-gray-600 dark:bg-gray-800 dark:border-gray-600">
                    {!! __('pagination.previous') !!}
                </span>
            @else
                <a href="{{ $paginator->previousPageUrl() }}" class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 leading-5 rounded-md hover:text-gray-500 focus:outline-none focus:ring ring-gray-300 focus:border-blue-300 active:bg-gray-100 active:text-gray-700 transition ease-in-out duration-150 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:focus:border-blue-700 dark:active:bg-gray-700 dark:active:text-gray-300">
                    {!! __('pagination.previous') !!}
                </a>
            @endif

            @if ($paginator->hasMorePages())
                <a href="{{ $paginator->nextPageUrl() }}" class="relative inline-flex items-center px-4 py-2 ml-3 text-sm font-medium text-gray-700 bg-white border border-gray-300 leading-5 rounded-md hover:text-gray-500 focus:outline-none focus:ring ring-gray-300 focus:border-blue-300 active:bg-gray-100 active:text-gray-700 transition ease-in-out duration-150 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:focus:border-blue-700 dark:active:bg-gray-700 dark:active:text-gray-300">
                    {!! __('pagination.next') !!}
                </a>
            @else
                <span class="relative inline-flex items-center px-4 py-2 ml-3 text-sm font-medium text-gray-500 bg-white border border-gray-300 cursor-default leading-5 rounded-md dark:text-gray-600 dark:bg-gray-800 dark:border-gray-600">
                    {!! __('pagination.next') !!}
                </span>
            @endif
        </div>

        <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
            <!-- <div>
                <p class="text-sm text-gray-700 leading-5 dark:text-gray-400">
                    {!! __('Showing') !!}
                    @if ($paginator->firstItem())
                        <span class="font-medium">{{ $paginator->firstItem() }}</span>
                        {!! __('to') !!}
                        <span class="font-medium">{{ $paginator->lastItem() }}</span>
                    @else
                        {{ $paginator->count() }}
                    @endif
                    {!! __('of') !!}
                    <span class="font-medium">{{ $paginator->total() }}</span>
                    {!! __('results') !!}
                </p>
            </div> -->

            <div>
                <span class="relative z-0 inline-flex rtl:flex-row-reverse shadow-sm rounded-md">
                    {{-- Previous Page Link --}}
                    @if ($paginator->onFirstPage())
                        <span aria-disabled="true" aria-label="{{ __('pagination.previous') }}">
                            <span class="relative inline-flex items-center px-2 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 cursor-default rounded-l-md leading-5 dark:bg-gray-800 dark:border-gray-600" aria-hidden="true">
                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                                </svg>
                            </span>
                        </span>
                    @else
                        <a href="{{ $paginator->previousPageUrl() }}" rel="prev" class="relative inline-flex items-center px-2 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-l-md leading-5 hover:text-gray-400 focus:z-10 focus:outline-none focus:ring ring-gray-300 focus:border-blue-300 active:bg-gray-100 active:text-gray-500 transition ease-in-out duration-150 dark:bg-gray-800 dark:border-gray-600 dark:active:bg-gray-700 dark:focus:border-blue-800" aria-label="{{ __('pagination.previous') }}">
                            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                            </svg>
                        </a>
                    @endif

                    {{-- Pagination Elements --}}
                    @foreach ($elements as $element)
                        {{-- "Three Dots" Separator --}}
                        @if (is_string($element))
                            <span aria-disabled="true">
                                <span class="relative inline-flex items-center px-4 py-2 -ml-px text-sm font-medium text-gray-700 bg-white border border-gray-300 cursor-default leading-5 dark:bg-gray-800 dark:border-gray-600">{{ $element }}</span>
                            </span>
                        @endif

                        {{-- Array Of Links --}}
                        @if (is_array($element))
                            @foreach ($element as $page => $url)
                                @if ($page == $paginator->currentPage())
                                    <span aria-current="page">
                                        <span class="relative inline-flex items-center px-4 py-2 -ml-px text-sm font-medium text-gray-500 bg-white border border-gray-300 cursor-default leading-5 dark:bg-gray-800 dark:border-gray-600">{{ $page }}</span>
                                    </span>
                                @else
                                    <a href="{{ $url }}" class="relative inline-flex items-center px-4 py-2 -ml-px text-sm font-medium text-gray-700 bg-white border border-gray-300 leading-5 hover:text-gray-500 focus:z-10 focus:outline-none focus:ring ring-gray-300 focus:border-blue-300 active:bg-gray-100 active:text-gray-700 transition ease-in-out duration-150 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-400 dark:hover:text-gray-300 dark:active:bg-gray-700 dark:focus:border-blue-800" aria-label="{{ __('Go to page :page', ['page' => $page]) }}">
                                        {{ $page }}
                                    </a>
                                @endif
                            @endforeach
                        @endif
                    @endforeach

                    {{-- Next Page Link --}}
                    @if ($paginator->hasMorePages())
                        <a href="{{ $paginator->nextPageUrl() }}" rel="next" class="relative inline-flex items-center px-2 py-2 -ml-px text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-r-md leading-5 hover:text-gray-400 focus:z-10 focus:outline-none focus:ring ring-gray-300 focus:border-blue-300 active:bg-gray-100 active:text-gray-500 transition ease-in-out duration-150 dark:bg-gray-800 dark:border-gray-600 dark:active:bg-gray-700 dark:focus:border-blue-800" aria-label="{{ __('pagination.next') }}">
                            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                            </svg>
                        </a>
                    @else
                        <span aria-disabled="true" aria-label="{{ __('pagination.next') }}">
                            <span class="relative inline-flex items-center px-2 py-2 -ml-px text-sm font-medium text-gray-500 bg-white border border-gray-300 cursor-default rounded-r-md leading-5 dark:bg-gray-800 dark:border-gray-600" aria-hidden="true">
                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                                </svg>
                            </span>
                        </span>
                    @endif
                </span>
            </div>
        </div>
    </nav>
@endif
</file>

<file path="resources/views/welcome.blade.php">
<x-app-layout>
    {{-- Fondo con gradiente mejorado y más inmersivo --}}
    <div class="bg-gradient-to-br from-blue-50 via-gray-100 to-indigo-50 dark:from-gray-900 dark:via-gray-800 dark:to-blue-900 min-h-screen flex items-center justify-center py-14 px-4 sm:px-6 lg:px-8 transition-all duration-300">
        <div class="w-full max-w-2xl lg:max-w-4xl"> {{-- Aumentado el ancho máximo para mejor balance en pantallas grandes --}}

            {{-- Tarjeta con diseño refinado y sombras más sutiles --}}
            <div class="bg-white dark:bg-gray-800 shadow-lg hover:shadow-xl transition-shadow duration-300 rounded-3xl text-center p-8 md:p-10 border border-gray-100 dark:border-gray-700"> 

                {{-- Contenedor del logo mejorado con animación sutil --}}
                <div class="mb-8 transform transition-transform duration-500 hover:scale-105"> 
                    <img src="{{ asset('images/logo-centro.svg') }}"
                        alt="Logo Centro de Formación"
                        class="inline-block w-auto h-[9rem] rounded-xl p-3 bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-blue-900 dark:to-indigo-800 shadow-md">
                </div>

                {{-- Título con mejor jerarquía visual y tipografía optimizada --}}
                <h1 class="text-3xl lg:text-4xl font-bold mb-4 bg-clip-text text-transparent bg-gradient-to-r from-gray-800 to-gray-600 dark:from-gray-100 dark:to-blue-100">
                    {{ config('app.name', 'Centro de Formación') }}
                </h1>

                {{-- Descripción con mejor legibilidad --}}
                <p class="text-lg text-gray-600 dark:text-gray-300 mb-10 max-w-2xl mx-auto leading-relaxed">
                    Bienvenido al sistema de gestión. Accede para administrar cursos, alumnos y profesores de manera eficiente e intuitiva.
                </p>

                {{-- Contenedor de botones con nuevo diseño y disposición --}}
<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-10 px-4">

    {{-- Botón Panel con diseño mejorado y efecto brillante --}}
    <a href="{{ route('admin.dashboard') }}"
       class="group relative flex flex-col items-center justify-center rounded-2xl bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-200 font-medium text-lg p-6 h-[150px] border border-blue-100 dark:border-blue-900 shadow-md hover:shadow-blue-200 dark:hover:shadow-blue-900/20 transition-all duration-300 overflow-hidden">
        {{-- Barra superior de color --}}
        <div class="absolute top-0 left-0 w-full h-1 bg-[#166871]"></div>
        
        {{-- Efecto brillante con animación --}}
        <div class="absolute -inset-1 bg-gradient-to-r from-transparent via-blue-200/40 to-transparent opacity-0 group-hover:opacity-100 blur-sm group-hover:animate-shine transition-opacity duration-500"></div>
        
        {{-- Contenido principal --}}
        <div class="relative flex flex-col items-center z-10">
            <div class="mb-4 relative bg-gradient-to-br from-[#166871] to-[#0d4d56] p-4 rounded-xl text-white transform transition-transform duration-300 group-hover:scale-110 group-hover:rotate-3 shadow-lg shadow-blue-500/20">
                {{-- Icono de Dashboard --}}
                <svg xmlns="http://www.w3.org/2000/svg" class="w-9 h-9" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.75" d="M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z" />
                </svg>
            </div>
            <span class="tracking-wide font-semibold text-gray-800 dark:text-gray-200">Panel</span>
        </div>
        
        {{-- Gradiente inferior --}}
        <div class="absolute bottom-0 left-0 w-full h-24 bg-gradient-to-t from-blue-50/80 to-transparent dark:from-blue-900/20 dark:to-transparent transform transition-transform duration-500 group-hover:translate-y-1"></div>
    </a>
    
    {{-- Botón Cursos con diseño mejorado y efecto brillante --}}
    <a href="{{ route('admin.cursos.index') }}"
       class="group relative flex flex-col items-center justify-center rounded-2xl bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-200 font-medium text-lg p-6 h-[150px] border border-indigo-100 dark:border-indigo-900 shadow-md hover:shadow-indigo-200 dark:hover:shadow-indigo-900/20 transition-all duration-300 overflow-hidden">
        {{-- Barra superior de color --}}
        <div class="absolute top-0 left-0 w-full h-1 bg-[#294c79]"></div>
        
        {{-- Efecto brillante con animación --}}
        <div class="absolute -inset-1 bg-gradient-to-r from-transparent via-indigo-200/40 to-transparent opacity-0 group-hover:opacity-100 blur-sm group-hover:animate-shine transition-opacity duration-500"></div>
        
        {{-- Contenido principal --}}
        <div class="relative flex flex-col items-center z-10">
            <div class="mb-4 relative bg-gradient-to-br from-[#294c79] to-[#1a3255] p-4 rounded-xl text-white transform transition-transform duration-300 group-hover:scale-110 group-hover:rotate-3 shadow-lg shadow-indigo-500/20">
                {{-- Icono de Libro/Cursos --}}
                <svg xmlns="http://www.w3.org/2000/svg" class="w-9 h-9" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.75" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                </svg>
            </div>
            <span class="tracking-wide font-semibold text-gray-800 dark:text-gray-200">Cursos</span>
        </div>
        
        {{-- Gradiente inferior --}}
        <div class="absolute bottom-0 left-0 w-full h-24 bg-gradient-to-t from-indigo-50/80 to-transparent dark:from-indigo-900/20 dark:to-transparent transform transition-transform duration-500 group-hover:translate-y-1"></div>
    </a>
    
    {{-- Botón Alumnos con diseño mejorado y efecto brillante --}}
    <a href="{{ route('admin.alumnos.index') }}"
       class="group relative flex flex-col items-center justify-center rounded-2xl bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-200 font-medium text-lg p-6 h-[150px] border border-purple-100 dark:border-purple-900 shadow-md hover:shadow-purple-200 dark:hover:shadow-purple-900/20 transition-all duration-300 overflow-hidden">
        {{-- Barra superior de color --}}
        <div class="absolute top-0 left-0 w-full h-1 bg-[#294c79]"></div>
        
        {{-- Efecto brillante con animación --}}
        <div class="absolute -inset-1 bg-gradient-to-r from-transparent via-purple-200/40 to-transparent opacity-0 group-hover:opacity-100 blur-sm group-hover:animate-shine transition-opacity duration-500"></div>
        
        {{-- Contenido principal --}}
        <div class="relative flex flex-col items-center z-10">
            <div class="mb-4 relative bg-gradient-to-br from-[#294c79] to-[#1a3255] p-4 rounded-xl text-white transform transition-transform duration-300 group-hover:scale-110 group-hover:rotate-3 shadow-lg shadow-purple-500/20">
                {{-- Icono de Alumnos --}}
                <svg xmlns="http://www.w3.org/2000/svg" class="w-9 h-9" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.75" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                </svg>
            </div>
            <span class="tracking-wide font-semibold text-gray-800 dark:text-gray-200">Alumnos</span>
        </div>
        
        {{-- Gradiente inferior --}}
        <div class="absolute bottom-0 left-0 w-full h-24 bg-gradient-to-t from-purple-50/80 to-transparent dark:from-purple-900/20 dark:to-transparent transform transition-transform duration-500 group-hover:translate-y-1"></div>
    </a>
    
    {{-- Botón Profesores con icono de graduado y efecto brillante --}}
    <a href="{{ route('admin.profesores.index') }}"
       class="group relative flex flex-col items-center justify-center rounded-2xl bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-200 font-medium text-lg p-6 h-[150px] border border-green-100 dark:border-green-900 shadow-md hover:shadow-green-200 dark:hover:shadow-green-900/20 transition-all duration-300 overflow-hidden">
        {{-- Barra superior de color --}}
        <div class="absolute top-0 left-0 w-full h-1 bg-[#294c79]"></div>
        
        {{-- Efecto brillante con animación --}}
        <div class="absolute -inset-1 bg-gradient-to-r from-transparent via-green-200/40 to-transparent opacity-0 group-hover:opacity-100 blur-sm group-hover:animate-shine transition-opacity duration-500"></div>
        
        {{-- Contenido principal --}}
        <div class="relative flex flex-col items-center z-10">
            <div class="mb-4 relative bg-gradient-to-br from-[#294c79] to-[#1a3255] p-4 rounded-xl text-white transform transition-transform duration-300 group-hover:scale-110 group-hover:rotate-3 shadow-lg shadow-green-500/20">
                {{-- Icono de sombrero de graduado --}}
                <svg xmlns="http://www.w3.org/2000/svg" class="w-9 h-9" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.75" d="M12 14l9-5-9-5-9 5 9 5z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.75" d="M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.75" d="M12 14v4" />
                </svg>
            </div>
            <span class="tracking-wide font-semibold text-gray-800 dark:text-gray-200">Profesores</span>
        </div>
        
        {{-- Gradiente inferior --}}
        <div class="absolute bottom-0 left-0 w-full h-24 bg-gradient-to-t from-green-50/80 to-transparent dark:from-green-900/20 dark:to-transparent transform transition-transform duration-500 group-hover:translate-y-1"></div>
    </a>
</div>

                {{-- Footer de la Tarjeta mejorado --}}
                <div class="mt-6 pt-5 border-t border-gray-200 dark:border-gray-700">
                    <div class="flex justify-center items-center flex-wrap gap-4">
                        <small class="text-gray-500 dark:text-gray-400">
                            © {{ date('Y') }} Centro de Formación
                        </small>
                        <div class="flex space-x-4">
                            <a href="#" class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 hover:underline transition-colors duration-200 text-sm">Ayuda</a>
                            <a href="#" class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 hover:underline transition-colors duration-200 text-sm">Contacto</a>
                        </div>
                    </div>
                </div>
            </div> {{-- Fin card --}}
        </div> {{-- Fin col --}}
    </div> {{-- Fin Contenedor Principal --}}

</x-app-layout>
</file>

<file path="routes/auth.php">
<?php

use App\Http\Controllers\Auth\AuthenticatedSessionController;
use App\Http\Controllers\Auth\ConfirmablePasswordController;
use App\Http\Controllers\Auth\EmailVerificationNotificationController;
use App\Http\Controllers\Auth\EmailVerificationPromptController;
use App\Http\Controllers\Auth\NewPasswordController;
use App\Http\Controllers\Auth\PasswordController;
use App\Http\Controllers\Auth\PasswordResetLinkController;
use App\Http\Controllers\Auth\RegisteredUserController;
use App\Http\Controllers\Auth\VerifyEmailController;
use Illuminate\Support\Facades\Route;

Route::middleware('guest')->group(function () {
    Route::get('register', [RegisteredUserController::class, 'create'])
        ->name('register');

    Route::post('register', [RegisteredUserController::class, 'store']);

    Route::get('login', [AuthenticatedSessionController::class, 'create'])
        ->name('login');

    Route::post('login', [AuthenticatedSessionController::class, 'store']);

    Route::get('forgot-password', [PasswordResetLinkController::class, 'create'])
        ->name('password.request');

    Route::post('forgot-password', [PasswordResetLinkController::class, 'store'])
        ->name('password.email');

    Route::get('reset-password/{token}', [NewPasswordController::class, 'create'])
        ->name('password.reset');

    Route::post('reset-password', [NewPasswordController::class, 'store'])
        ->name('password.store');
});

Route::middleware('auth')->group(function () {
    Route::get('verify-email', EmailVerificationPromptController::class)
        ->name('verification.notice');

    Route::get('verify-email/{id}/{hash}', VerifyEmailController::class)
        ->middleware(['signed', 'throttle:6,1'])
        ->name('verification.verify');

    Route::post('email/verification-notification', [EmailVerificationNotificationController::class, 'store'])
        ->middleware('throttle:6,1')
        ->name('verification.send');

    Route::get('confirm-password', [ConfirmablePasswordController::class, 'show'])
        ->name('password.confirm');

    Route::post('confirm-password', [ConfirmablePasswordController::class, 'store']);

    Route::put('password', [PasswordController::class, 'update'])->name('password.update');

    Route::post('logout', [AuthenticatedSessionController::class, 'destroy'])
        ->name('logout');
});
</file>

<file path="routes/console.php">
<?php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote');
</file>

<file path="routes/web.php">
<?php

use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\Auth;
use App\Models\User;

// --- Controladores Estándar (ej: Breeze / Perfil) ---
use App\Http\Controllers\ProfileController;

// --- Controladores del Panel de Administración ---
use App\Http\Controllers\Admin\DashboardController;
use App\Http\Controllers\Admin\CursoController;
use App\Http\Controllers\Admin\AlumnoController;
use App\Http\Controllers\Admin\ProfesorController;
use App\Http\Controllers\Admin\EventoController;
use App\Http\Controllers\Admin\PreinscritoSepeController; // Asegúrate que el nombre es exacto
use App\Http\Controllers\Admin\ScheduleController;   // ← IMPORTANTE


/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
*/

// --- Ruta de Bienvenida Pública ---
Route::get('/', function () {
    // Si un usuario autenticado va a la raíz, redirigirlo al admin dashboard (o a su dashboard de usuario si tuvieras uno)
    if (Auth::check()) {
        return redirect()->route('admin.dashboard'); // Asumiendo que todos los logueados van al admin
    }
    return view('welcome');
})->name('welcome');


// --- Rutas de Autenticación (Login, Registro, Logout, etc.) ---
// Esta línea carga las rutas definidas en routes/auth.php (generado por Breeze)
require __DIR__.'/auth.php';


// --- Rutas que Requieren Autenticación ---
Route::middleware(['auth', 'verified'])->group(function () {

    // --- Rutas de Perfil de Usuario ---
    Route::prefix('profile')->name('profile.')->group(function () {
        Route::get('/', [ProfileController::class, 'edit'])->name('edit');
        Route::patch('/', [ProfileController::class, 'update'])->name('update');
        Route::delete('/', [ProfileController::class, 'destroy'])->name('destroy');
    });

    // --- Grupo para Rutas Específicas de Administración ---
    Route::prefix('admin')
          ->name('admin.')
          ->middleware(['auth', 'verified'])
          // Si quieres un middleware de autorización específico para admin (basado en roles/permisos),
          // lo añadirías aquí además del 'auth' y 'verified' del grupo padre.
          // Ejemplo: ->middleware(['can:access-admin-panel'])
          ->group(function () {

            // Dashboard de Administración
            Route::get('/dashboard', [DashboardController::class, 'index'])->name('dashboard');

            // Recursos CRUD para Administración
            Route::resource('profesores', ProfesorController::class);
            Route::resource('alumnos', AlumnoController::class);
            Route::resource('cursos', CursoController::class);
            Route::resource('eventos', EventoController::class);
            Route::resource('preinscritos', PreinscritoSepeController::class); // Asegúrate que este controlador existe
            Route::resource('schedules', ScheduleController::class);
            // --- AÑADE ESTA LÍNEA PARA EL CALENDARIO ---
            Route::get('schedule', [\App\Http\Controllers\Admin\ScheduleController::class, 'index'])->name('schedule.index');
            Route::get('schedule/events', [\App\Http\Controllers\Admin\ScheduleController::class, 'fetchEvents'])->name('schedule.events');

            
            // Ruta para convertir preinscrito
            Route::post('/preinscritos/{preinscrito}/convertir', [PreinscritoSepeController::class, 'convertirAAlumno'])
                  ->name('preinscritos.convertir');
            
            // Ruta para desinscribir un alumno de un curso
            Route::delete('/alumnos/{alumno}/cursos/{curso}', [AlumnoController::class, 'desinscribirCurso'])->name('alumnos.cursos.desinscribir');
            // Ruta GET para obtener los cursos disponibles para un alumno (para el modal AJAX)
            Route::get('/alumnos/{alumno}/cursos-disponibles', [AlumnoController::class, 'getCursosDisponibles'])->name('alumnos.cursos.disponibles');

            // Ruta POST para procesar la inscripción del alumno en un curso
            Route::post('/alumnos/{alumno}/inscribir', [AlumnoController::class, 'inscribirCurso'])->name('alumnos.cursos.inscribir');

            // Placeholders para otras secciones de admin
            Route::get('/reportes', function () { return 'Admin Reportes (Pendiente)'; })->name('reportes.index');
            Route::get('/finanzas', function () { return 'Admin Finanzas (Pendiente)'; })->name('finanzas.index');
            Route::get('/configuracion', function () { return 'Admin Configuración (Pendiente)'; })->name('configuracion.index');
             // Define una ruta DELETE para desvincular un curso de un alumno
            Route::delete('/alumnos/{alumno}/cursos/{curso}', [AlumnoController::class, 'desinscribirCurso'])->name('alumnos.cursos.desinscribir');
                }); // --- Fin del grupo admin ---

}); // --- Fin del grupo principal 'auth', 'verified' ---


// --- Ruta de Simulación de Login (SOLO PARA DESARROLLO LOCAL) ---
Route::get('/login-dev', function () {
    if (!app()->environment('local')) {
        return redirect()->route('login'); // En producción, siempre al login real
    }

    $user = User::firstOrCreate(
        ['email' => 'admin@admin.com'], // Usuario admin de prueba
        [
            'name' => 'Admin Dev',
            'password' => bcrypt('password'), // Contraseña de prueba
            'email_verified_at' => now()
        ]
    );
    Auth::login($user);
    request()->session()->regenerate();
    return redirect()->intended(route('admin.dashboard'));
})->name('login.dev');
</file>

<file path="storage/app/private/.gitignore">
*
!.gitignore
</file>

<file path="storage/app/public/.gitignore">
*
!.gitignore
</file>

<file path="storage/app/.gitignore">
*
!private/
!public/
!.gitignore
</file>

<file path="storage/framework/cache/data/.gitignore">
*
!.gitignore
</file>

<file path="storage/framework/cache/.gitignore">
*
!data/
!.gitignore
</file>

<file path="storage/framework/sessions/.gitignore">
*
!.gitignore
</file>

<file path="storage/framework/testing/.gitignore">
*
!.gitignore
</file>

<file path="storage/framework/views/.gitignore">
*
!.gitignore
</file>

<file path="storage/framework/.gitignore">
compiled.php
config.php
down
events.scanned.php
maintenance.php
routes.php
routes.scanned.php
schedule-*
services.json
</file>

<file path="tests/Feature/Auth/AuthenticationTest.php">
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class AuthenticationTest extends TestCase
{
    use RefreshDatabase;

    public function test_login_screen_can_be_rendered(): void
    {
        $response = $this->get('/login');

        $response->assertStatus(200);
    }

    public function test_users_can_authenticate_using_the_login_screen(): void
    {
        $user = User::factory()->create();

        $response = $this->post('/login', [
            'email' => $user->email,
            'password' => 'password',
        ]);

        $this->assertAuthenticated();
        $response->assertRedirect(route('dashboard', absolute: false));
    }

    public function test_users_can_not_authenticate_with_invalid_password(): void
    {
        $user = User::factory()->create();

        $this->post('/login', [
            'email' => $user->email,
            'password' => 'wrong-password',
        ]);

        $this->assertGuest();
    }

    public function test_users_can_logout(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post('/logout');

        $this->assertGuest();
        $response->assertRedirect('/');
    }
}
</file>

<file path="tests/Feature/Auth/EmailVerificationTest.php">
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Auth\Events\Verified;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\URL;
use Tests\TestCase;

class EmailVerificationTest extends TestCase
{
    use RefreshDatabase;

    public function test_email_verification_screen_can_be_rendered(): void
    {
        $user = User::factory()->unverified()->create();

        $response = $this->actingAs($user)->get('/verify-email');

        $response->assertStatus(200);
    }

    public function test_email_can_be_verified(): void
    {
        $user = User::factory()->unverified()->create();

        Event::fake();

        $verificationUrl = URL::temporarySignedRoute(
            'verification.verify',
            now()->addMinutes(60),
            ['id' => $user->id, 'hash' => sha1($user->email)]
        );

        $response = $this->actingAs($user)->get($verificationUrl);

        Event::assertDispatched(Verified::class);
        $this->assertTrue($user->fresh()->hasVerifiedEmail());
        $response->assertRedirect(route('dashboard', absolute: false).'?verified=1');
    }

    public function test_email_is_not_verified_with_invalid_hash(): void
    {
        $user = User::factory()->unverified()->create();

        $verificationUrl = URL::temporarySignedRoute(
            'verification.verify',
            now()->addMinutes(60),
            ['id' => $user->id, 'hash' => sha1('wrong-email')]
        );

        $this->actingAs($user)->get($verificationUrl);

        $this->assertFalse($user->fresh()->hasVerifiedEmail());
    }
}
</file>

<file path="tests/Feature/Auth/PasswordConfirmationTest.php">
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class PasswordConfirmationTest extends TestCase
{
    use RefreshDatabase;

    public function test_confirm_password_screen_can_be_rendered(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get('/confirm-password');

        $response->assertStatus(200);
    }

    public function test_password_can_be_confirmed(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post('/confirm-password', [
            'password' => 'password',
        ]);

        $response->assertRedirect();
        $response->assertSessionHasNoErrors();
    }

    public function test_password_is_not_confirmed_with_invalid_password(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post('/confirm-password', [
            'password' => 'wrong-password',
        ]);

        $response->assertSessionHasErrors();
    }
}
</file>

<file path="tests/Feature/Auth/PasswordResetTest.php">
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Auth\Notifications\ResetPassword;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Notification;
use Tests\TestCase;

class PasswordResetTest extends TestCase
{
    use RefreshDatabase;

    public function test_reset_password_link_screen_can_be_rendered(): void
    {
        $response = $this->get('/forgot-password');

        $response->assertStatus(200);
    }

    public function test_reset_password_link_can_be_requested(): void
    {
        Notification::fake();

        $user = User::factory()->create();

        $this->post('/forgot-password', ['email' => $user->email]);

        Notification::assertSentTo($user, ResetPassword::class);
    }

    public function test_reset_password_screen_can_be_rendered(): void
    {
        Notification::fake();

        $user = User::factory()->create();

        $this->post('/forgot-password', ['email' => $user->email]);

        Notification::assertSentTo($user, ResetPassword::class, function ($notification) {
            $response = $this->get('/reset-password/'.$notification->token);

            $response->assertStatus(200);

            return true;
        });
    }

    public function test_password_can_be_reset_with_valid_token(): void
    {
        Notification::fake();

        $user = User::factory()->create();

        $this->post('/forgot-password', ['email' => $user->email]);

        Notification::assertSentTo($user, ResetPassword::class, function ($notification) use ($user) {
            $response = $this->post('/reset-password', [
                'token' => $notification->token,
                'email' => $user->email,
                'password' => 'password',
                'password_confirmation' => 'password',
            ]);

            $response
                ->assertSessionHasNoErrors()
                ->assertRedirect(route('login'));

            return true;
        });
    }
}
</file>

<file path="tests/Feature/Auth/PasswordUpdateTest.php">
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;

class PasswordUpdateTest extends TestCase
{
    use RefreshDatabase;

    public function test_password_can_be_updated(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->from('/profile')
            ->put('/password', [
                'current_password' => 'password',
                'password' => 'new-password',
                'password_confirmation' => 'new-password',
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/profile');

        $this->assertTrue(Hash::check('new-password', $user->refresh()->password));
    }

    public function test_correct_password_must_be_provided_to_update_password(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->from('/profile')
            ->put('/password', [
                'current_password' => 'wrong-password',
                'password' => 'new-password',
                'password_confirmation' => 'new-password',
            ]);

        $response
            ->assertSessionHasErrorsIn('updatePassword', 'current_password')
            ->assertRedirect('/profile');
    }
}
</file>

<file path="tests/Feature/Auth/RegistrationTest.php">
<?php

namespace Tests\Feature\Auth;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class RegistrationTest extends TestCase
{
    use RefreshDatabase;

    public function test_registration_screen_can_be_rendered(): void
    {
        $response = $this->get('/register');

        $response->assertStatus(200);
    }

    public function test_new_users_can_register(): void
    {
        $response = $this->post('/register', [
            'name' => 'Test User',
            'email' => 'test@example.com',
            'password' => 'password',
            'password_confirmation' => 'password',
        ]);

        $this->assertAuthenticated();
        $response->assertRedirect(route('dashboard', absolute: false));
    }
}
</file>

<file path="tests/Feature/ExampleTest.php">
<?php

namespace Tests\Feature;

// use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_the_application_returns_a_successful_response(): void
    {
        $response = $this->get('/');

        $response->assertStatus(200);
    }
}
</file>

<file path="tests/Feature/ProfileTest.php">
<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ProfileTest extends TestCase
{
    use RefreshDatabase;

    public function test_profile_page_is_displayed(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->get('/profile');

        $response->assertOk();
    }

    public function test_profile_information_can_be_updated(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->patch('/profile', [
                'name' => 'Test User',
                'email' => 'test@example.com',
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/profile');

        $user->refresh();

        $this->assertSame('Test User', $user->name);
        $this->assertSame('test@example.com', $user->email);
        $this->assertNull($user->email_verified_at);
    }

    public function test_email_verification_status_is_unchanged_when_the_email_address_is_unchanged(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->patch('/profile', [
                'name' => 'Test User',
                'email' => $user->email,
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/profile');

        $this->assertNotNull($user->refresh()->email_verified_at);
    }

    public function test_user_can_delete_their_account(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->delete('/profile', [
                'password' => 'password',
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/');

        $this->assertGuest();
        $this->assertNull($user->fresh());
    }

    public function test_correct_password_must_be_provided_to_delete_account(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->from('/profile')
            ->delete('/profile', [
                'password' => 'wrong-password',
            ]);

        $response
            ->assertSessionHasErrorsIn('userDeletion', 'password')
            ->assertRedirect('/profile');

        $this->assertNotNull($user->fresh());
    }
}
</file>

<file path="tests/Unit/ExampleTest.php">
<?php

namespace Tests\Unit;

use PHPUnit\Framework\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_that_true_is_true(): void
    {
        $this->assertTrue(true);
    }
}
</file>

<file path="tests/TestCase.php">
<?php

namespace Tests;

use Illuminate\Foundation\Testing\TestCase as BaseTestCase;

abstract class TestCase extends BaseTestCase
{
    //
}
</file>

<file path=".editorconfig">
root = true

[*]
charset = utf-8
end_of_line = lf
indent_size = 4
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true

[*.md]
trim_trailing_whitespace = false

[*.{yml,yaml}]
indent_size = 2

[docker-compose.yml]
indent_size = 4
</file>

<file path=".env.example">
APP_NAME=Laravel
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_URL=http://localhost

APP_LOCALE=en
APP_FALLBACK_LOCALE=en
APP_FAKER_LOCALE=en_US

APP_MAINTENANCE_DRIVER=file
# APP_MAINTENANCE_STORE=database

PHP_CLI_SERVER_WORKERS=4

BCRYPT_ROUNDS=12

LOG_CHANNEL=stack
LOG_STACK=single
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=sqlite
# DB_HOST=127.0.0.1
# DB_PORT=3306
# DB_DATABASE=laravel
# DB_USERNAME=root
# DB_PASSWORD=

SESSION_DRIVER=database
SESSION_LIFETIME=120
SESSION_ENCRYPT=false
SESSION_PATH=/
SESSION_DOMAIN=null

BROADCAST_CONNECTION=log
FILESYSTEM_DISK=local
QUEUE_CONNECTION=database

CACHE_STORE=database
# CACHE_PREFIX=

MEMCACHED_HOST=127.0.0.1

REDIS_CLIENT=phpredis
REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=log
MAIL_SCHEME=null
MAIL_HOST=127.0.0.1
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

VITE_APP_NAME="${APP_NAME}"
</file>

<file path=".gitattributes">
* text=auto eol=lf

*.blade.php diff=html
*.css diff=css
*.html diff=html
*.md diff=markdown
*.php diff=php

/.github export-ignore
CHANGELOG.md export-ignore
.styleci.yml export-ignore
</file>

<file path="artisan">
#!/usr/bin/env php
<?php

use Illuminate\Foundation\Application;
use Symfony\Component\Console\Input\ArgvInput;

define('LARAVEL_START', microtime(true));

// Register the Composer autoloader...
require __DIR__.'/vendor/autoload.php';

// Bootstrap Laravel and handle the command...
/** @var Application $app */
$app = require_once __DIR__.'/bootstrap/app.php';

$status = $app->handleCommand(new ArgvInput);

exit($status);
</file>

<file path="composer.json">
{
    "$schema": "https://getcomposer.org/schema.json",
    "name": "laravel/laravel",
    "type": "project",
    "description": "The skeleton application for the Laravel framework.",
    "keywords": ["laravel", "framework"],
    "license": "MIT",
    "require": {
        "php": "^8.2",
        "laravel/framework": "^12.0",
        "laravel/tinker": "^2.10.1"
    },
    "require-dev": {
        "fakerphp/faker": "^1.23",
        "laravel/breeze": "^2.3",
        "laravel/pail": "^1.2.2",
        "laravel/pint": "^1.13",
        "laravel/sail": "^1.41",
        "mockery/mockery": "^1.6",
        "nunomaduro/collision": "^8.6",
        "phpunit/phpunit": "^11.5.3"
    },
    "autoload": {
        "psr-4": {
            "App\\": "app/",
            "Database\\Factories\\": "database/factories/",
            "Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "scripts": {
        "post-autoload-dump": [
            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
            "@php artisan package:discover --ansi"
        ],
        "post-update-cmd": [
            "@php artisan vendor:publish --tag=laravel-assets --ansi --force"
        ],
        "post-root-package-install": [
            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\""
        ],
        "post-create-project-cmd": [
            "@php artisan key:generate --ansi",
            "@php -r \"file_exists('database/database.sqlite') || touch('database/database.sqlite');\"",
            "@php artisan migrate --graceful --ansi"
        ],
        "dev": [
            "Composer\\Config::disableProcessTimeout",
            "npx concurrently -c \"#93c5fd,#c4b5fd,#fb7185,#fdba74\" \"php artisan serve\" \"php artisan queue:listen --tries=1\" \"php artisan pail --timeout=0\" \"npm run dev\" --names=server,queue,logs,vite"
        ],
        "test": [
            "@php artisan config:clear --ansi",
            "@php artisan test"
        ]
    },
    "extra": {
        "laravel": {
            "dont-discover": []
        }
    },
    "config": {
        "optimize-autoloader": true,
        "preferred-install": "dist",
        "sort-packages": true,
        "allow-plugins": {
            "pestphp/pest-plugin": true,
            "php-http/discovery": true
        }
    },
    "minimum-stability": "stable",
    "prefer-stable": true
}
</file>

<file path="Dockerfile">
# Cambia la versión de PHP a 8.3
FROM php:8.3-fpm-alpine

WORKDIR /var/www/html

# Instalar dependencias PHP y Node.js/npm
# (Mismas dependencias que antes)
RUN apk update && apk add --no-cache \
    libpq-dev \
    git \
    zip \
    unzip \
    nodejs \
    npm \
    autoconf \
    g++ \
    make \
    # Instalar extensiones PHP
    && docker-php-ext-install pdo pdo_pgsql \
    # Instalar extensión Redis para PHP
    && pecl install redis \
    && docker-php-ext-enable redis \
    # Limpiar caché de apk
    && rm -rf /var/cache/apk/*

# Instalar Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Copiar código (manejado por volumen en desarrollo)
# COPY ./src /var/www/html

# Exponer puerto para FPM
EXPOSE 9000

# Comando por defecto (opcional si está en docker-compose.yml)
# CMD ["php-fpm"]
</file>

<file path="Laravel.md">
<p align="center"><a href="https://laravel.com" target="_blank"><img src="https://raw.githubusercontent.com/laravel/art/master/logo-lockup/5%20SVG/2%20CMYK/1%20Full%20Color/laravel-logolockup-cmyk-red.svg" width="400" alt="Laravel Logo"></a></p>

<p align="center">
<a href="https://github.com/laravel/framework/actions"><img src="https://github.com/laravel/framework/workflows/tests/badge.svg" alt="Build Status"></a>
<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/dt/laravel/framework" alt="Total Downloads"></a>
<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/v/laravel/framework" alt="Latest Stable Version"></a>
<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/l/laravel/framework" alt="License"></a>
</p>

## About Laravel

Laravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable and creative experience to be truly fulfilling. Laravel takes the pain out of development by easing common tasks used in many web projects, such as:

- [Simple, fast routing engine](https://laravel.com/docs/routing).
- [Powerful dependency injection container](https://laravel.com/docs/container).
- Multiple back-ends for [session](https://laravel.com/docs/session) and [cache](https://laravel.com/docs/cache) storage.
- Expressive, intuitive [database ORM](https://laravel.com/docs/eloquent).
- Database agnostic [schema migrations](https://laravel.com/docs/migrations).
- [Robust background job processing](https://laravel.com/docs/queues).
- [Real-time event broadcasting](https://laravel.com/docs/broadcasting).

Laravel is accessible, powerful, and provides tools required for large, robust applications.

## Learning Laravel

Laravel has the most extensive and thorough [documentation](https://laravel.com/docs) and video tutorial library of all modern web application frameworks, making it a breeze to get started with the framework.

You may also try the [Laravel Bootcamp](https://bootcamp.laravel.com), where you will be guided through building a modern Laravel application from scratch.

If you don't feel like reading, [Laracasts](https://laracasts.com) can help. Laracasts contains thousands of video tutorials on a range of topics including Laravel, modern PHP, unit testing, and JavaScript. Boost your skills by digging into our comprehensive video library.

## Laravel Sponsors

We would like to extend our thanks to the following sponsors for funding Laravel development. If you are interested in becoming a sponsor, please visit the [Laravel Partners program](https://partners.laravel.com).

### Premium Partners

- **[Vehikl](https://vehikl.com/)**
- **[Tighten Co.](https://tighten.co)**
- **[Kirschbaum Development Group](https://kirschbaumdevelopment.com)**
- **[64 Robots](https://64robots.com)**
- **[Curotec](https://www.curotec.com/services/technologies/laravel/)**
- **[DevSquad](https://devsquad.com/hire-laravel-developers)**
- **[Redberry](https://redberry.international/laravel-development/)**
- **[Active Logic](https://activelogic.com)**

## Contributing

Thank you for considering contributing to the Laravel framework! The contribution guide can be found in the [Laravel documentation](https://laravel.com/docs/contributions).

## Code of Conduct

In order to ensure that the Laravel community is welcoming to all, please review and abide by the [Code of Conduct](https://laravel.com/docs/contributions#code-of-conduct).

## Security Vulnerabilities

If you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell via [taylor@laravel.com](mailto:taylor@laravel.com). All security vulnerabilities will be promptly addressed.

## License

The Laravel framework is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).
</file>

<file path="package.json">
{
    "private": true,
    "type": "module",
    "scripts": {
        "build": "vite build",
        "dev": "vite"
    },
    "devDependencies": {
        "@tailwindcss/forms": "^0.5.2",
        "@tailwindcss/vite": "^4.0.0",
        "alpinejs": "^3.4.2",
        "autoprefixer": "^10.4.2",
        "axios": "^1.8.2",
        "concurrently": "^9.0.1",
        "laravel-vite-plugin": "^1.2.0",
        "postcss": "^8.4.31",
        "tailwindcss": "^3.1.0",
        "vite": "^6.2.4"
    },
    "dependencies": {
        "@fullcalendar/core": "^6.1.17",
        "@fullcalendar/daygrid": "^6.1.17",
        "@fullcalendar/rrule": "^6.1.18",
        "@fullcalendar/timegrid": "^6.1.17",
        "rrule": "^2.8.1"
    }
}
</file>

<file path="phpunit.xml">
<?xml version="1.0" encoding="UTF-8"?>
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="vendor/phpunit/phpunit/phpunit.xsd"
         bootstrap="vendor/autoload.php"
         colors="true"
>
    <testsuites>
        <testsuite name="Unit">
            <directory>tests/Unit</directory>
        </testsuite>
        <testsuite name="Feature">
            <directory>tests/Feature</directory>
        </testsuite>
    </testsuites>
    <source>
        <include>
            <directory>app</directory>
        </include>
    </source>
    <php>
        <env name="APP_ENV" value="testing"/>
        <env name="APP_MAINTENANCE_DRIVER" value="file"/>
        <env name="BCRYPT_ROUNDS" value="4"/>
        <env name="CACHE_STORE" value="array"/>
        <env name="DB_CONNECTION" value="sqlite"/>
        <env name="DB_DATABASE" value=":memory:"/>
        <env name="MAIL_MAILER" value="array"/>
        <env name="PULSE_ENABLED" value="false"/>
        <env name="QUEUE_CONNECTION" value="sync"/>
        <env name="SESSION_DRIVER" value="array"/>
        <env name="TELESCOPE_ENABLED" value="false"/>
    </php>
</phpunit>
</file>

<file path="postcss.config.js">
export default {
    plugins: {
        tailwindcss: {},
        autoprefixer: {},
    },
};
</file>

<file path="start-dev-fixed.sh">
#!/bin/bash

# --- Script para iniciar el entorno de desarrollo Laravel con Docker DENTRO de WSL ---

# Definimos códigos de color para los mensajes
GREEN="\033[0;32m"
RED="\033[0;31m"
YELLOW="\033[0;33m"
BLUE="\033[0;34m"
CYAN="\033[0;36m"
NC="\033[0m" # Sin color

# Función para limpiar procesos al salir
cleanup() {
    echo -e "\n${YELLOW}🧹 Limpiando procesos...${NC}"
    if [ ! -z "$LARAVEL_PID" ]; then
        kill $LARAVEL_PID 2>/dev/null
    fi
    if [ ! -z "$VITE_PID" ]; then
        kill $VITE_PID 2>/dev/null
    fi
    echo -e "${GREEN}✅ Limpieza completada${NC}"
}

# Registrar función de limpieza para cuando se termine el script
trap cleanup EXIT

# 1. Verificar que estamos en la raíz del proyecto (buscando docker-compose.yml)
if [ ! -f "docker-compose.yml" ] && [ ! -f "docker-compose.yaml" ]; then
    echo -e "${RED}❌ No se encontró docker-compose.yml o docker-compose.yaml${NC}"
    echo -e "${YELLOW}Asegúrate de ejecutar este script desde la raíz de tu proyecto.${NC}"
    exit 1
fi

# 2. Verificar que existe 'artisan' en la raíz (lógica simplificada para la nueva estructura)
if [ ! -f "artisan" ]; then
    echo -e "${RED}❌ No se encontró el archivo 'artisan'.${NC}"
    echo -e "${YELLOW}Este no parece ser un proyecto Laravel válido.${NC}"
    exit 1
fi

echo -e "${GREEN}🚀 Iniciando entorno de desarrollo Laravel...${NC}"
echo -e "${CYAN}📍 Ubicación: $(pwd)${NC}"

# 3. Levantar los contenedores
echo -e "${BLUE}🐳 Levantando contenedores con 'docker-compose up -d'...${NC}"
docker-compose up -d

# Esperar un poco a que los servicios se estabilicen
sleep 5

# 3.1. Verificar si hay problemas con las dependencias de npm
echo -e "${YELLOW}🔍 Verificando estado de las dependencias de npm...${NC}"
npm_test_result=$(docker-compose exec -T app npm run dev --dry-run 2>&1 || echo "error")

if echo "$npm_test_result" | grep -q "Cannot find module.*rollup"; then
    echo -e "${YELLOW}⚠️  Detectado problema con dependencias de rollup. Reinstalando...${NC}"
    docker-compose exec -T app rm -rf package-lock.json node_modules
    docker-compose exec -T app npm install
    echo -e "${GREEN}✅ Dependencias reinstaladas${NC}"
fi

# 4. Iniciar el servidor Laravel usando nohup
echo -e "${BLUE}🌐 Iniciando servidor Laravel (puerto 8000)...${NC}"
nohup docker-compose exec -T app php artisan serve --host=0.0.0.0 --port=8000 > laravel.log 2>&1 &
LARAVEL_PID=$!

# Esperar un momento
sleep 3

# 5. Iniciar el dev server de npm usando nohup
echo -e "${CYAN}⚡ Iniciando npm dev server...${NC}"
nohup docker-compose exec -T app npm run dev > vite.log 2>&1 &
VITE_PID=$!

# Esperar un poco para que los servicios se inicialicen
sleep 5

# Verificar que los procesos estén funcionando
echo -e "${BLUE}📊 Verificando servicios...${NC}"

# Verificar Laravel
if kill -0 $LARAVEL_PID 2>/dev/null; then
    echo -e "${GREEN}✅ Servidor Laravel: Funcionando (PID: $LARAVEL_PID)${NC}"
else
    echo -e "${RED}❌ Servidor Laravel: Error al iniciar${NC}"
    echo -e "${YELLOW}Ver log: tail -f laravel.log${NC}"
fi

# Verificar Vite
if kill -0 $VITE_PID 2>/dev/null; then
    echo -e "${GREEN}✅ Vite Dev Server: Funcionando (PID: $VITE_PID)${NC}"
else
    echo -e "${RED}❌ Vite Dev Server: Error al iniciar${NC}"
    echo -e "${YELLOW}Ver log: tail -f vite.log${NC}"
fi

echo -e "\n${GREEN}✅ Entorno iniciado:${NC}"
echo -e "   ${CYAN}🌐 Laravel: http://localhost:8000${NC}"
echo -e "   ${CYAN}⚡ Vite Dev Server ejecutándose${NC}"
echo -e "\n${YELLOW}📋 Comandos útiles:${NC}"
echo -e "   ${NC}Ver logs de Laravel: tail -f laravel.log"
echo -e "   ${NC}Ver logs de Vite: tail -f vite.log"
echo -e "   ${NC}Detener servicios: docker-compose down"
echo -e "   ${NC}Reiniciar dependencias npm: docker-compose exec app npm install"

echo -e "\n${BLUE}💡 Los servicios seguirán ejecutándose en segundo plano.${NC}"
echo -e "${BLUE}   Presiona Ctrl+C para detener este script (los servicios continuarán).${NC}"

# Mantener el script corriendo para mostrar logs en tiempo real si se desea
read -p $'\n'"${CYAN}¿Quieres ver los logs en tiempo real? (y/n): ${NC}" -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${BLUE}📊 Mostrando logs en tiempo real (Ctrl+C para salir)...${NC}"
    tail -f laravel.log vite.log
fi
</file>

<file path="tailwind.config.js">
import defaultTheme from 'tailwindcss/defaultTheme';
import forms from '@tailwindcss/forms';

/** @type {import('tailwindcss').Config} */
export default {
    content: [
        './vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php',
        './storage/framework/views/*.php',
        './resources/views/**/*.blade.php',
    ],

    theme: {
        extend: {
            fontFamily: {
                sans: ['Figtree', ...defaultTheme.fontFamily.sans],
            },
        },
    },

    plugins: [forms],
    
};
</file>

<file path="vite.config.js">
import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';

export default defineConfig({
    plugins: [
        laravel({
            input: [
                'resources/css/app.css',
                'resources/css/login.css',  // Añade tu nuevo CSS
                'resources/js/app.js',
                'resources/js/particles-config.js',  // Añade tu nuevo JS
                'resources/js/schedules.js',
            ],
            refresh: true,
        }),
    ],
    // --- Añadir esta sección ---
    server: {
        host: '0.0.0.0', // Escucha en todas las interfaces de red
        port: 5173,      // Puerto estándar de Vite
        hmr: {
            host: 'localhost', // El host que usará el navegador para conectar a HMR
        },
        watch: {
            usePolling: true, // ¡ESTA ES LA LÍNEA MÁGICA!
        },
    }
    // --- Fin de la sección ---
});
</file>

<file path="workflow-del-proyecto.md">
##  **El Moderno y Atractivo (Ideal para desarrolladores):**
    *   `Workflow de Desarrollo Moderno en Windows: Integrando Laravel, WSL, Docker, WARP y Gemini`

### Opinión sobre la Iniciativa

**Tu idea es fantástica por varias razones:**

*   **Resuelve un problema real:** La configuración inicial de un entorno de desarrollo puede ser una de las partes más frustrantes y que más tiempo consume.
*   **Documenta "Best Practices":** Tu flujo de trabajo no es trivial; combina múltiples herramientas punteras de una manera muy eficiente. Documentarlo es compartir conocimiento valioso.
*   **Reproducibilidad:** Con esta guía, un nuevo miembro de tu equipo (o tú mismo en un nuevo PC) podría estar operativo en una fracción del tiempo.
*   **Portafolio Personal:** Un documento técnico bien escrito es una excelente pieza para mostrar en tu perfil de GitHub o portafolio. Demuestra no solo que sabes usar las herramientas, sino que sabes cómo integrarlas y explicar el proceso.

---

### Estructura Propuesta para el Documento Markdown

Aquí tienes una plantilla que puedes copiar y pegar en un archivo `.md`. Está diseñada para ser exhaustiva pero muy fácil de seguir.

```markdown
# Workflow de Desarrollo Moderno en Windows: Integrando Laravel, WSL, Docker, WARP y Gemini

*Una guía paso a paso para configurar un entorno de desarrollo de alta productividad, combinando el poder de Linux en Windows con contenedores y herramientas de IA.*

---

## 📖 Índice

1.  [Visión General: Nuestro Ecosistema de Desarrollo](#-visión-general-nuestro-ecosistema-de-desarrollo)
2.  [Prerrequisitos: ¿Qué necesito antes de empezar?](#-prerrequisitos-qué-necesito-antes-de-empezar)
3.  [Configuración Paso a Paso](#-configuración-paso-a-paso)
    *   [3.1. Habilitar y Configurar WSL](#31-habilitar-y-configurar-wsl)
    *   [3.2. Instalar Docker Desktop y la Integración con WSL](#32-instalar-docker-desktop-y-la-integración-con-wsl)
    *   [3.3. Instalar y Personalizar la Terminal WARP](#33-instalar-y-personalizar-la-terminal-warp)
    *   [3.4. Clonar el Proyecto Laravel y Configurar Docker Compose](#34-clonar-el-proyecto-laravel-y-configurar-docker-compose)
    *   [3.5. Configurar Gemini CLI](#35-configurar-gemini-cli)
4.  [🚀 El Flujo de Trabajo Diario: ¡A Programar!](#-el-flujo-de-trabajo-diario-a-programar)
5.  [🛠️ Glosario de Herramientas: ¿Qué es cada cosa?](#️-glosario-de-herramientas-qué-es-cada-cosa)
6.  [🤔 FAQ y Problemas Comunes](#-faq-y-problemas-comunes)

---

## 🎯 Visión General: Nuestro Ecosistema de Desarrollo

Este entorno está diseñado para maximizar la productividad y mantener los proyectos aislados y reproducibles. Combina lo mejor de Windows (interfaz gráfica, compatibilidad de software) con lo mejor de Linux (rendimiento del servidor, herramientas de línea de comandos).

*(Aquí puedes insertar el diagrama de flujo o la explicación de las capas que te di en la respuesta anterior).*

---

## ✅ Prerrequisitos: ¿Qué necesito antes de empezar?

Asegúrate de tener instalado el siguiente software en tu máquina Windows:

*   **Windows 10 u 11** (con las últimas actualizaciones).
*   **[Visual Studio Code](https://code.visualstudio.com/)**: Nuestro editor de código.
    *   Extensión recomendada: `WSL` de Microsoft.
*   **[Docker Desktop](https://www.docker.com/products/docker-desktop/)**: Para gestionar nuestros contenedores.
*   **[WARP Terminal](https://www.warp.dev/)**: Nuestra terminal de elección.
*   **[Git](https://git-scm.com/downloads)**: Para el control de versiones.

---

## ⚙️ Configuración Paso a Paso

### 3.1. Habilitar y Configurar WSL
*(Instrucciones detalladas sobre cómo ejecutar `wsl --install -d Ubuntu`, verificar la instalación con `wsl -l -v`, etc.)*
*https://learn.microsoft.com/es-es/windows/wsl/install*   Asegúrate de que WSL esté configurado para usar la versión 2:
    ```powershell
    wsl --set-default-version 2
    ```

### 3.2. Instalar Docker Desktop y la Integración con WSL
*(Instrucciones sobre cómo instalar Docker Desktop y, muy importante, cómo ir a `Settings > Resources > WSL Integration` y asegurarse de que la integración esté activa para tu distribución de Ubuntu).*
*https://docs.docker.com/desktop/setup/install/windows-install/*
*https://docs.docker.com/desktop/*

### 3.3. Instalar y Personalizar la Terminal WARP
*https://www.warp.dev/*

### 3.4. Clonar el Proyecto Laravel y Configurar Docker Compose
*(Pasos para abrir WARP, navegar a `\\wsl$\Ubuntu\home\tu_usuario\`, clonar el proyecto con `git clone ...`, y configurar los archivos `docker-compose.yml` y `.env` para la base de datos).*

### 3.5. Configurar Gemini CLI
*https://github.com/google-gemini/gemini-cli.*

---

## 🚀 El Flujo de Trabajo Diario: ¡A Programar!

Este es tu ritual de inicio rápido para cada día de trabajo.

1.  **Arranca Docker Desktop**.
2.  **Abre WARP** y navega al directorio del proyecto:
    ```powershell
    cd \\wsl$\Ubuntu\home\user1234\mi-proyecto-secreto
    ```
3.  **Levanta los servicios** en segundo plano:
    ```powershell
    docker-compose up -d
    ```
4.  **Inicia el servidor de Vite** (en una pestaña de WARP):
    ```powershell
    docker-compose exec app npm run dev
    ```
5.  **Inicia el servidor de Laravel** (en otra pestaña de WARP):
    ```powershell
    docker-compose exec app php artisan serve --host=0.0.0.0 --port=8000
    ```
6.  **Abre VS Code y tu asistente IA** (en otra pestaña):
    ```powershell
    code .
    gemini [tu consulta]
    ```
7.  **¡A disfrutar!** Abre `http://localhost:8000` en tu navegador.

---

### 🛠️ Glosario de Herramientas: ¿Qué es cada cosa y para qué sirve?

Entender el rol que desempeña cada pieza del puzle es clave para dominar el flujo de trabajo y solucionar problemas eficazmente.

#### PowerShell
*   **Qué es:** Una potente interfaz de línea de comandos (shell) y lenguaje de scripting desarrollado por Microsoft. Es la evolución moderna del tradicional `cmd.exe` de Windows.
*   **Para qué sirve en tu flujo:** Es el **cerebro de operaciones** dentro de tu terminal WARP. Actúa como el intérprete principal que te permite ejecutar comandos tanto de Windows (`code .`, `explorer.exe .`) como de Docker (`docker-compose up`). Su capacidad para entender la ruta `\\wsl$` es lo que hace posible esta integración.

#### WSL (Subsistema de Windows para Linux)
*   **Qué es:** Una capa de compatibilidad oficial de Microsoft que permite ejecutar un entorno Linux completo (como Ubuntu) directamente sobre Windows, sin la sobrecarga de una máquina virtual tradicional.
*   **Para qué sirve en tu flujo:** Es el **hogar nativo de tu código**. Almacenar tu proyecto Laravel dentro de WSL garantiza la máxima compatibilidad y rendimiento, ya que las aplicaciones web de este tipo están diseñadas y optimizadas para correr en entornos Linux.

#### La ruta `\\wsl$\...`
*   **Qué es:** No es una herramienta, sino un **puente de red virtual** creado por Windows. Permite que el sistema de archivos de tus distribuciones WSL sea accesible desde cualquier aplicación de Windows como si fuera una carpeta de red.
*   **Para qué sirve en tu flujo:** Es el **pegamento mágico** que une tus dos mundos. Gracias a esta ruta, puedes estar en una terminal de Windows (PowerShell) y aun así modificar, crear o eliminar archivos que físicamente residen en el sistema de archivos de Linux. Es lo que permite que `code .` funcione desde PowerShell para abrir un proyecto de WSL.

#### WARP
*   **Qué es:** Una terminal para la línea de comandos de nueva generación, reconstruida desde cero en Rust para ser más rápida, inteligente y fácil de usar. Incorpora características modernas como bloques de comandos, autocompletado con IA y paneles integrados.
*   **Para qué sirve en tu flujo:** Es tu **cabina de mando (cockpit)**. En lugar de usar la terminal por defecto de Windows, WARP te proporciona una interfaz superior para interactuar con PowerShell. Sus capacidades para gestionar múltiples paneles y pestañas son perfectas para mantener los servidores de Laravel y Vite corriendo mientras sigues trabajando en otros comandos.

#### Docker y Docker Compose
*   **Qué es Docker:** Una plataforma que permite empaquetar aplicaciones y sus dependencias en unidades aisladas y portátiles llamadas **contenedores**.
*   **Qué es Docker Compose:** Una herramienta que simplifica la gestión de aplicaciones compuestas por múltiples contenedores. Se configura mediante un único archivo `docker-compose.yml`.
*   **Para qué sirven en tu flujo:** Son tu **equipo de servicios bajo demanda**. En lugar de instalar y configurar PHP, un servidor web y PostgreSQL directamente en tu sistema (lo cual puede ser complicado y generar conflictos), los defines como servicios aislados en contenedores. `docker-compose up` los levanta todos a la vez, y `docker-compose down` los apaga, manteniendo tu máquina limpia y tu entorno de proyecto perfectamente encapsulado y reproducible.

#### Visual Studio Code (VS Code)
*   **Qué es:** Un editor de código fuente gratuito y altamente extensible desarrollado por Microsoft.
*   **Para qué sirve en tu flujo:** Es tu **mesa de trabajo para codificar**. Su verdadera potencia en este workflow viene de la extensión oficial `WSL`. Al ejecutar `code .` desde la ruta `\\wsl$\...`, VS Code se conecta a un pequeño servidor dentro de WSL, permitiéndote editar archivos como si estuvieras en Linux, con acceso completo al terminal de Linux y a las herramientas de depuración, todo ello con la fluidez de una aplicación de escritorio de Windows.

#### Gemini CLI
*   **Qué es:** La interfaz de línea de comandos (Command-Line Interface) para interactuar directamente con los modelos de Inteligencia Artificial de Google, como Gemini.
*   **Para qué sirve en tu flujo:** Es tu **asistente de programación por IA**. Integrado directamente en tu terminal (WARP/PowerShell), te permite hacer preguntas, generar fragmentos de código, depurar errores o pedir explicaciones sobre un comando sin necesidad de cambiar de contexto a un navegador web. Acelera la resolución de problemas y la fase de desarrollo.

#### Cluely: Asistente de IA Cognitivo en Tiempo Real
*   **Qué es:** Cluely es una avanzada y controvertida aplicación de escritorio que funciona como un asistente de inteligencia artificial en tiempo real. Su función principal es capturar el contenido de la pantalla (vía OCR) y el audio de una conversación (vía NLP) para proporcionar al usuario sugerencias, datos y respuestas instantáneas a través de una discreta ventana superpuesta en la pantalla.
*   **Para qué sirve en tu flujo:** Dentro de este ecosistema de desarrollo, Cluely no actúa como una herramienta de programación directa, sino como un amplificador cognitivo personal. Su rol es el de un "susurrador" inteligente que te asiste durante interacciones de alta demanda mental:
    *   Reuniones con Clientes o Equipos: Puede ayudarte a recordar métricas específicas, detalles técnicos de una API o a responder preguntas complejas sobre la arquitectura del proyecto sin tener que pausar para buscar la información.
    *   Entrevistas Técnicas (como entrevistado o entrevistador): Puede proporcionar un recordatorio rápido de un algoritmo específico o una definición, funcionando como una red de seguridad para la memoria.
    *   Resolución de Problemas en Vivo: Durante una sesión de depuración o pair programming, puede sugerir posibles causas de un error o comandos relevantes basados en el contexto de la conversación y el código en pantalla.
    *   Se usa como una segunda capa de memoria y procesamiento, que te permite mantenerte enfocado en la interacción humana mientras la IA se encarga de la recuperación de información y la comunicación profesional.
---

## 🤔 FAQ y Problemas Comunes

*   **Error: `Cannot connect to the Docker daemon`.**
    *   *Solución: Asegúrate de que Docker Desktop esté corriendo.*
*   **Error: `Permission Denied` al editar un archivo en VS Code.**
    *   *Solución: Abre un terminal WSL (`wsl`) y usa `sudo chown -R $USER:$USER .` en la carpeta del proyecto para reclamar la propiedad de los archivos.*
*   **El sitio en `localhost:8000` no carga.**
    *   *Solución: Verifica que ambos comandos `docker-compose exec...` se estén ejecutando sin errores en sus respectivas pestañas de WARP.*
</file>

<file path=".gitignore">
# Dependency directories
/node_modules
/vendor

# Environment files
.env
.env.*
!.env.example

# Laravel specific
/.phpunit.cache
/public/build
/public/hot
/public/storage
/storage/*.key
/storage/app/public
/storage/pail
/bootstrap/cache/*
!bootstrap/cache/.gitkeep

# Testing
.phpunit.result.cache
Coverage/

# IDE files
/.fleet
/.idea
/.nova
/.vscode
/.zed
.phpactor.json

# Package manager
npm-debug.log*
yarn-debug.log*
yarn-error.log*
package-lock.json
yarn.lock

# Logs
*.log
logs/
storage/logs/*
!storage/logs/.gitkeep

# Temporary files
*.tmp
*.temp
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Docker
docker-compose.override.yml

# Auth
/auth.json

# Homestead
Homestead.json
Homestead.yaml

# Warp
.Warp
/scripts
/.warp

# Imagenes
/public/images/

# docs
/personal_docs/*.md
GEMINI.md
</file>

<file path="README.md">
# Centro de Formación – Laravel 12 + Docker

Este proyecto es una base profesional para el desarrollo de aplicaciones web modernas utilizando **Laravel 12** y un entorno de desarrollo completamente orquestado con **Docker**. Incluye servicios para base de datos PostgreSQL y servidor PHP-FPM, y está preparado para integración con herramientas modernas de frontend y servicios adicionales como Redis o pgAdmin si lo necesitas.

---

## Tabla de Contenidos

- [Descripción General](#descripción-general)
- [Tecnologías y Servicios](#tecnologías-y-servicios)
- [Estructura del Proyecto](#estructura-del-proyecto)
- [Principales Funcionalidades](#principales-funcionalidades)
- [Requisitos Previos](#requisitos-previos)
- [Instalación y Puesta en Marcha](#instalación-y-puesta-en-marcha)
- [Comandos Útiles](#comandos-útiles)
- [Contribuciones](#contribuciones)
- [Licencia](#licencia)

---

## Descripción General

El objetivo de este proyecto es proporcionar una plantilla robusta y escalable para aplicaciones Laravel, facilitando el desarrollo local y la futura puesta en producción. Gracias a Docker, la configuración del entorno es sencilla, reproducible y desacoplada del sistema operativo anfitrión.

Incluye:
- **Laravel 12** como framework principal.
- **PHP 8.3** ejecutándose sobre FPM-Alpine.
- **PostgreSQL 14** como base de datos relacional.
- Gestión de dependencias con **Composer** y **npm**.
- Soporte para desarrollo frontend moderno con **Vite** y **TailwindCSS**.
- Panel de administración para gestión de alumnos, profesores, cursos y preinscripciones.

---

## Tecnologías y Servicios

- **Laravel 12** (PHP 8.3)
- **Docker** y **Docker Compose**
- **PostgreSQL 14**
- **Node.js & npm** (para assets frontend)
- **Composer** (gestión de dependencias PHP)
- **Vite** (build frontend)
- **TailwindCSS** y **Bootstrap Icons**
- Servicios adicionales fácilmente integrables: **Redis**, **pgAdmin**, etc.

---

## Estructura del Proyecto

```
proyecto-laravel/
├── docker-compose.yml
├── Dockerfile
├── src/
│   ├── app/
│   ├── public/
│   ├── routes/
│   ├── database/
│   ├── .env.example
│   ├── composer.json
│   ├── package.json
│   └── ...
└── ...
```

- **Dockerfile**: Imagen personalizada para Laravel (PHP-FPM, Node.js, Composer, Redis).
- **docker-compose.yml**: Orquestación de servicios (app, db).
- **src/**: Código fuente de la aplicación Laravel.

---

## Principales Funcionalidades

- **Gestión de Alumnos:** Alta, listado, filtrado, búsqueda y paginación. Soporte para campos como nombre, apellidos, DNI, email, nivel formativo y estado (Activo, Inactivo, Pendiente, Baja).
- **Gestión de Profesores y Cursos:** Estructura preparada para CRUD completo.
- **Preinscripciones SEPE:** Migraciones y vistas para gestión de preinscritos.
- **Panel de Administración:** Dashboard con KPIs, tarjetas resumen, ratio alumno-profesor y tasa de asistencia.
- **Diseño Responsive:** Layouts personalizados con TailwindCSS y Bootstrap Icons.
- **Autenticación y Seguridad:** Integración con sistema de usuarios de Laravel.
- **Frontend Moderno:** Vite, TailwindCSS, Alpine.js y efectos visuales modernos.
- **Soporte para migraciones y seeders personalizados.**

---

## Requisitos Previos

- [Docker](https://docs.docker.com/get-docker/) instalado
- [Docker Compose](https://docs.docker.com/compose/install/) instalado
- [Git](https://git-scm.com/) instalado

---

## Instalación y Puesta en Marcha

1. **Clona el repositorio:**
    ```bash
    git clone <URL_DEL_REPOSITORIO>
    cd proyecto-laravel
    ```

2. **Copia el archivo de entorno y configura variables:**
    ```bash
    cp src/.env.example src/.env
    ```
    Edita `src/.env` según tus necesidades (usuario y contraseña de la base de datos, etc).

3. **Construye y levanta los servicios:**
    ```bash
    docker-compose up --build -d
    ```

4. **Instala las dependencias de Laravel:**
    ```bash
    docker exec -it centro_app composer install
    ```

5. **Instala dependencias de frontend:**
    ```bash
    docker exec -it centro_app npm install
    docker exec -it centro_app npm run build
    ```

6. **Genera la clave de la aplicación:**
    ```bash
    docker exec -it centro_app php artisan key:generate
    ```

7. **Ejecuta las migraciones de la base de datos:**
    ```bash
    docker exec -it centro_app php artisan migrate
    ```

---

## Comandos Útiles

- **Ver logs de un servicio:**
    ```bash
    docker-compose logs <servicio>
    ```
- **Detener los servicios:**
    ```bash
    docker-compose down
    ```
- **Acceder a la aplicación:**
    - Laravel: [http://localhost:8000](http://localhost:8000)
    - PostgreSQL: puerto `54321` (ver docker-compose)

---

## Contribuciones

¡Las contribuciones son bienvenidas! Para contribuir:

1. Haz un fork del repositorio.
2. Crea una rama para tu funcionalidad:
    ```bash
    git checkout -b mi-nueva-funcionalidad
    ```
3. Realiza tus cambios y haz commit.
4. Envía un pull request.

---

## Licencia

Este proyecto está bajo la licencia [MIT](LICENSE).

---

> ¿Dudas o sugerencias? Abre un issue o contacta con el autor del repositorio.
</file>

<file path="task.json">
{
"_comentario": "“Run Task” (Ctrl+Shift+P y luego “Tasks: Run Task”).",    
"version": "2.0.0",
"tasks": [
{
"label": "Ajustar permisos del proyecto",
"type": "shell",
"command": "sudo chown -R user1234:user1234 /home/user1234/proyectos/proyecto-laravel",
"problemMatcher": []
}
]
}
</file>

<file path="docker-compose.yml">
services:
  db:
    image: postgres:14-alpine
    container_name: centro_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE:-centro_formacion}
      POSTGRES_USER: ${DB_USERNAME:-usuario}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "49000:5432" # o el puerto que prefieras
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-usuario} -d ${DB_DATABASE:-centro_formacion}"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: centro_app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html
    ports:
      - "8000:8000" # PHP artisan serve
      - "5173:5173" # Vite o PHP artisan serve
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./.env
volumes:
  db_data:
</file>

</files>
